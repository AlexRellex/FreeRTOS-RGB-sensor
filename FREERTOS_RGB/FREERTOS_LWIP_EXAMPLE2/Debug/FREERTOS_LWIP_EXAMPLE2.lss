
FREERTOS_LWIP_EXAMPLE2.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        0000200c  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  8000200c  8000200c  0000240c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .init         0000001a  8000200c  8000200c  0000240c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .text         000083dc  80002028  80002028  00002428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .exception    00000200  8000a600  8000a600  0000aa00  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .fini         00000018  8000a800  8000a800  0000ac00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .rodata       00000784  8000a818  8000a818  0000ac18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .lalign       00000004  8000af9c  8000af9c  0000b39c  2**0
                  ALLOC
  8 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  9 .ctors        00000008  00000008  8000afa0  0000b408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .dtors        00000008  00000010  8000afa8  0000b410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .jcr          00000004  00000018  8000afb0  0000b418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .got          00000000  0000001c  8000afb4  0000b41c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .data         00000528  0000001c  8000afb4  0000b41c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 14 .bss          000002d8  00000560  00000560  00000000  2**2
                  ALLOC
 15 .heap         0000e7c8  00000838  00000838  00000000  2**0
                  ALLOC
 16 .comment      00000030  00000000  00000000  0000b944  2**0
                  CONTENTS, READONLY
 17 .debug_aranges 00001450  00000000  00000000  0000b978  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_pubnames 000029c5  00000000  00000000  0000cdc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_info   00029d4d  00000000  00000000  0000f78d  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 00006f09  00000000  00000000  000394da  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_line   00018b59  00000000  00000000  000403e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_frame  000032e8  00000000  00000000  00058f3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_str    00006455  00000000  00000000  0005c224  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_loc    0000d224  00000000  00000000  00062679  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_macinfo 01910041  00000000  00000000  0006f89d  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 27 .debug_ranges 00001648  00000000  00000000  0197f8de  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:
80000000:	48 1f       	lddpc	pc,80000004 <_start+0x4>
80000002:	d7 03       	nop
80000004:	80 00       	ld.sh	r0,r0[0x0]
80000006:	20 28       	sub	r8,2

80000008 <_trampoline>:

  .global _trampoline
  .type _trampoline, @function
_trampoline:
  // Jump to program start.
  rjmp    program_start
80000008:	e0 8f 10 00 	bral	80002008 <program_start>
	...

80002008 <program_start>:

  .org  PROGRAM_START_OFFSET
program_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80002008:	fe cf ff e0 	sub	pc,pc,-32

Disassembly of section .init:

8000200c <_init>:
8000200c:	eb cd 40 40 	pushm	r6,lr
80002010:	48 26       	lddpc	r6,80002018 <_init+0xc>
80002012:	1e 26       	rsub	r6,pc
80002014:	c0 48       	rjmp	8000201c <_init+0x10>
80002016:	d7 03       	nop
80002018:	80 00       	ld.sh	r0,r0[0x0]
8000201a:	1f f6       	ld.ub	r6,pc[0x7]
8000201c:	c5 6c       	rcall	800020c8 <frame_dummy>
8000201e:	e0 a0 41 e9 	rcall	8000a3f0 <__do_global_ctors_aux>
80002022:	e3 cd 80 40 	ldm	sp++,r6,pc

Disassembly of section .text:

80002028 <_stext>:
80002028:	30 07       	mov	r7,0
8000202a:	e0 7a 00 00 	mov	r10,65536
8000202e:	5b fa       	cp.w	r10,-1
80002030:	f4 0d 17 10 	movne	sp,r10
80002034:	49 4b       	lddpc	r11,80002084 <_stext+0x5c>
80002036:	30 8c       	mov	r12,8
80002038:	18 3b       	cp.w	r11,r12
8000203a:	c0 70       	breq	80002048 <_stext+0x20>
8000203c:	e0 6a 05 48 	mov	r10,1352
80002040:	b7 09       	ld.d	r8,r11++
80002042:	b9 28       	st.d	r12++,r8
80002044:	14 3c       	cp.w	r12,r10
80002046:	cf d5       	brlt	80002040 <_stext+0x18>
80002048:	e0 6a 08 38 	mov	r10,2104
8000204c:	e0 6c 05 48 	mov	r12,1352
80002050:	30 08       	mov	r8,0
80002052:	30 09       	mov	r9,0
80002054:	b9 28       	st.d	r12++,r8
80002056:	14 3c       	cp.w	r12,r10
80002058:	cf e5       	brlt	80002054 <_stext+0x2c>
8000205a:	e0 a0 0d 2d 	rcall	80003ab4 <_init_startup>
8000205e:	48 bc       	lddpc	r12,80002088 <_stext+0x60>
80002060:	e0 a0 14 6c 	rcall	80004938 <atexit>
80002064:	cd 4f       	rcall	8000200c <_init>
80002066:	1a 9c       	mov	r12,sp
80002068:	30 0b       	mov	r11,0
8000206a:	e0 a0 18 e3 	rcall	80005230 <_init_argv>
8000206e:	5b fc       	cp.w	r12,-1
80002070:	f9 bc 00 00 	moveq	r12,0
80002074:	f9 ba 00 00 	moveq	r10,0
80002078:	14 1d       	sub	sp,r10
8000207a:	e0 a0 04 7d 	rcall	80002974 <main>
8000207e:	e0 a0 14 65 	rcall	80004948 <exit>
80002082:	d7 03       	nop
80002084:	80 00       	ld.sh	r0,r0[0x0]
80002086:	af a0       	sbr	r0,0xe
80002088:	80 00       	ld.sh	r0,r0[0x0]
8000208a:	a8 00       	st.h	r4[0x0],r0

8000208c <__do_global_dtors_aux>:
8000208c:	d4 21       	pushm	r4-r7,lr
8000208e:	e0 68 05 60 	mov	r8,1376
80002092:	11 89       	ld.ub	r9,r8[0x0]
80002094:	30 08       	mov	r8,0
80002096:	f0 09 18 00 	cp.b	r9,r8
8000209a:	c1 61       	brne	800020c6 <__do_global_dtors_aux+0x3a>
8000209c:	31 08       	mov	r8,16
8000209e:	31 46       	mov	r6,20
800020a0:	10 95       	mov	r5,r8
800020a2:	10 16       	sub	r6,r8
800020a4:	e0 67 05 64 	mov	r7,1380
800020a8:	a3 46       	asr	r6,0x2
800020aa:	20 16       	sub	r6,1
800020ac:	c0 68       	rjmp	800020b8 <__do_global_dtors_aux+0x2c>
800020ae:	2f f8       	sub	r8,-1
800020b0:	8f 08       	st.w	r7[0x0],r8
800020b2:	ea 08 03 28 	ld.w	r8,r5[r8<<0x2]
800020b6:	5d 18       	icall	r8
800020b8:	6e 08       	ld.w	r8,r7[0x0]
800020ba:	0c 38       	cp.w	r8,r6
800020bc:	cf 93       	brcs	800020ae <__do_global_dtors_aux+0x22>
800020be:	30 19       	mov	r9,1
800020c0:	e0 68 05 60 	mov	r8,1376
800020c4:	b0 89       	st.b	r8[0x0],r9
800020c6:	d8 22       	popm	r4-r7,pc

800020c8 <frame_dummy>:
800020c8:	d4 01       	pushm	lr
800020ca:	31 8c       	mov	r12,24
800020cc:	78 08       	ld.w	r8,r12[0x0]
800020ce:	58 08       	cp.w	r8,0
800020d0:	c0 50       	breq	800020da <frame_dummy+0x12>
800020d2:	48 38       	lddpc	r8,800020dc <frame_dummy+0x14>
800020d4:	58 08       	cp.w	r8,0
800020d6:	c0 20       	breq	800020da <frame_dummy+0x12>
800020d8:	5d 18       	icall	r8
800020da:	d8 02       	popm	pc
800020dc:	00 00       	add	r0,r0
	...

800020e0 <dip204_select>:

/*! \brief function to select the LCD
 *
 */
static void dip204_select(void)
{
800020e0:	d4 01       	pushm	lr
  spi_selectChip(DIP204_SPI, DIP204_SPI_NPCS);
800020e2:	30 2b       	mov	r11,2
800020e4:	fe 7c 28 00 	mov	r12,-55296
800020e8:	f0 1f 00 02 	mcall	800020f0 <dip204_select+0x10>
}
800020ec:	d8 02       	popm	pc
800020ee:	00 00       	add	r0,r0
800020f0:	80 00       	ld.sh	r0,r0[0x0]
800020f2:	30 b0       	mov	r0,11

800020f4 <dip204_write_byte>:
 *
 *  \param  byte  Input. byte to write to the LCD (D7 .. D0)
 *
 */
static void dip204_write_byte(unsigned char byte)
{
800020f4:	eb cd 40 80 	pushm	r7,lr
  unsigned char reverse;

  switch (byte)
800020f8:	f8 c8 ff f8 	sub	r8,r12,-8
800020fc:	30 69       	mov	r9,6
800020fe:	f2 08 18 00 	cp.b	r8,r9
80002102:	e0 8b 00 0f 	brhi	80002120 <dip204_write_byte+0x2c>
80002106:	30 19       	mov	r9,1
80002108:	f2 08 09 48 	lsl	r8,r9,r8
8000210c:	e2 18 00 55 	andl	r8,0x55,COH
80002110:	c0 80       	breq	80002120 <dip204_write_byte+0x2c>
    {
      /* send D7 to D0 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, byte);
80002112:	18 9b       	mov	r11,r12
80002114:	fe 7c 28 00 	mov	r12,-55296
80002118:	f0 1f 00 0c 	mcall	80002148 <dip204_write_byte+0x54>
      Assert( SPI_OK==spi_status );
      break;
8000211c:	e3 cd 80 80 	ldm	sp++,r7,pc
    }
    /* LSB first for all other data */
    default:
    {
      /* reverse byte */
      reverse = bit_reverse8(byte);
80002120:	5c 9c       	brev	r12
      /* send D0 to D3 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, (reverse & 0xF0));
80002122:	f8 07 16 18 	lsr	r7,r12,0x18
80002126:	0e 9b       	mov	r11,r7
80002128:	e2 1b 00 f0 	andl	r11,0xf0,COH
8000212c:	fe 7c 28 00 	mov	r12,-55296
80002130:	f0 1f 00 06 	mcall	80002148 <dip204_write_byte+0x54>
      Assert( SPI_OK==spi_status );
      /* send D4 to D7 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, ((reverse << 4) & 0xF0));
80002134:	ee 0b 15 04 	lsl	r11,r7,0x4
80002138:	e2 1b 00 f0 	andl	r11,0xf0,COH
8000213c:	fe 7c 28 00 	mov	r12,-55296
80002140:	f0 1f 00 02 	mcall	80002148 <dip204_write_byte+0x54>
80002144:	e3 cd 80 80 	ldm	sp++,r7,pc
80002148:	80 00       	ld.sh	r0,r0[0x0]
8000214a:	2f 4a       	sub	r10,-12

8000214c <dip204_read_byte>:
 *
 *  \param  byte  Input. byte read from the LCD (D7 .. D0)
 *
 */
static void dip204_read_byte(unsigned char *byte)
{
8000214c:	eb cd 40 c0 	pushm	r6-r7,lr
80002150:	20 1d       	sub	sp,4
80002152:	18 96       	mov	r6,r12
  unsigned short reverse = 0x00;
80002154:	fa c7 ff fc 	sub	r7,sp,-4
80002158:	30 08       	mov	r8,0
8000215a:	0e e8       	st.h	--r7,r8

  /* dummy write */
#ifdef _ASSERT_ENABLE_
  spi_status =
#endif
  spi_write(DIP204_SPI, 0x00);
8000215c:	30 0b       	mov	r11,0
8000215e:	fe 7c 28 00 	mov	r12,-55296
80002162:	f0 1f 00 08 	mcall	80002180 <dip204_read_byte+0x34>
  Assert( SPI_OK==spi_status );
  /* read RSR register */
#ifdef _ASSERT_ENABLE_
  spi_status =
#endif
  spi_read(DIP204_SPI, &reverse);
80002166:	0e 9b       	mov	r11,r7
80002168:	fe 7c 28 00 	mov	r12,-55296
8000216c:	f0 1f 00 06 	mcall	80002184 <dip204_read_byte+0x38>
  Assert( SPI_OK==spi_status );
  /* Revert received byte (issued LSB first by the LCD) */
  *byte = bit_reverse8(reverse);
80002170:	1b b8       	ld.ub	r8,sp[0x3]
80002172:	5c 98       	brev	r8
80002174:	b9 88       	lsr	r8,0x18
80002176:	ac 88       	st.b	r6[0x0],r8
}
80002178:	2f fd       	sub	sp,-4
8000217a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000217e:	00 00       	add	r0,r0
80002180:	80 00       	ld.sh	r0,r0[0x0]
80002182:	2f 4a       	sub	r10,-12
80002184:	80 00       	ld.sh	r0,r0[0x0]
80002186:	2f 66       	sub	r6,-10

80002188 <dip204_wait_busy>:

/*! \brief function to wait for LCD becomes not busy
 *
 */
static void dip204_wait_busy(void)
{
80002188:	eb cd 40 c0 	pushm	r6-r7,lr
8000218c:	20 1d       	sub	sp,4
  unsigned char status = 0x00;
8000218e:	fa c7 ff fc 	sub	r7,sp,-4
80002192:	30 08       	mov	r8,0
80002194:	0e f8       	st.b	--r7,r8

  /* send read command to LCD */
  dip204_write_byte(DIP204_READ_COMMAND);
80002196:	e0 6c 00 fc 	mov	r12,252
8000219a:	f0 1f 00 07 	mcall	800021b4 <dip204_wait_busy+0x2c>
  /* read next byte */
  do {
  dip204_read_byte(&status);
  /* keep D7 to know status */
  }while (status & 0x80);
8000219e:	30 06       	mov	r6,0

  /* send read command to LCD */
  dip204_write_byte(DIP204_READ_COMMAND);
  /* read next byte */
  do {
  dip204_read_byte(&status);
800021a0:	0e 9c       	mov	r12,r7
800021a2:	f0 1f 00 06 	mcall	800021b8 <dip204_wait_busy+0x30>
  /* keep D7 to know status */
  }while (status & 0x80);
800021a6:	1b b8       	ld.ub	r8,sp[0x3]
800021a8:	ec 08 18 00 	cp.b	r8,r6
800021ac:	cf a5       	brlt	800021a0 <dip204_wait_busy+0x18>
}
800021ae:	2f fd       	sub	sp,-4
800021b0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800021b4:	80 00       	ld.sh	r0,r0[0x0]
800021b6:	20 f4       	sub	r4,15
800021b8:	80 00       	ld.sh	r0,r0[0x0]
800021ba:	21 4c       	sub	r12,20

800021bc <dip204_unselect>:

/*! \brief function to unselect the LCD
 *
 */
static void dip204_unselect(void)
{
800021bc:	d4 01       	pushm	lr
#ifdef _ASSERT_ENABLE_
  spi_status =
#endif
  spi_unselectChip(DIP204_SPI, DIP204_SPI_NPCS);
800021be:	30 2b       	mov	r11,2
800021c0:	fe 7c 28 00 	mov	r12,-55296
800021c4:	f0 1f 00 02 	mcall	800021cc <dip204_unselect+0x10>
  Assert( SPI_OK==spi_status );
}
800021c8:	d8 02       	popm	pc
800021ca:	00 00       	add	r0,r0
800021cc:	80 00       	ld.sh	r0,r0[0x0]
800021ce:	30 70       	mov	r0,7

800021d0 <dip204_printf_string>:
  dip204_unselect();
}


void dip204_printf_string(const char *format, ...)
{
800021d0:	d4 21       	pushm	r4-r7,lr
800021d2:	20 6d       	sub	sp,24
  va_list arg;
  char string[21];
  unsigned char i=0;

  va_start(arg, format);
  i = vsprintf(string, format, arg);
800021d4:	fa ca ff d4 	sub	r10,sp,-44
800021d8:	18 9b       	mov	r11,r12
800021da:	1a 9c       	mov	r12,sp
800021dc:	f0 1f 00 1e 	mcall	80002254 <dip204_printf_string+0x84>
800021e0:	5c 5c       	castu.b	r12
  while (i < sizeof(string) - 1) string[i++] = '\0';
800021e2:	31 38       	mov	r8,19
800021e4:	f0 0c 18 00 	cp.b	r12,r8
800021e8:	e0 8b 00 0e 	brhi	80002204 <dip204_printf_string+0x34>
800021ec:	30 0a       	mov	r10,0
800021ee:	31 49       	mov	r9,20
800021f0:	fa c8 ff e8 	sub	r8,sp,-24
800021f4:	18 08       	add	r8,r12
800021f6:	f1 6a ff e8 	st.b	r8[-24],r10
800021fa:	2f fc       	sub	r12,-1
800021fc:	5c 5c       	castu.b	r12
800021fe:	f2 0c 18 00 	cp.b	r12,r9
80002202:	cf 71       	brne	800021f0 <dip204_printf_string+0x20>
  va_end(arg);
  dip204_select();
80002204:	f0 1f 00 15 	mcall	80002258 <dip204_printf_string+0x88>
  /* for all chars in string */
  i = 0;
  while(string[i]!='\0')
80002208:	30 08       	mov	r8,0
8000220a:	1b 89       	ld.ub	r9,sp[0x0]
8000220c:	f0 09 18 00 	cp.b	r9,r8
80002210:	c1 e0       	breq	8000224c <dip204_printf_string+0x7c>
80002212:	30 06       	mov	r6,0
80002214:	0c 97       	mov	r7,r6
  {
    /* Send Write Data Start Byte */
    dip204_write_byte(DIP204_WRITE_DATA);
80002216:	e0 64 00 fa 	mov	r4,250
  while (i < sizeof(string) - 1) string[i++] = '\0';
  va_end(arg);
  dip204_select();
  /* for all chars in string */
  i = 0;
  while(string[i]!='\0')
8000221a:	10 95       	mov	r5,r8
  {
    /* Send Write Data Start Byte */
    dip204_write_byte(DIP204_WRITE_DATA);
8000221c:	08 9c       	mov	r12,r4
8000221e:	f0 1f 00 10 	mcall	8000225c <dip204_printf_string+0x8c>
    /* Send byte */
    dip204_write_byte(string[i]);
80002222:	fa c8 ff e8 	sub	r8,sp,-24
80002226:	f0 06 00 06 	add	r6,r8,r6
8000222a:	ed 3c ff e8 	ld.ub	r12,r6[-24]
8000222e:	f0 1f 00 0c 	mcall	8000225c <dip204_printf_string+0x8c>
    /* go to next char */
    i++;
80002232:	2f f7       	sub	r7,-1
80002234:	5c 57       	castu.b	r7
    dip204_wait_busy();
80002236:	f0 1f 00 0b 	mcall	80002260 <dip204_printf_string+0x90>
  while (i < sizeof(string) - 1) string[i++] = '\0';
  va_end(arg);
  dip204_select();
  /* for all chars in string */
  i = 0;
  while(string[i]!='\0')
8000223a:	0e 96       	mov	r6,r7
8000223c:	fa c8 ff e8 	sub	r8,sp,-24
80002240:	0e 08       	add	r8,r7
80002242:	f1 38 ff e8 	ld.ub	r8,r8[-24]
80002246:	ea 08 18 00 	cp.b	r8,r5
8000224a:	ce 91       	brne	8000221c <dip204_printf_string+0x4c>
    dip204_write_byte(string[i]);
    /* go to next char */
    i++;
    dip204_wait_busy();
  }
  dip204_unselect();
8000224c:	f0 1f 00 06 	mcall	80002264 <dip204_printf_string+0x94>
}
80002250:	2f ad       	sub	sp,-24
80002252:	d8 22       	popm	r4-r7,pc
80002254:	80 00       	ld.sh	r0,r0[0x0]
80002256:	53 48       	stdsp	sp[0xd0],r8
80002258:	80 00       	ld.sh	r0,r0[0x0]
8000225a:	20 e0       	sub	r0,14
8000225c:	80 00       	ld.sh	r0,r0[0x0]
8000225e:	20 f4       	sub	r4,15
80002260:	80 00       	ld.sh	r0,r0[0x0]
80002262:	21 88       	sub	r8,24
80002264:	80 00       	ld.sh	r0,r0[0x0]
80002266:	21 bc       	sub	r12,27

80002268 <dip204_set_cursor_position>:
  dip204_set_cursor_position(column, line);
}


void dip204_set_cursor_position(unsigned char column, unsigned char line)
{
80002268:	eb cd 40 c0 	pushm	r6-r7,lr
8000226c:	18 96       	mov	r6,r12
8000226e:	16 97       	mov	r7,r11
  unsigned char address = 0;

  dip204_select();
80002270:	f0 1f 00 11 	mcall	800022b4 <dip204_set_cursor_position+0x4c>
  if ((column <= 20) && (line <= 4))
80002274:	31 48       	mov	r8,20
80002276:	f0 06 18 00 	cp.b	r6,r8
8000227a:	5f 89       	srls	r9
8000227c:	30 48       	mov	r8,4
8000227e:	f0 07 18 00 	cp.b	r7,r8
80002282:	5f 88       	srls	r8
80002284:	f3 e8 00 08 	and	r8,r9,r8
80002288:	c0 31       	brne	8000228e <dip204_set_cursor_position+0x26>
8000228a:	30 06       	mov	r6,0
8000228c:	c0 68       	rjmp	80002298 <dip204_set_cursor_position+0x30>
  {
    /* Calculate DDRAM address from line and row values */
    address = ( (line-1) * 32 ) + ( column-1 ) + 128;
8000228e:	28 16       	sub	r6,-127
80002290:	20 17       	sub	r7,1
80002292:	a5 77       	lsl	r7,0x5
80002294:	0e 06       	add	r6,r7
80002296:	5c 56       	castu.b	r6
  }
  /* Send Command Start Byte */
  dip204_write_byte(DIP204_WRITE_COMMAND);
80002298:	e0 6c 00 f8 	mov	r12,248
8000229c:	f0 1f 00 07 	mcall	800022b8 <dip204_set_cursor_position+0x50>
  /* Send Address lower Nibble */
  dip204_write_byte(address);
800022a0:	0c 9c       	mov	r12,r6
800022a2:	f0 1f 00 06 	mcall	800022b8 <dip204_set_cursor_position+0x50>
  dip204_wait_busy();
800022a6:	f0 1f 00 06 	mcall	800022bc <dip204_set_cursor_position+0x54>
  dip204_unselect();
800022aa:	f0 1f 00 06 	mcall	800022c0 <dip204_set_cursor_position+0x58>
}
800022ae:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800022b2:	00 00       	add	r0,r0
800022b4:	80 00       	ld.sh	r0,r0[0x0]
800022b6:	20 e0       	sub	r0,14
800022b8:	80 00       	ld.sh	r0,r0[0x0]
800022ba:	20 f4       	sub	r4,15
800022bc:	80 00       	ld.sh	r0,r0[0x0]
800022be:	21 88       	sub	r8,24
800022c0:	80 00       	ld.sh	r0,r0[0x0]
800022c2:	21 bc       	sub	r12,27

800022c4 <dip204_hide_cursor>:
  dip204_unselect();
}


void dip204_hide_cursor(void)
{
800022c4:	d4 01       	pushm	lr
  /* select the LCD chip */
  dip204_select();
800022c6:	f0 1f 00 08 	mcall	800022e4 <dip204_hide_cursor+0x20>
  /* Send Command Start Byte */
  dip204_write_byte(DIP204_WRITE_COMMAND);
800022ca:	e0 6c 00 f8 	mov	r12,248
800022ce:	f0 1f 00 07 	mcall	800022e8 <dip204_hide_cursor+0x24>
  /* Send "Display On Command: Display On, Cursor On, Blink On" */
  dip204_write_byte(0x0C);
800022d2:	30 cc       	mov	r12,12
800022d4:	f0 1f 00 05 	mcall	800022e8 <dip204_hide_cursor+0x24>
  dip204_wait_busy();
800022d8:	f0 1f 00 05 	mcall	800022ec <dip204_hide_cursor+0x28>
  /* unselect chip */
  dip204_unselect();
800022dc:	f0 1f 00 05 	mcall	800022f0 <dip204_hide_cursor+0x2c>
}
800022e0:	d8 02       	popm	pc
800022e2:	00 00       	add	r0,r0
800022e4:	80 00       	ld.sh	r0,r0[0x0]
800022e6:	20 e0       	sub	r0,14
800022e8:	80 00       	ld.sh	r0,r0[0x0]
800022ea:	20 f4       	sub	r4,15
800022ec:	80 00       	ld.sh	r0,r0[0x0]
800022ee:	21 88       	sub	r8,24
800022f0:	80 00       	ld.sh	r0,r0[0x0]
800022f2:	21 bc       	sub	r12,27

800022f4 <dip204_init>:


/****************************** global functions *****************************/

void dip204_init(backlight_options option, bool backlight_on)
{
800022f4:	eb cd 40 80 	pushm	r7,lr
800022f8:	20 4d       	sub	sp,16
800022fa:	16 97       	mov	r7,r11
  pwm_opt_t pwm_opt;  // pwm option config

  if (option == backlight_PWM)
800022fc:	58 1c       	cp.w	r12,1
800022fe:	c3 01       	brne	8000235e <dip204_init+0x6a>
  {
    channel_id = DIP204_PWM_CHANNEL;
80002300:	30 69       	mov	r9,6
80002302:	4f 88       	lddpc	r8,800024e0 <dip204_init+0x1ec>
80002304:	91 09       	st.w	r8[0x0],r9
    gpio_enable_module_pin(DIP204_PWM_PIN, DIP204_PWM_FUNCTION);
80002306:	30 2b       	mov	r11,2
80002308:	33 2c       	mov	r12,50
8000230a:	f0 1f 00 77 	mcall	800024e4 <dip204_init+0x1f0>

    // PWM controller configuration
    pwm_opt.diva=0;
8000230e:	30 08       	mov	r8,0
80002310:	50 18       	stdsp	sp[0x4],r8
    pwm_opt.divb=0;
80002312:	50 08       	stdsp	sp[0x0],r8
    pwm_opt.prea=0;
80002314:	50 38       	stdsp	sp[0xc],r8
    pwm_opt.preb=0;
80002316:	50 28       	stdsp	sp[0x8],r8

    pwm_init(&pwm_opt);
80002318:	1a 9c       	mov	r12,sp
8000231a:	f0 1f 00 74 	mcall	800024e8 <dip204_init+0x1f4>
    pwm_duty = (backlight_on) ? DIP204_PERIOD_MAX - 1 : 1;
8000231e:	58 07       	cp.w	r7,0
80002320:	f9 b7 01 31 	movne	r7,49
80002324:	f9 b7 00 01 	moveq	r7,1
80002328:	4f 18       	lddpc	r8,800024ec <dip204_init+0x1f8>
8000232a:	b0 07       	st.h	r8[0x0],r7
    pwm_channel.CMR.calg = PWM_MODE_LEFT_ALIGNED;   // channel mode
8000232c:	4f 1b       	lddpc	r11,800024f0 <dip204_init+0x1fc>
8000232e:	76 08       	ld.w	r8,r11[0x0]
    pwm_channel.CMR.cpol = PWM_POLARITY_LOW;   // channel polarity
    pwm_channel.CMR.cpd = PWM_UPDATE_PERIOD;   // not used the first time
80002330:	e0 18 fc ff 	andl	r8,0xfcff
    pwm_channel.CMR.cpre = AVR32_PWM_CPRE_MCK_DIV_256;   // channel prescaler
80002334:	ab a8       	sbr	r8,0xa
80002336:	30 89       	mov	r9,8
80002338:	f1 d9 d0 04 	bfins	r8,r9,0x0,0x4
8000233c:	97 08       	st.w	r11[0x0],r8
    pwm_channel.cdty = pwm_duty;  // channel duty cycle, should be < CPRD
8000233e:	97 17       	st.w	r11[0x4],r7
    pwm_channel.cprd = DIP204_PERIOD_MAX;  // channel period
80002340:	33 28       	mov	r8,50
80002342:	97 28       	st.w	r11[0x8],r8
    pwm_channel.cupd = 0;  // channel update is not used here.
80002344:	30 08       	mov	r8,0
80002346:	97 48       	st.w	r11[0x10],r8

    pwm_channel_init(channel_id, &pwm_channel);
80002348:	4e 67       	lddpc	r7,800024e0 <dip204_init+0x1ec>
8000234a:	6e 0c       	ld.w	r12,r7[0x0]
8000234c:	f0 1f 00 6a 	mcall	800024f4 <dip204_init+0x200>
    // start PWM
    pwm_start_channels(1 << channel_id);
80002350:	6e 08       	ld.w	r8,r7[0x0]
80002352:	30 1c       	mov	r12,1
80002354:	f8 08 09 4c 	lsl	r12,r12,r8
80002358:	f0 1f 00 68 	mcall	800024f8 <dip204_init+0x204>
8000235c:	c0 a8       	rjmp	80002370 <dip204_init+0x7c>
  }
  else
  {
    if (backlight_on)
8000235e:	58 0b       	cp.w	r11,0
80002360:	c0 50       	breq	8000236a <dip204_init+0x76>
    {
      gpio_clr_gpio_pin(DIP204_BACKLIGHT_PIN);
80002362:	33 2c       	mov	r12,50
80002364:	f0 1f 00 66 	mcall	800024fc <dip204_init+0x208>
80002368:	c0 48       	rjmp	80002370 <dip204_init+0x7c>
    }
    else
    {
      gpio_set_gpio_pin(DIP204_BACKLIGHT_PIN);
8000236a:	33 2c       	mov	r12,50
8000236c:	f0 1f 00 65 	mcall	80002500 <dip204_init+0x20c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002370:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002374:	f0 ca f7 00 	sub	r10,r8,-2304
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002378:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000237c:	14 38       	cp.w	r8,r10
8000237e:	e0 88 00 08 	brls	8000238e <dip204_init+0x9a>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002382:	12 38       	cp.w	r8,r9
80002384:	fe 98 ff fa 	brls	80002378 <dip204_init+0x84>
80002388:	12 3a       	cp.w	r10,r9
8000238a:	c6 e3       	brcs	80002466 <dip204_init+0x172>
8000238c:	cf 6b       	rjmp	80002378 <dip204_init+0x84>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000238e:	12 38       	cp.w	r8,r9
80002390:	e0 8b 00 6b 	brhi	80002466 <dip204_init+0x172>
80002394:	12 3a       	cp.w	r10,r9
80002396:	c6 83       	brcs	80002466 <dip204_init+0x172>
80002398:	cf 0b       	rjmp	80002378 <dip204_init+0x84>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000239a:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000239e:	14 38       	cp.w	r8,r10
800023a0:	e0 88 00 08 	brls	800023b0 <dip204_init+0xbc>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800023a4:	12 38       	cp.w	r8,r9
800023a6:	fe 98 ff fa 	brls	8000239a <dip204_init+0xa6>
800023aa:	12 3a       	cp.w	r10,r9
800023ac:	c6 b3       	brcs	80002482 <dip204_init+0x18e>
800023ae:	cf 6b       	rjmp	8000239a <dip204_init+0xa6>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800023b0:	12 38       	cp.w	r8,r9
800023b2:	e0 8b 00 68 	brhi	80002482 <dip204_init+0x18e>
800023b6:	12 3a       	cp.w	r10,r9
800023b8:	c6 53       	brcs	80002482 <dip204_init+0x18e>
800023ba:	cf 0b       	rjmp	8000239a <dip204_init+0xa6>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800023bc:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800023c0:	14 38       	cp.w	r8,r10
800023c2:	e0 88 00 08 	brls	800023d2 <dip204_init+0xde>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800023c6:	12 38       	cp.w	r8,r9
800023c8:	fe 98 ff fa 	brls	800023bc <dip204_init+0xc8>
800023cc:	12 3a       	cp.w	r10,r9
800023ce:	c6 23       	brcs	80002492 <dip204_init+0x19e>
800023d0:	cf 6b       	rjmp	800023bc <dip204_init+0xc8>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800023d2:	12 38       	cp.w	r8,r9
800023d4:	e0 8b 00 5f 	brhi	80002492 <dip204_init+0x19e>
800023d8:	12 3a       	cp.w	r10,r9
800023da:	c5 c3       	brcs	80002492 <dip204_init+0x19e>
800023dc:	cf 0b       	rjmp	800023bc <dip204_init+0xc8>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800023de:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800023e2:	14 38       	cp.w	r8,r10
800023e4:	e0 88 00 08 	brls	800023f4 <dip204_init+0x100>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800023e8:	12 38       	cp.w	r8,r9
800023ea:	fe 98 ff fa 	brls	800023de <dip204_init+0xea>
800023ee:	12 3a       	cp.w	r10,r9
800023f0:	c5 93       	brcs	800024a2 <dip204_init+0x1ae>
800023f2:	cf 6b       	rjmp	800023de <dip204_init+0xea>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800023f4:	12 38       	cp.w	r8,r9
800023f6:	e0 8b 00 56 	brhi	800024a2 <dip204_init+0x1ae>
800023fa:	12 3a       	cp.w	r10,r9
800023fc:	c5 33       	brcs	800024a2 <dip204_init+0x1ae>
800023fe:	cf 0b       	rjmp	800023de <dip204_init+0xea>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002400:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002404:	14 38       	cp.w	r8,r10
80002406:	e0 88 00 08 	brls	80002416 <dip204_init+0x122>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000240a:	12 38       	cp.w	r8,r9
8000240c:	fe 98 ff fa 	brls	80002400 <dip204_init+0x10c>
80002410:	12 3a       	cp.w	r10,r9
80002412:	c5 03       	brcs	800024b2 <dip204_init+0x1be>
80002414:	cf 6b       	rjmp	80002400 <dip204_init+0x10c>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002416:	12 38       	cp.w	r8,r9
80002418:	e0 8b 00 4d 	brhi	800024b2 <dip204_init+0x1be>
8000241c:	12 3a       	cp.w	r10,r9
8000241e:	c4 a3       	brcs	800024b2 <dip204_init+0x1be>
80002420:	cf 0b       	rjmp	80002400 <dip204_init+0x10c>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002422:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002426:	14 38       	cp.w	r8,r10
80002428:	e0 88 00 08 	brls	80002438 <dip204_init+0x144>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000242c:	12 38       	cp.w	r8,r9
8000242e:	fe 98 ff fa 	brls	80002422 <dip204_init+0x12e>
80002432:	12 3a       	cp.w	r10,r9
80002434:	c4 73       	brcs	800024c2 <dip204_init+0x1ce>
80002436:	cf 6b       	rjmp	80002422 <dip204_init+0x12e>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002438:	12 38       	cp.w	r8,r9
8000243a:	e0 8b 00 44 	brhi	800024c2 <dip204_init+0x1ce>
8000243e:	12 3a       	cp.w	r10,r9
80002440:	c4 13       	brcs	800024c2 <dip204_init+0x1ce>
80002442:	cf 0b       	rjmp	80002422 <dip204_init+0x12e>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002444:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002448:	14 38       	cp.w	r8,r10
8000244a:	e0 88 00 08 	brls	8000245a <dip204_init+0x166>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000244e:	12 38       	cp.w	r8,r9
80002450:	fe 98 ff fa 	brls	80002444 <dip204_init+0x150>
80002454:	12 3a       	cp.w	r10,r9
80002456:	c3 e3       	brcs	800024d2 <dip204_init+0x1de>
80002458:	cf 6b       	rjmp	80002444 <dip204_init+0x150>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000245a:	12 38       	cp.w	r8,r9
8000245c:	e0 8b 00 3b 	brhi	800024d2 <dip204_init+0x1de>
80002460:	12 3a       	cp.w	r10,r9
80002462:	c3 83       	brcs	800024d2 <dip204_init+0x1de>
80002464:	cf 0b       	rjmp	80002444 <dip204_init+0x150>
    }
  }
  // delay for power on
  delay_ms(20);
  // select the LCD chip
  dip204_select();
80002466:	f0 1f 00 28 	mcall	80002504 <dip204_init+0x210>
  // Send Command Start Byte
  dip204_write_byte(DIP204_WRITE_COMMAND);
8000246a:	e0 6c 00 f8 	mov	r12,248
8000246e:	f0 1f 00 27 	mcall	80002508 <dip204_init+0x214>
  // Send "extended Function Set" Command  (RE=1)
  dip204_write_byte(0x34);
80002472:	33 4c       	mov	r12,52
80002474:	f0 1f 00 25 	mcall	80002508 <dip204_init+0x214>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002478:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000247c:	f0 ca ff 8c 	sub	r10,r8,-116
80002480:	c8 db       	rjmp	8000239a <dip204_init+0xa6>
  // Wait for command execution
  delay_ms(1);
  // Send "Enter 4-Line Mode" Command
  dip204_write_byte(0x09);
80002482:	30 9c       	mov	r12,9
80002484:	f0 1f 00 21 	mcall	80002508 <dip204_init+0x214>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002488:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000248c:	f0 ca ff 8c 	sub	r10,r8,-116
80002490:	c9 6b       	rjmp	800023bc <dip204_init+0xc8>
  // Wait for command execution
  delay_ms(1);
  // Send "Function Set" Command (RE=0)
  dip204_write_byte(0x30);
80002492:	33 0c       	mov	r12,48
80002494:	f0 1f 00 1d 	mcall	80002508 <dip204_init+0x214>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002498:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000249c:	f0 ca ff 8c 	sub	r10,r8,-116
800024a0:	c9 fb       	rjmp	800023de <dip204_init+0xea>
  // Wait for command execution
  delay_ms(1);
  // Send "Display On Command: Display On, Cursor On, Blink On"
  dip204_write_byte(0x0F);
800024a2:	30 fc       	mov	r12,15
800024a4:	f0 1f 00 19 	mcall	80002508 <dip204_init+0x214>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800024a8:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800024ac:	f0 ca ff 8c 	sub	r10,r8,-116
800024b0:	ca 8b       	rjmp	80002400 <dip204_init+0x10c>
  // Wait for command execution
  delay_ms(1);
  // Send "Display Clear" Command
  dip204_write_byte(0x01);
800024b2:	30 1c       	mov	r12,1
800024b4:	f0 1f 00 15 	mcall	80002508 <dip204_init+0x214>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800024b8:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800024bc:	f0 ca fd c0 	sub	r10,r8,-576
800024c0:	cb 1b       	rjmp	80002422 <dip204_init+0x12e>
  // Wait for command execution
  delay_ms(5);
  // Send "Entry Mode Set Command: Increment Mode, Entire Shift off"
  dip204_write_byte(0x06);
800024c2:	30 6c       	mov	r12,6
800024c4:	f0 1f 00 11 	mcall	80002508 <dip204_init+0x214>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800024c8:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800024cc:	f0 ca ff 8c 	sub	r10,r8,-116
800024d0:	cb ab       	rjmp	80002444 <dip204_init+0x150>
  // Wait for command execution
  delay_ms(1);
  dip204_wait_busy();
800024d2:	f0 1f 00 0f 	mcall	8000250c <dip204_init+0x218>
  // unselect chip
  dip204_unselect();
800024d6:	f0 1f 00 0f 	mcall	80002510 <dip204_init+0x21c>
}
800024da:	2f cd       	sub	sp,-16
800024dc:	e3 cd 80 80 	ldm	sp++,r7,pc
800024e0:	00 00       	add	r0,r0
800024e2:	00 1c       	sub	r12,r0
800024e4:	80 00       	ld.sh	r0,r0[0x0]
800024e6:	32 2e       	mov	lr,34
800024e8:	80 00       	ld.sh	r0,r0[0x0]
800024ea:	25 5c       	sub	r12,85
800024ec:	00 00       	add	r0,r0
800024ee:	05 88       	ld.ub	r8,r2[0x0]
800024f0:	00 00       	add	r0,r0
800024f2:	05 68       	ld.uh	r8,--r2
800024f4:	80 00       	ld.sh	r0,r0[0x0]
800024f6:	25 14       	sub	r4,81
800024f8:	80 00       	ld.sh	r0,r0[0x0]
800024fa:	25 4a       	sub	r10,84
800024fc:	80 00       	ld.sh	r0,r0[0x0]
800024fe:	32 cc       	mov	r12,44
80002500:	80 00       	ld.sh	r0,r0[0x0]
80002502:	32 b0       	mov	r0,43
80002504:	80 00       	ld.sh	r0,r0[0x0]
80002506:	20 e0       	sub	r0,14
80002508:	80 00       	ld.sh	r0,r0[0x0]
8000250a:	20 f4       	sub	r4,15
8000250c:	80 00       	ld.sh	r0,r0[0x0]
8000250e:	21 88       	sub	r8,24
80002510:	80 00       	ld.sh	r0,r0[0x0]
80002512:	21 bc       	sub	r12,27

80002514 <pwm_channel_init>:

int pwm_channel_init( unsigned int channel_id, const avr32_pwm_channel_t *pwm_channel)
{
  volatile avr32_pwm_t *pwm = &AVR32_PWM;

  if (pwm_channel == 0) // Null pointer.
80002514:	58 0b       	cp.w	r11,0
80002516:	c1 90       	breq	80002548 <pwm_channel_init+0x34>
    return PWM_INVALID_ARGUMENT;
  if (channel_id > AVR32_PWM_LINES_MSB) // Control input values.
80002518:	58 6c       	cp.w	r12,6
8000251a:	e0 8b 00 17 	brhi	80002548 <pwm_channel_init+0x34>
    return PWM_INVALID_INPUT;

  pwm->channel[channel_id].cmr= pwm_channel->cmr;   // Channel mode.
8000251e:	76 0a       	ld.w	r10,r11[0x0]
80002520:	fe 78 30 00 	mov	r8,-53248
80002524:	f8 c9 ff f0 	sub	r9,r12,-16
80002528:	a5 79       	lsl	r9,0x5
8000252a:	f0 09 00 09 	add	r9,r8,r9
8000252e:	93 0a       	st.w	r9[0x0],r10
  pwm->channel[channel_id].cdty= pwm_channel->cdty; // Duty cycle, should be < CPRD.
80002530:	76 19       	ld.w	r9,r11[0x4]
80002532:	a5 7c       	lsl	r12,0x5
80002534:	f0 0c 00 0c 	add	r12,r8,r12
80002538:	f8 c8 fd fc 	sub	r8,r12,-516
8000253c:	91 09       	st.w	r8[0x0],r9
  pwm->channel[channel_id].cprd= pwm_channel->cprd; // Channel period.
8000253e:	76 28       	ld.w	r8,r11[0x8]
80002540:	f8 cc fd f8 	sub	r12,r12,-520
80002544:	99 08       	st.w	r12[0x0],r8
80002546:	5e fd       	retal	0

  return PWM_SUCCESS;
80002548:	5e ff       	retal	1

8000254a <pwm_start_channels>:
}


int pwm_start_channels(unsigned long channels_bitmask)
{
  if (channels_bitmask & ~((1 << (AVR32_PWM_LINES_MSB + 1)) - 1))
8000254a:	18 98       	mov	r8,r12
8000254c:	e0 18 ff 80 	andl	r8,0xff80
80002550:	c0 20       	breq	80002554 <pwm_start_channels+0xa>
80002552:	5e ff       	retal	1
    return PWM_INVALID_INPUT;

  AVR32_PWM.ena = channels_bitmask; // Enable channels.
80002554:	fe 78 30 00 	mov	r8,-53248
80002558:	91 1c       	st.w	r8[0x4],r12
8000255a:	5e fd       	retal	0

8000255c <pwm_init>:


int pwm_init(const pwm_opt_t *opt)
{
  volatile avr32_pwm_t *pwm = &AVR32_PWM;
  bool global_interrupt_enabled = Is_global_interrupt_enabled();
8000255c:	e1 b8 00 00 	mfsr	r8,0x0

  if (opt == 0 ) // Null pointer.
80002560:	58 0c       	cp.w	r12,0
80002562:	c0 21       	brne	80002566 <pwm_init+0xa>
80002564:	5e ff       	retal	1
    return PWM_INVALID_INPUT;

  // Disable interrupt.
  if (global_interrupt_enabled) Disable_global_interrupt();
80002566:	e6 18 00 01 	andh	r8,0x1,COH
8000256a:	c0 91       	brne	8000257c <pwm_init+0x20>
8000256c:	d3 03       	ssrf	0x10
  pwm->idr = ((1 << (AVR32_PWM_LINES_MSB + 1)) - 1) << AVR32_PWM_IDR_CHID0_OFFSET;
8000256e:	fe 78 30 00 	mov	r8,-53248
80002572:	37 f9       	mov	r9,127
80002574:	91 59       	st.w	r8[0x14],r9
  pwm->isr;
80002576:	70 78       	ld.w	r8,r8[0x1c]
  if (global_interrupt_enabled) Enable_global_interrupt();
80002578:	d5 03       	csrf	0x10
8000257a:	c0 68       	rjmp	80002586 <pwm_init+0x2a>
  if (opt == 0 ) // Null pointer.
    return PWM_INVALID_INPUT;

  // Disable interrupt.
  if (global_interrupt_enabled) Disable_global_interrupt();
  pwm->idr = ((1 << (AVR32_PWM_LINES_MSB + 1)) - 1) << AVR32_PWM_IDR_CHID0_OFFSET;
8000257c:	fe 78 30 00 	mov	r8,-53248
80002580:	37 f9       	mov	r9,127
80002582:	91 59       	st.w	r8[0x14],r9
  pwm->isr;
80002584:	70 78       	ld.w	r8,r8[0x1c]
  if (global_interrupt_enabled) Enable_global_interrupt();

  // Set PWM mode register.
  pwm->mr =
    ((opt->diva)<<AVR32_PWM_DIVA_OFFSET) |
80002586:	78 08       	ld.w	r8,r12[0x0]
80002588:	78 39       	ld.w	r9,r12[0xc]
8000258a:	a9 69       	lsl	r9,0x8
8000258c:	f3 e8 11 09 	or	r9,r9,r8<<0x10
80002590:	78 18       	ld.w	r8,r12[0x4]
80002592:	10 49       	or	r9,r8
80002594:	78 28       	ld.w	r8,r12[0x8]
80002596:	f3 e8 11 89 	or	r9,r9,r8<<0x18
  pwm->idr = ((1 << (AVR32_PWM_LINES_MSB + 1)) - 1) << AVR32_PWM_IDR_CHID0_OFFSET;
  pwm->isr;
  if (global_interrupt_enabled) Enable_global_interrupt();

  // Set PWM mode register.
  pwm->mr =
8000259a:	fe 78 30 00 	mov	r8,-53248
8000259e:	91 09       	st.w	r8[0x0],r9
800025a0:	5e fd       	retal	0
800025a2:	d7 03       	nop

800025a4 <display_init>:
 */ 

#include "common.h"

void display_init(U32 fcpu_hz)
{
800025a4:	eb cd 40 c0 	pushm	r6-r7,lr
800025a8:	20 4d       	sub	sp,16
800025aa:	18 96       	mov	r6,r12
		.spck_delay   = 0,
		.trans_delay  = 0,
		.stay_act     = 1,
		.spi_mode     = 0,
		.modfdis      = 1
	};
800025ac:	49 78       	lddpc	r8,80002608 <display_init+0x64>
800025ae:	1a 97       	mov	r7,sp
800025b0:	f0 ea 00 00 	ld.d	r10,r8[0]
800025b4:	fa eb 00 00 	st.d	sp[0],r10
800025b8:	f0 e8 00 08 	ld.d	r8,r8[8]
800025bc:	fa e9 00 08 	st.d	sp[8],r8

	// Assign I/Os to SPI
	gpio_enable_module(DIP204_SPI_GPIO_MAP,
800025c0:	30 4b       	mov	r11,4
800025c2:	49 3c       	lddpc	r12,8000260c <display_init+0x68>
800025c4:	f0 1f 00 13 	mcall	80002610 <display_init+0x6c>
	sizeof(DIP204_SPI_GPIO_MAP) / sizeof(DIP204_SPI_GPIO_MAP[0]));

	// Initialize as master
	spi_initMaster(DIP204_SPI, &spiOptions);
800025c8:	1a 9b       	mov	r11,sp
800025ca:	fe 7c 28 00 	mov	r12,-55296
800025ce:	f0 1f 00 12 	mcall	80002614 <display_init+0x70>

	// Set selection mode: variable_ps, pcs_decode, delay
	spi_selectionMode(DIP204_SPI, 0, 0, 0);
800025d2:	30 09       	mov	r9,0
800025d4:	12 9a       	mov	r10,r9
800025d6:	12 9b       	mov	r11,r9
800025d8:	fe 7c 28 00 	mov	r12,-55296
800025dc:	f0 1f 00 0f 	mcall	80002618 <display_init+0x74>

	// Enable SPI
	spi_enable(DIP204_SPI);
800025e0:	fe 7c 28 00 	mov	r12,-55296
800025e4:	f0 1f 00 0e 	mcall	8000261c <display_init+0x78>

	// setup chip registers
	spi_setupChipReg(DIP204_SPI, &spiOptions, fcpu_hz);
800025e8:	0c 9a       	mov	r10,r6
800025ea:	1a 9b       	mov	r11,sp
800025ec:	fe 7c 28 00 	mov	r12,-55296
800025f0:	f0 1f 00 0c 	mcall	80002620 <display_init+0x7c>

	// initialize LCD
	dip204_init(backlight_PWM, true);
800025f4:	30 1b       	mov	r11,1
800025f6:	16 9c       	mov	r12,r11
800025f8:	f0 1f 00 0b 	mcall	80002624 <display_init+0x80>

	dip204_hide_cursor();
800025fc:	f0 1f 00 0b 	mcall	80002628 <display_init+0x84>
}
80002600:	2f cd       	sub	sp,-16
80002602:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002606:	00 00       	add	r0,r0
80002608:	80 00       	ld.sh	r0,r0[0x0]
8000260a:	a8 18       	st.h	r4[0x2],r8
8000260c:	80 00       	ld.sh	r0,r0[0x0]
8000260e:	a8 28       	st.h	r4[0x4],r8
80002610:	80 00       	ld.sh	r0,r0[0x0]
80002612:	32 80       	mov	r0,40
80002614:	80 00       	ld.sh	r0,r0[0x0]
80002616:	2e e0       	sub	r0,-18
80002618:	80 00       	ld.sh	r0,r0[0x0]
8000261a:	2f 18       	sub	r8,-15
8000261c:	80 00       	ld.sh	r0,r0[0x0]
8000261e:	2f 44       	sub	r4,-12
80002620:	80 00       	ld.sh	r0,r0[0x0]
80002622:	2f 88       	sub	r8,-8
80002624:	80 00       	ld.sh	r0,r0[0x0]
80002626:	22 f4       	sub	r4,47
80002628:	80 00       	ld.sh	r0,r0[0x0]
8000262a:	22 c4       	sub	r4,44

8000262c <I2C_Init>:
bool write8(uint8_t reg_addr, uint8_t data) {
	uint8_t dev_addr = RGB_SENSOR;
	return I2C_writeRegister(dev_addr, reg_addr, data);
}

void I2C_Init() {
8000262c:	d4 01       	pushm	lr
	int status;
	
	// TWI gpio pins configuration
	gpio_enable_module(TWI_GPIO_MAP, sizeof(TWI_GPIO_MAP) / sizeof(TWI_GPIO_MAP[0]));
8000262e:	30 2b       	mov	r11,2
80002630:	49 0c       	lddpc	r12,80002670 <I2C_Init+0x44>
80002632:	f0 1f 00 11 	mcall	80002674 <I2C_Init+0x48>


	// options settings
	opt.pba_hz = FOSC0;
80002636:	49 1b       	lddpc	r11,80002678 <I2C_Init+0x4c>
80002638:	e0 68 1b 00 	mov	r8,6912
8000263c:	ea 18 00 b7 	orh	r8,0xb7
80002640:	97 08       	st.w	r11[0x0],r8
	opt.speed = TWI_SPEED;
80002642:	e0 68 c3 50 	mov	r8,50000
80002646:	97 18       	st.w	r11[0x4],r8
	opt.chip = GESTURE_ADDR;
80002648:	33 98       	mov	r8,57
8000264a:	f7 68 00 08 	st.b	r11[8],r8
	status = twi_master_init(&AVR32_TWI, &opt);
8000264e:	fe 7c 2c 00 	mov	r12,-54272
80002652:	f0 1f 00 0b 	mcall	8000267c <I2C_Init+0x50>

	if (status == TWI_SUCCESS)
80002656:	c0 51       	brne	80002660 <I2C_Init+0x34>
	{
		// display test result to user
		dip204_printf_string("TWI OK\r\n");
80002658:	48 ac       	lddpc	r12,80002680 <I2C_Init+0x54>
8000265a:	f0 1f 00 0b 	mcall	80002684 <I2C_Init+0x58>
8000265e:	c0 48       	rjmp	80002666 <I2C_Init+0x3a>
	}
	else
	{
		dip204_printf_string("TWI ERROR\r\n");
80002660:	48 ac       	lddpc	r12,80002688 <I2C_Init+0x5c>
80002662:	f0 1f 00 09 	mcall	80002684 <I2C_Init+0x58>
	}
	
	I2CMutex = xSemaphoreCreateMutex();
80002666:	f0 1f 00 0a 	mcall	8000268c <I2C_Init+0x60>
8000266a:	48 a8       	lddpc	r8,80002690 <I2C_Init+0x64>
8000266c:	91 0c       	st.w	r8[0x0],r12
8000266e:	d8 02       	popm	pc
80002670:	80 00       	ld.sh	r0,r0[0x0]
80002672:	a8 60       	st.h	r4[0xc],r0
80002674:	80 00       	ld.sh	r0,r0[0x0]
80002676:	32 80       	mov	r0,40
80002678:	00 00       	add	r0,r0
8000267a:	08 20       	rsub	r0,r4
8000267c:	80 00       	ld.sh	r0,r0[0x0]
8000267e:	2e 2c       	sub	r12,-30
80002680:	80 00       	ld.sh	r0,r0[0x0]
80002682:	a8 48       	st.h	r4[0x8],r8
80002684:	80 00       	ld.sh	r0,r0[0x0]
80002686:	21 d0       	sub	r0,29
80002688:	80 00       	ld.sh	r0,r0[0x0]
8000268a:	a8 54       	st.h	r4[0xa],r4
8000268c:	80 00       	ld.sh	r0,r0[0x0]
8000268e:	3f 24       	mov	r4,-14
80002690:	00 00       	add	r0,r0
80002692:	05 8c       	ld.ub	r12,r2[0x0]

80002694 <I2C_writeRegister>:
	uint8_t dev_addr = RGB_SENSOR;
	return I2C_readRegister(dev_addr, reg_addr, (uint8_t*)data, 2);
}


bool I2C_writeRegister(uint8_t dev_addr, uint8_t reg_addr, uint8_t data) {
80002694:	eb cd 40 c0 	pushm	r6-r7,lr
80002698:	20 5d       	sub	sp,20
8000269a:	ba 8a       	st.b	sp[0x0],r10
	int status;
	twi_package_t packet;
	
	packet.chip = dev_addr;
8000269c:	ba cc       	st.b	sp[0x4],r12
	packet.addr_length = 1;
8000269e:	30 18       	mov	r8,1
800026a0:	50 28       	stdsp	sp[0x8],r8
	packet.length = 1;
800026a2:	50 48       	stdsp	sp[0x10],r8
	packet.addr[0] = reg_addr;
800026a4:	ba db       	st.b	sp[0x5],r11
	packet.buffer = &data;
800026a6:	50 3d       	stdsp	sp[0xc],sp

	xSemaphoreTake(I2CMutex, portMAX_DELAY);
800026a8:	48 d7       	lddpc	r7,800026dc <I2C_writeRegister+0x48>
800026aa:	30 09       	mov	r9,0
800026ac:	3f fa       	mov	r10,-1
800026ae:	12 9b       	mov	r11,r9
800026b0:	6e 0c       	ld.w	r12,r7[0x0]
800026b2:	f0 1f 00 0c 	mcall	800026e0 <I2C_writeRegister+0x4c>
	
	// perform a read access
	status = twi_master_write(&AVR32_TWI, &packet);
800026b6:	fa cb ff fc 	sub	r11,sp,-4
800026ba:	fe 7c 2c 00 	mov	r12,-54272
800026be:	f0 1f 00 0a 	mcall	800026e4 <I2C_writeRegister+0x50>
800026c2:	18 96       	mov	r6,r12
	
	xSemaphoreGive(I2CMutex);
800026c4:	30 09       	mov	r9,0
800026c6:	12 9a       	mov	r10,r9
800026c8:	12 9b       	mov	r11,r9
800026ca:	6e 0c       	ld.w	r12,r7[0x0]
800026cc:	f0 1f 00 07 	mcall	800026e8 <I2C_writeRegister+0x54>
800026d0:	58 06       	cp.w	r6,0
	if (status == TWI_SUCCESS) {
		return true;
		} else {
		return false;
	}
}
800026d2:	5f 0c       	sreq	r12
800026d4:	2f bd       	sub	sp,-20
800026d6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800026da:	00 00       	add	r0,r0
800026dc:	00 00       	add	r0,r0
800026de:	05 8c       	ld.ub	r12,r2[0x0]
800026e0:	80 00       	ld.sh	r0,r0[0x0]
800026e2:	3c 68       	mov	r8,-58
800026e4:	80 00       	ld.sh	r0,r0[0x0]
800026e6:	2c c4       	sub	r4,-52
800026e8:	80 00       	ld.sh	r0,r0[0x0]
800026ea:	3e 24       	mov	r4,-30

800026ec <write8>:

bool write8(uint8_t reg_addr, uint8_t data) {
800026ec:	d4 01       	pushm	lr
	uint8_t dev_addr = RGB_SENSOR;
	return I2C_writeRegister(dev_addr, reg_addr, data);
800026ee:	16 9a       	mov	r10,r11
800026f0:	18 9b       	mov	r11,r12
800026f2:	34 4c       	mov	r12,68
800026f4:	f0 1f 00 02 	mcall	800026fc <write8+0x10>
}
800026f8:	d8 02       	popm	pc
800026fa:	00 00       	add	r0,r0
800026fc:	80 00       	ld.sh	r0,r0[0x0]
800026fe:	26 94       	sub	r4,105

80002700 <I2C_readRegister>:
};
twi_options_t opt;

static xSemaphoreHandle I2CMutex;

bool I2C_readRegister(uint8_t dev_addr, uint8_t reg_addr, uint8_t* data, size_t len) {
80002700:	eb cd 40 c0 	pushm	r6-r7,lr
80002704:	20 4d       	sub	sp,16

	int status;
	twi_package_t packet;
	
	packet.chip = dev_addr;
80002706:	ba 8c       	st.b	sp[0x0],r12
	packet.addr_length = 1;
80002708:	30 18       	mov	r8,1
8000270a:	50 18       	stdsp	sp[0x4],r8
	packet.length = len;
8000270c:	50 39       	stdsp	sp[0xc],r9
	packet.addr[0] = reg_addr;
8000270e:	ba 9b       	st.b	sp[0x1],r11
	packet.buffer = data;
80002710:	50 2a       	stdsp	sp[0x8],r10

	xSemaphoreTake(I2CMutex, portMAX_DELAY);
80002712:	48 d7       	lddpc	r7,80002744 <I2C_readRegister+0x44>
80002714:	30 09       	mov	r9,0
80002716:	3f fa       	mov	r10,-1
80002718:	12 9b       	mov	r11,r9
8000271a:	6e 0c       	ld.w	r12,r7[0x0]
8000271c:	f0 1f 00 0b 	mcall	80002748 <I2C_readRegister+0x48>
	// perform a read access
	status = twi_master_read(&AVR32_TWI, &packet);
80002720:	1a 9b       	mov	r11,sp
80002722:	fe 7c 2c 00 	mov	r12,-54272
80002726:	f0 1f 00 0a 	mcall	8000274c <I2C_readRegister+0x4c>
8000272a:	18 96       	mov	r6,r12
	
	xSemaphoreGive(I2CMutex);
8000272c:	30 09       	mov	r9,0
8000272e:	12 9a       	mov	r10,r9
80002730:	12 9b       	mov	r11,r9
80002732:	6e 0c       	ld.w	r12,r7[0x0]
80002734:	f0 1f 00 07 	mcall	80002750 <I2C_readRegister+0x50>
80002738:	58 06       	cp.w	r6,0
	if (status == TWI_SUCCESS) {
		return true;
		} else {
		return false;
	}
}
8000273a:	5f 0c       	sreq	r12
8000273c:	2f cd       	sub	sp,-16
8000273e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002742:	00 00       	add	r0,r0
80002744:	00 00       	add	r0,r0
80002746:	05 8c       	ld.ub	r12,r2[0x0]
80002748:	80 00       	ld.sh	r0,r0[0x0]
8000274a:	3c 68       	mov	r8,-58
8000274c:	80 00       	ld.sh	r0,r0[0x0]
8000274e:	2d 74       	sub	r4,-41
80002750:	80 00       	ld.sh	r0,r0[0x0]
80002752:	3e 24       	mov	r4,-30

80002754 <read16>:
bool read8(uint8_t reg_addr, uint8_t* data) {
	uint8_t dev_addr = RGB_SENSOR;
	return I2C_readRegister(dev_addr, reg_addr, data, 1);
}

bool read16(uint8_t reg_addr, uint16_t* data) {
80002754:	d4 01       	pushm	lr
	uint8_t dev_addr = RGB_SENSOR;
	return I2C_readRegister(dev_addr, reg_addr, (uint8_t*)data, 2);
80002756:	30 29       	mov	r9,2
80002758:	16 9a       	mov	r10,r11
8000275a:	18 9b       	mov	r11,r12
8000275c:	34 4c       	mov	r12,68
8000275e:	f0 1f 00 02 	mcall	80002764 <read16+0x10>
}
80002762:	d8 02       	popm	pc
80002764:	80 00       	ld.sh	r0,r0[0x0]
80002766:	27 00       	sub	r0,112

80002768 <read8>:
		} else {
		return false;
	}
}

bool read8(uint8_t reg_addr, uint8_t* data) {
80002768:	d4 01       	pushm	lr
	uint8_t dev_addr = RGB_SENSOR;
	return I2C_readRegister(dev_addr, reg_addr, data, 1);
8000276a:	30 19       	mov	r9,1
8000276c:	16 9a       	mov	r10,r11
8000276e:	18 9b       	mov	r11,r12
80002770:	34 4c       	mov	r12,68
80002772:	f0 1f 00 02 	mcall	80002778 <read8+0x10>
}
80002776:	d8 02       	popm	pc
80002778:	80 00       	ld.sh	r0,r0[0x0]
8000277a:	27 00       	sub	r0,112

8000277c <read_red>:

void read_blue(uint16_t *data) {
	read16(BLUE_L, data);
}

void read_red(uint16_t *data) {
8000277c:	d4 01       	pushm	lr
	read16(RED_L, data);
8000277e:	18 9b       	mov	r11,r12
80002780:	30 bc       	mov	r12,11
80002782:	f0 1f 00 02 	mcall	80002788 <read_red+0xc>
}
80002786:	d8 02       	popm	pc
80002788:	80 00       	ld.sh	r0,r0[0x0]
8000278a:	27 54       	sub	r4,117

8000278c <read_blue>:

void read_green(uint16_t *data) {
	read16(GREEN_L, data);
}

void read_blue(uint16_t *data) {
8000278c:	d4 01       	pushm	lr
	read16(BLUE_L, data);
8000278e:	18 9b       	mov	r11,r12
80002790:	30 dc       	mov	r12,13
80002792:	f0 1f 00 02 	mcall	80002798 <read_blue+0xc>
}
80002796:	d8 02       	popm	pc
80002798:	80 00       	ld.sh	r0,r0[0x0]
8000279a:	27 54       	sub	r4,117

8000279c <read_green>:
	if (!rgb_reset()) return false;
	if (!rgb_config(CFG1_MODE_RGB | CFG1_10KLUX, CFG2_IR_ADJUST_HIGH, CFG_DEFAULT)) return false;
	return true;
}

void read_green(uint16_t *data) {
8000279c:	d4 01       	pushm	lr
	read16(GREEN_L, data);
8000279e:	18 9b       	mov	r11,r12
800027a0:	30 9c       	mov	r12,9
800027a2:	f0 1f 00 02 	mcall	800027a8 <read_green+0xc>
}
800027a6:	d8 02       	popm	pc
800027a8:	80 00       	ld.sh	r0,r0[0x0]
800027aa:	27 54       	sub	r4,117

800027ac <get_rgb>:

void read_red(uint16_t *data) {
	read16(RED_L, data);
}

void get_rgb(RGBPoint *data) {
800027ac:	eb cd 40 80 	pushm	r7,lr
800027b0:	20 2d       	sub	sp,8
800027b2:	18 97       	mov	r7,r12
	uint16_t r, g, b;
	read_red(&r);
800027b4:	fa cc ff fa 	sub	r12,sp,-6
800027b8:	f0 1f 00 0a 	mcall	800027e0 <get_rgb+0x34>
	read_blue(&b);
800027bc:	fa cc ff fe 	sub	r12,sp,-2
800027c0:	f0 1f 00 09 	mcall	800027e4 <get_rgb+0x38>
	read_green(&g);
800027c4:	fa cc ff fc 	sub	r12,sp,-4
800027c8:	f0 1f 00 08 	mcall	800027e8 <get_rgb+0x3c>
	data->r = r;
800027cc:	9a 38       	ld.sh	r8,sp[0x6]
800027ce:	ae 08       	st.h	r7[0x0],r8
	data->g = g;
800027d0:	9a 28       	ld.sh	r8,sp[0x4]
800027d2:	ae 18       	st.h	r7[0x2],r8
	data->b = b;
800027d4:	9a 18       	ld.sh	r8,sp[0x2]
800027d6:	ae 28       	st.h	r7[0x4],r8
800027d8:	2f ed       	sub	sp,-8
800027da:	e3 cd 80 80 	ldm	sp++,r7,pc
800027de:	00 00       	add	r0,r0
800027e0:	80 00       	ld.sh	r0,r0[0x0]
800027e2:	27 7c       	sub	r12,119
800027e4:	80 00       	ld.sh	r0,r0[0x0]
800027e6:	27 8c       	sub	r12,120
800027e8:	80 00       	ld.sh	r0,r0[0x0]
800027ea:	27 9c       	sub	r12,121

800027ec <rgb_config>:
		return false;
	}
	return true;
}

bool rgb_config(uint8_t config1, uint8_t config2, uint8_t config3) {
800027ec:	d4 21       	pushm	r4-r7,lr
800027ee:	20 1d       	sub	sp,4
800027f0:	18 96       	mov	r6,r12
800027f2:	16 95       	mov	r5,r11
800027f4:	14 94       	mov	r4,r10
	uint8_t data = 0x00;
800027f6:	fa c7 ff fc 	sub	r7,sp,-4
800027fa:	30 08       	mov	r8,0
800027fc:	0e f8       	st.b	--r7,r8
	  
	// Set 1st configuration register
	write8(CONFIG_1, config1);
800027fe:	18 9b       	mov	r11,r12
80002800:	30 1c       	mov	r12,1
80002802:	f0 1f 00 15 	mcall	80002854 <rgb_config+0x68>
	// Set 2nd configuration register
	write8(CONFIG_2, config2);
80002806:	0a 9b       	mov	r11,r5
80002808:	30 2c       	mov	r12,2
8000280a:	f0 1f 00 13 	mcall	80002854 <rgb_config+0x68>
	// Set 3rd configuration register
	write8(CONFIG_3, config3);
8000280e:	08 9b       	mov	r11,r4
80002810:	30 3c       	mov	r12,3
80002812:	f0 1f 00 11 	mcall	80002854 <rgb_config+0x68>
	
	read8(CONFIG_1, &data);
80002816:	0e 9b       	mov	r11,r7
80002818:	30 1c       	mov	r12,1
8000281a:	f0 1f 00 10 	mcall	80002858 <rgb_config+0x6c>
	
	if (data != config1)
8000281e:	1b b8       	ld.ub	r8,sp[0x3]
80002820:	ec 08 18 00 	cp.b	r8,r6
80002824:	c1 41       	brne	8000284c <rgb_config+0x60>
	{
		return false;
	}
	read8(CONFIG_2, &data);
80002826:	fa cb ff fd 	sub	r11,sp,-3
8000282a:	30 2c       	mov	r12,2
8000282c:	f0 1f 00 0b 	mcall	80002858 <rgb_config+0x6c>
	if (data != config2)
80002830:	1b b8       	ld.ub	r8,sp[0x3]
80002832:	ea 08 18 00 	cp.b	r8,r5
80002836:	c0 b1       	brne	8000284c <rgb_config+0x60>
	{
		return false;
	}
	read8(CONFIG_3, &data);
80002838:	fa cb ff fd 	sub	r11,sp,-3
8000283c:	30 3c       	mov	r12,3
8000283e:	f0 1f 00 07 	mcall	80002858 <rgb_config+0x6c>
		return false;
	}
	return true;
}

bool rgb_config(uint8_t config1, uint8_t config2, uint8_t config3) {
80002842:	1b b8       	ld.ub	r8,sp[0x3]
80002844:	e8 08 18 00 	cp.b	r8,r4
80002848:	5f 0c       	sreq	r12
8000284a:	c0 28       	rjmp	8000284e <rgb_config+0x62>
8000284c:	30 0c       	mov	r12,0
	if (data != config3)
	{
		return false;
	}
	return true;
}
8000284e:	2f fd       	sub	sp,-4
80002850:	d8 22       	popm	r4-r7,pc
80002852:	00 00       	add	r0,r0
80002854:	80 00       	ld.sh	r0,r0[0x0]
80002856:	26 ec       	sub	r12,110
80002858:	80 00       	ld.sh	r0,r0[0x0]
8000285a:	27 68       	sub	r8,118

8000285c <rgb_reset>:
 * Created: 11/05/2018 12:36:18
 *  Author: practiques
 */ 
#include "rgbsensor.h"

bool rgb_reset() {
8000285c:	eb cd 40 c0 	pushm	r6-r7,lr
80002860:	20 1d       	sub	sp,4
	// Reset all registers
	uint8_t data = 0x00;
80002862:	30 07       	mov	r7,0
80002864:	ba b7       	st.b	sp[0x3],r7
	uint8_t data_tmp = 0;
80002866:	ba a7       	st.b	sp[0x2],r7
	// Reset registers
	write8(DEVICE_ID, 0x46);
80002868:	34 6b       	mov	r11,70
8000286a:	30 0c       	mov	r12,0
8000286c:	f0 1f 00 15 	mcall	800028c0 <rgb_reset+0x64>
	// Check reset
	read8(CONFIG_1, &data);
80002870:	fa cb ff fd 	sub	r11,sp,-3
80002874:	30 1c       	mov	r12,1
80002876:	f0 1f 00 14 	mcall	800028c4 <rgb_reset+0x68>
	read8(CONFIG_2, &data_tmp);
8000287a:	fa c6 ff fe 	sub	r6,sp,-2
8000287e:	0c 9b       	mov	r11,r6
80002880:	30 2c       	mov	r12,2
80002882:	f0 1f 00 11 	mcall	800028c4 <rgb_reset+0x68>
	data |= data_tmp;
80002886:	1b b8       	ld.ub	r8,sp[0x3]
80002888:	1b a9       	ld.ub	r9,sp[0x2]
8000288a:	f3 e8 10 08 	or	r8,r9,r8
8000288e:	ba b8       	st.b	sp[0x3],r8
	read8(CONFIG_3, &data_tmp);
80002890:	0c 9b       	mov	r11,r6
80002892:	30 3c       	mov	r12,3
80002894:	f0 1f 00 0c 	mcall	800028c4 <rgb_reset+0x68>
	data |= data_tmp;
80002898:	1b b8       	ld.ub	r8,sp[0x3]
8000289a:	1b a9       	ld.ub	r9,sp[0x2]
8000289c:	f3 e8 10 08 	or	r8,r9,r8
800028a0:	ba b8       	st.b	sp[0x3],r8
	read8(STATUS, &data_tmp);
800028a2:	0c 9b       	mov	r11,r6
800028a4:	30 8c       	mov	r12,8
800028a6:	f0 1f 00 08 	mcall	800028c4 <rgb_reset+0x68>
800028aa:	1b b8       	ld.ub	r8,sp[0x3]
800028ac:	1b a9       	ld.ub	r9,sp[0x2]
800028ae:	f3 e8 10 08 	or	r8,r9,r8
800028b2:	ee 08 18 00 	cp.b	r8,r7
	if (data != 0x00)
	{
		return false;
	}
	return true;
}
800028b6:	5f 0c       	sreq	r12
800028b8:	2f fd       	sub	sp,-4
800028ba:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800028be:	00 00       	add	r0,r0
800028c0:	80 00       	ld.sh	r0,r0[0x0]
800028c2:	26 ec       	sub	r12,110
800028c4:	80 00       	ld.sh	r0,r0[0x0]
800028c6:	27 68       	sub	r8,118

800028c8 <rgb_init>:
	}
	return true;
}


bool rgb_init() {
800028c8:	d4 01       	pushm	lr
800028ca:	20 1d       	sub	sp,4
	uint8_t data = 0;
800028cc:	fa cb ff fc 	sub	r11,sp,-4
800028d0:	30 08       	mov	r8,0
800028d2:	16 f8       	st.b	--r11,r8
	read8(DEVICE_ID, &data);
800028d4:	30 0c       	mov	r12,0
800028d6:	f0 1f 00 0a 	mcall	800028fc <rgb_init+0x34>
	if (data != 0x7D) return false;
800028da:	37 d8       	mov	r8,125
800028dc:	1b b9       	ld.ub	r9,sp[0x3]
800028de:	f0 09 18 00 	cp.b	r9,r8
800028e2:	c0 a1       	brne	800028f6 <rgb_init+0x2e>
	if (!rgb_reset()) return false;
800028e4:	f0 1f 00 07 	mcall	80002900 <rgb_init+0x38>
800028e8:	c0 70       	breq	800028f6 <rgb_init+0x2e>
	if (!rgb_config(CFG1_MODE_RGB | CFG1_10KLUX, CFG2_IR_ADJUST_HIGH, CFG_DEFAULT)) return false;
800028ea:	30 0a       	mov	r10,0
800028ec:	33 fb       	mov	r11,63
800028ee:	30 dc       	mov	r12,13
800028f0:	f0 1f 00 05 	mcall	80002904 <rgb_init+0x3c>
800028f4:	c0 28       	rjmp	800028f8 <rgb_init+0x30>
800028f6:	30 0c       	mov	r12,0
	return true;
}
800028f8:	2f fd       	sub	sp,-4
800028fa:	d8 02       	popm	pc
800028fc:	80 00       	ld.sh	r0,r0[0x0]
800028fe:	27 68       	sub	r8,118
80002900:	80 00       	ld.sh	r0,r0[0x0]
80002902:	28 5c       	sub	r12,-123
80002904:	80 00       	ld.sh	r0,r0[0x0]
80002906:	27 ec       	sub	r12,126

80002908 <launch_all_nukes>:
#include "common.h"
#include "tasks/sensortask.h"
#include "tasks/ledtask.h"
#include "tasks/processingtask.h"

void launch_all_nukes() {
80002908:	eb cd 40 80 	pushm	r7,lr
		xTaskCreate(
8000290c:	30 07       	mov	r7,0
8000290e:	1a d7       	st.w	--sp,r7
80002910:	1a d7       	st.w	--sp,r7
80002912:	1a d7       	st.w	--sp,r7
80002914:	30 28       	mov	r8,2
80002916:	0e 99       	mov	r9,r7
80002918:	e0 6a 05 00 	mov	r10,1280
8000291c:	48 fb       	lddpc	r11,80002958 <launch_all_nukes+0x50>
8000291e:	49 0c       	lddpc	r12,8000295c <launch_all_nukes+0x54>
80002920:	f0 1f 00 10 	mcall	80002960 <launch_all_nukes+0x58>
		,NULL
		,2
		,NULL
		);

		xTaskCreate(
80002924:	1a d7       	st.w	--sp,r7
80002926:	1a d7       	st.w	--sp,r7
80002928:	1a d7       	st.w	--sp,r7
8000292a:	30 28       	mov	r8,2
8000292c:	0e 99       	mov	r9,r7
8000292e:	e0 6a 05 00 	mov	r10,1280
80002932:	48 db       	lddpc	r11,80002964 <launch_all_nukes+0x5c>
80002934:	48 dc       	lddpc	r12,80002968 <launch_all_nukes+0x60>
80002936:	f0 1f 00 0b 	mcall	80002960 <launch_all_nukes+0x58>
		,NULL
		,2
		,NULL
		);

		xTaskCreate(
8000293a:	1a d7       	st.w	--sp,r7
8000293c:	1a d7       	st.w	--sp,r7
8000293e:	1a d7       	st.w	--sp,r7
80002940:	30 28       	mov	r8,2
80002942:	0e 99       	mov	r9,r7
80002944:	e0 6a 01 00 	mov	r10,256
80002948:	48 9b       	lddpc	r11,8000296c <launch_all_nukes+0x64>
8000294a:	48 ac       	lddpc	r12,80002970 <launch_all_nukes+0x68>
8000294c:	f0 1f 00 05 	mcall	80002960 <launch_all_nukes+0x58>
80002950:	2f 7d       	sub	sp,-36
		,configMINIMAL_STACK_SIZE
		,NULL
		,2
		,NULL
		);
}
80002952:	e3 cd 80 80 	ldm	sp++,r7,pc
80002956:	00 00       	add	r0,r0
80002958:	80 00       	ld.sh	r0,r0[0x0]
8000295a:	a8 70       	st.h	r4[0xe],r0
8000295c:	80 00       	ld.sh	r0,r0[0x0]
8000295e:	2b 48       	sub	r8,-76
80002960:	80 00       	ld.sh	r0,r0[0x0]
80002962:	46 54       	lddsp	r4,sp[0x194]
80002964:	80 00       	ld.sh	r0,r0[0x0]
80002966:	a8 80       	st.b	r4[0x0],r0
80002968:	80 00       	ld.sh	r0,r0[0x0]
8000296a:	2a c0       	sub	r0,-84
8000296c:	80 00       	ld.sh	r0,r0[0x0]
8000296e:	a8 94       	st.b	r4[0x1],r4
80002970:	80 00       	ld.sh	r0,r0[0x0]
80002972:	29 c8       	sub	r8,-100

80002974 <main>:

int main( void )
{
80002974:	d4 01       	pushm	lr
          .osc0_f       = FOSC0,
          .osc0_startup = OSC0_STARTUP
        };

        // Configure system clock
        if (pcl_configure_clocks(&pcl_freq_param) != PASS)
80002976:	48 dc       	lddpc	r12,800029a8 <main+0x34>
80002978:	f0 1f 00 0d 	mcall	800029ac <main+0x38>
8000297c:	c0 30       	breq	80002982 <main+0xe>
8000297e:	32 ac       	mov	r12,42
80002980:	d8 02       	popm	pc
          return 42;


	sensor_data = xQueueCreate(8, sizeof(RGBPoint));
80002982:	30 6b       	mov	r11,6
80002984:	30 8c       	mov	r12,8
80002986:	f0 1f 00 0b 	mcall	800029b0 <main+0x3c>
8000298a:	48 b8       	lddpc	r8,800029b4 <main+0x40>
8000298c:	91 0c       	st.w	r8[0x0],r12
	processed_data = xQueueCreate(8, sizeof(processed_data_t));
8000298e:	30 cb       	mov	r11,12
80002990:	30 8c       	mov	r12,8
80002992:	f0 1f 00 08 	mcall	800029b0 <main+0x3c>
80002996:	48 98       	lddpc	r8,800029b8 <main+0x44>
80002998:	91 0c       	st.w	r8[0x0],r12

	/* Setup the LED's for output. */
	vParTestInitialise();
8000299a:	f0 1f 00 09 	mcall	800029bc <main+0x48>
	//vStartLEDFlashTasks( mainLED_TASK_PRIORITY );

	/* 2) Start the ethernet tasks launcher. */
	//vStartEthernetTaskLauncher( configMAX_PRIORITIES );

	launch_all_nukes();
8000299e:	f0 1f 00 09 	mcall	800029c0 <main+0x4c>

	/* 3) Start FreeRTOS. */
	vTaskStartScheduler();
800029a2:	f0 1f 00 09 	mcall	800029c4 <main+0x50>
800029a6:	d8 0a       	popm	pc,r12=0
800029a8:	00 00       	add	r0,r0
800029aa:	00 20       	rsub	r0,r0
800029ac:	80 00       	ld.sh	r0,r0[0x0]
800029ae:	37 1c       	mov	r12,113
800029b0:	80 00       	ld.sh	r0,r0[0x0]
800029b2:	3f 7c       	mov	r12,-9
800029b4:	00 00       	add	r0,r0
800029b6:	08 18       	sub	r8,r4
800029b8:	00 00       	add	r0,r0
800029ba:	08 1c       	sub	r12,r4
800029bc:	80 00       	ld.sh	r0,r0[0x0]
800029be:	37 b8       	mov	r8,123
800029c0:	80 00       	ld.sh	r0,r0[0x0]
800029c2:	29 08       	sub	r8,-112
800029c4:	80 00       	ld.sh	r0,r0[0x0]
800029c6:	48 44       	lddpc	r4,800029d4 <myLEDtask+0xc>

800029c8 <myLEDtask>:
 */ 

#include "ledtask.h"

void myLEDtask(void* p)
{
800029c8:	d4 31       	pushm	r0-r7,lr
800029ca:	20 3d       	sub	sp,12
	processed_data_t pd;

	
	while(1) {
		xQueueReceive(processed_data, &pd, portMAX_DELAY);
800029cc:	4b 31       	lddpc	r1,80002a98 <myLEDtask+0xd0>
800029ce:	30 00       	mov	r0,0
		RGBPoint point = pd.point;
		dip204_set_cursor_position(1, 1);
800029d0:	30 17       	mov	r7,1
		dip204_printf_string("R: %03hu", point.r);
		dip204_set_cursor_position(1, 2);
800029d2:	30 23       	mov	r3,2
{
	processed_data_t pd;

	
	while(1) {
		xQueueReceive(processed_data, &pd, portMAX_DELAY);
800029d4:	00 99       	mov	r9,r0
800029d6:	3f fa       	mov	r10,-1
800029d8:	1a 9b       	mov	r11,sp
800029da:	62 0c       	ld.w	r12,r1[0x0]
800029dc:	f0 1f 00 30 	mcall	80002a9c <myLEDtask+0xd4>
		RGBPoint point = pd.point;
800029e0:	9a 24       	ld.sh	r4,sp[0x4]
800029e2:	9a 15       	ld.sh	r5,sp[0x2]
800029e4:	9a 06       	ld.sh	r6,sp[0x0]
		dip204_set_cursor_position(1, 1);
800029e6:	0e 9b       	mov	r11,r7
800029e8:	0e 9c       	mov	r12,r7
800029ea:	f0 1f 00 2e 	mcall	80002aa0 <myLEDtask+0xd8>
		dip204_printf_string("R: %03hu", point.r);
800029ee:	5c 76       	castu.h	r6
800029f0:	1a d6       	st.w	--sp,r6
800029f2:	4a dc       	lddpc	r12,80002aa4 <myLEDtask+0xdc>
800029f4:	f0 1f 00 2d 	mcall	80002aa8 <myLEDtask+0xe0>
		dip204_set_cursor_position(1, 2);
800029f8:	06 9b       	mov	r11,r3
800029fa:	0e 9c       	mov	r12,r7
800029fc:	f0 1f 00 29 	mcall	80002aa0 <myLEDtask+0xd8>
		dip204_printf_string("G: %03hu", point.g);
80002a00:	5c 75       	castu.h	r5
80002a02:	1a d5       	st.w	--sp,r5
80002a04:	4a ac       	lddpc	r12,80002aac <myLEDtask+0xe4>
80002a06:	f0 1f 00 29 	mcall	80002aa8 <myLEDtask+0xe0>
		dip204_set_cursor_position(1, 3);
80002a0a:	30 3b       	mov	r11,3
80002a0c:	0e 9c       	mov	r12,r7
80002a0e:	f0 1f 00 25 	mcall	80002aa0 <myLEDtask+0xd8>
		dip204_printf_string("B: %03hu", point.b);
80002a12:	5c 74       	castu.h	r4
80002a14:	1a d4       	st.w	--sp,r4
80002a16:	4a 7c       	lddpc	r12,80002ab0 <myLEDtask+0xe8>
80002a18:	f0 1f 00 24 	mcall	80002aa8 <myLEDtask+0xe0>
		
		float lux = pd.lux;
80002a1c:	40 56       	lddsp	r6,sp[0x14]
		LED_Off(LED0 | LED1 | LED2 | LED3 | LED5 | LED6 | LED7);
80002a1e:	e0 6c 00 ef 	mov	r12,239
80002a22:	f0 1f 00 25 	mcall	80002ab4 <myLEDtask+0xec>
		float chunk = 256 / 6;
		if (lux > chunk*6) {
80002a26:	2f dd       	sub	sp,-12
80002a28:	0c 9b       	mov	r11,r6
80002a2a:	fc 1c 43 7c 	movh	r12,0x437c
80002a2e:	f0 1f 00 23 	mcall	80002ab8 <myLEDtask+0xf0>
80002a32:	c0 50       	breq	80002a3c <myLEDtask+0x74>
			LED_On(LED7);
80002a34:	e0 6c 00 80 	mov	r12,128
80002a38:	f0 1f 00 21 	mcall	80002abc <myLEDtask+0xf4>
		}
		if (lux > chunk*5) {
80002a3c:	0c 9b       	mov	r11,r6
80002a3e:	fc 1c 43 52 	movh	r12,0x4352
80002a42:	f0 1f 00 1e 	mcall	80002ab8 <myLEDtask+0xf0>
80002a46:	c0 40       	breq	80002a4e <myLEDtask+0x86>
			LED_On(LED6);
80002a48:	34 0c       	mov	r12,64
80002a4a:	f0 1f 00 1d 	mcall	80002abc <myLEDtask+0xf4>
		}
		if (lux > chunk*4) {
80002a4e:	0c 9b       	mov	r11,r6
80002a50:	fc 1c 43 28 	movh	r12,0x4328
80002a54:	f0 1f 00 19 	mcall	80002ab8 <myLEDtask+0xf0>
80002a58:	c0 40       	breq	80002a60 <myLEDtask+0x98>
			LED_On(LED5);
80002a5a:	32 0c       	mov	r12,32
80002a5c:	f0 1f 00 18 	mcall	80002abc <myLEDtask+0xf4>
		}
		if (lux > chunk*3) {
80002a60:	0c 9b       	mov	r11,r6
80002a62:	fc 1c 42 fc 	movh	r12,0x42fc
80002a66:	f0 1f 00 15 	mcall	80002ab8 <myLEDtask+0xf0>
80002a6a:	c0 40       	breq	80002a72 <myLEDtask+0xaa>
			LED_On(LED3);
80002a6c:	30 8c       	mov	r12,8
80002a6e:	f0 1f 00 14 	mcall	80002abc <myLEDtask+0xf4>
		}
		if (lux > chunk*2) {
80002a72:	0c 9b       	mov	r11,r6
80002a74:	fc 1c 42 a8 	movh	r12,0x42a8
80002a78:	f0 1f 00 10 	mcall	80002ab8 <myLEDtask+0xf0>
80002a7c:	c0 40       	breq	80002a84 <myLEDtask+0xbc>
			LED_On(LED2);
80002a7e:	30 4c       	mov	r12,4
80002a80:	f0 1f 00 0f 	mcall	80002abc <myLEDtask+0xf4>
		}
		if (lux > chunk) {
80002a84:	0c 9b       	mov	r11,r6
80002a86:	fc 1c 42 28 	movh	r12,0x4228
80002a8a:	f0 1f 00 0c 	mcall	80002ab8 <myLEDtask+0xf0>
80002a8e:	ca 30       	breq	800029d4 <myLEDtask+0xc>
			LED_On(LED1);
80002a90:	06 9c       	mov	r12,r3
80002a92:	f0 1f 00 0b 	mcall	80002abc <myLEDtask+0xf4>
80002a96:	c9 fb       	rjmp	800029d4 <myLEDtask+0xc>
80002a98:	00 00       	add	r0,r0
80002a9a:	08 1c       	sub	r12,r4
80002a9c:	80 00       	ld.sh	r0,r0[0x0]
80002a9e:	3c 68       	mov	r8,-58
80002aa0:	80 00       	ld.sh	r0,r0[0x0]
80002aa2:	22 68       	sub	r8,38
80002aa4:	80 00       	ld.sh	r0,r0[0x0]
80002aa6:	a8 a0       	st.b	r4[0x2],r0
80002aa8:	80 00       	ld.sh	r0,r0[0x0]
80002aaa:	21 d0       	sub	r0,29
80002aac:	80 00       	ld.sh	r0,r0[0x0]
80002aae:	a8 ac       	st.b	r4[0x2],r12
80002ab0:	80 00       	ld.sh	r0,r0[0x0]
80002ab2:	a8 b8       	st.b	r4[0x3],r8
80002ab4:	80 00       	ld.sh	r0,r0[0x0]
80002ab6:	31 cc       	mov	r12,28
80002ab8:	80 00       	ld.sh	r0,r0[0x0]
80002aba:	48 90       	lddpc	r0,80002adc <my_processing_task+0x1c>
80002abc:	80 00       	ld.sh	r0,r0[0x0]
80002abe:	31 7c       	mov	r12,23

80002ac0 <my_processing_task>:
 */

#include "processingtask.h"

void my_processing_task(void* p)
{
80002ac0:	d4 31       	pushm	r0-r7,lr
80002ac2:	20 5d       	sub	sp,20
	RGBPoint point;
	
	while(1) {
		xQueueReceive(sensor_data, &point, portMAX_DELAY);
80002ac4:	fa c6 ff f2 	sub	r6,sp,-14
80002ac8:	49 a3       	lddpc	r3,80002b30 <my_processing_task+0x70>
80002aca:	30 07       	mov	r7,0
80002acc:	3f f5       	mov	r5,-1
		point.r = (point.r >> 8) & 0xff;
		point.g = (point.g >> 8) & 0xff;
		point.b = (point.b >> 8) & 0xff;
		float lux = (point.r + point.g + point.b) / 3;
		processed_data_t pd;
		pd.lux = lux;
80002ace:	e0 62 55 56 	mov	r2,21846
80002ad2:	ea 12 55 55 	orh	r2,0x5555
		pd.point = point;
80002ad6:	30 61       	mov	r1,6
		xQueueSend(processed_data, &pd, portMAX_DELAY);
80002ad8:	49 70       	lddpc	r0,80002b34 <my_processing_task+0x74>
void my_processing_task(void* p)
{
	RGBPoint point;
	
	while(1) {
		xQueueReceive(sensor_data, &point, portMAX_DELAY);
80002ada:	0e 99       	mov	r9,r7
80002adc:	0a 9a       	mov	r10,r5
80002ade:	0c 9b       	mov	r11,r6
80002ae0:	66 0c       	ld.w	r12,r3[0x0]
80002ae2:	f0 1f 00 16 	mcall	80002b38 <my_processing_task+0x78>
		
		point.r = (point.r >> 8) & 0xff;
80002ae6:	fb 3c 00 0e 	ld.ub	r12,sp[14]
80002aea:	5c 8c       	casts.h	r12
80002aec:	ba 7c       	st.h	sp[0xe],r12
		point.g = (point.g >> 8) & 0xff;
80002aee:	fb 39 00 10 	ld.ub	r9,sp[16]
80002af2:	5c 89       	casts.h	r9
80002af4:	fb 59 00 10 	st.h	sp[16],r9
		point.b = (point.b >> 8) & 0xff;
80002af8:	fb 38 00 12 	ld.ub	r8,sp[18]
80002afc:	5c 88       	casts.h	r8
80002afe:	fb 58 00 12 	st.h	sp[18],r8
		float lux = (point.r + point.g + point.b) / 3;
		processed_data_t pd;
		pd.lux = lux;
80002b02:	f8 09 00 09 	add	r9,r12,r9
80002b06:	f0 09 00 09 	add	r9,r8,r9
80002b0a:	f2 02 04 48 	muls.d	r8,r9,r2
80002b0e:	12 9c       	mov	r12,r9
80002b10:	f0 1f 00 0b 	mcall	80002b3c <my_processing_task+0x7c>
80002b14:	50 2c       	stdsp	sp[0x8],r12
		pd.point = point;
80002b16:	02 9a       	mov	r10,r1
80002b18:	0c 9b       	mov	r11,r6
80002b1a:	1a 9c       	mov	r12,sp
80002b1c:	f0 1f 00 09 	mcall	80002b40 <my_processing_task+0x80>
		xQueueSend(processed_data, &pd, portMAX_DELAY);
80002b20:	0e 99       	mov	r9,r7
80002b22:	0a 9a       	mov	r10,r5
80002b24:	1a 9b       	mov	r11,sp
80002b26:	60 0c       	ld.w	r12,r0[0x0]
80002b28:	f0 1f 00 07 	mcall	80002b44 <my_processing_task+0x84>
80002b2c:	cd 7b       	rjmp	80002ada <my_processing_task+0x1a>
80002b2e:	00 00       	add	r0,r0
80002b30:	00 00       	add	r0,r0
80002b32:	08 18       	sub	r8,r4
80002b34:	00 00       	add	r0,r0
80002b36:	08 1c       	sub	r12,r4
80002b38:	80 00       	ld.sh	r0,r0[0x0]
80002b3a:	3c 68       	mov	r8,-58
80002b3c:	80 00       	ld.sh	r0,r0[0x0]
80002b3e:	48 c4       	lddpc	r4,80002b6c <mysensortask+0x24>
80002b40:	80 00       	ld.sh	r0,r0[0x0]
80002b42:	4d c0       	lddpc	r0,80002cb0 <twi_mk_addr+0x1c>
80002b44:	80 00       	ld.sh	r0,r0[0x0]
80002b46:	3e 24       	mov	r4,-30

80002b48 <mysensortask>:

#include "sensortask.h"
#include "rgbsensor.h"

void mysensortask(void *p)
{
80002b48:	d4 31       	pushm	r0-r7,lr
80002b4a:	20 2d       	sub	sp,8
	uint8_t i = 0;
	uint8_t status;
	
	display_init(FOSC0*8);
80002b4c:	e0 6c d8 00 	mov	r12,55296
80002b50:	ea 1c 05 b8 	orh	r12,0x5b8
80002b54:	f0 1f 00 18 	mcall	80002bb4 <mysensortask+0x6c>
	//display_init(configCPU_CLOCK_HZ);
	
	
	I2C_Init();
80002b58:	f0 1f 00 18 	mcall	80002bb8 <mysensortask+0x70>
	if (!rgb_init()) {
80002b5c:	f0 1f 00 18 	mcall	80002bbc <mysensortask+0x74>
80002b60:	c0 51       	brne	80002b6a <mysensortask+0x22>
		dip204_printf_string("ERROR RGB INIT");
80002b62:	49 8c       	lddpc	r12,80002bc0 <mysensortask+0x78>
80002b64:	f0 1f 00 18 	mcall	80002bc4 <mysensortask+0x7c>
80002b68:	c0 08       	rjmp	80002b68 <mysensortask+0x20>
80002b6a:	30 07       	mov	r7,0
	
	
	while (1) {
		uint8_t data = i++;
		RGBPoint point;
		get_rgb(&point);
80002b6c:	fa c6 ff fe 	sub	r6,sp,-2
		
		if (i % 100000) xQueueSend(sensor_data, &point, portMAX_DELAY);
80002b70:	e0 65 b5 89 	mov	r5,46473
80002b74:	ea 15 14 f8 	orh	r5,0x14f8
80002b78:	e0 74 86 a0 	mov	r4,100000
80002b7c:	49 32       	lddpc	r2,80002bc8 <mysensortask+0x80>
80002b7e:	0e 91       	mov	r1,r7
80002b80:	3f f0       	mov	r0,-1
		vTaskDelay(mainLCDTEST_PERIOD);
80002b82:	36 43       	mov	r3,100
	}
	
	
	
	while (1) {
		uint8_t data = i++;
80002b84:	2f f7       	sub	r7,-1
80002b86:	5c 57       	castu.b	r7
		RGBPoint point;
		get_rgb(&point);
80002b88:	0c 9c       	mov	r12,r6
80002b8a:	f0 1f 00 11 	mcall	80002bcc <mysensortask+0x84>
		
		if (i % 100000) xQueueSend(sensor_data, &point, portMAX_DELAY);
80002b8e:	ee 05 04 48 	muls.d	r8,r7,r5
80002b92:	f2 08 14 0d 	asr	r8,r9,0xd
80002b96:	a9 38       	mul	r8,r4
80002b98:	ee 08 01 08 	sub	r8,r7,r8
80002b9c:	c0 70       	breq	80002baa <mysensortask+0x62>
80002b9e:	02 99       	mov	r9,r1
80002ba0:	00 9a       	mov	r10,r0
80002ba2:	0c 9b       	mov	r11,r6
80002ba4:	64 0c       	ld.w	r12,r2[0x0]
80002ba6:	f0 1f 00 0b 	mcall	80002bd0 <mysensortask+0x88>
		vTaskDelay(mainLCDTEST_PERIOD);
80002baa:	06 9c       	mov	r12,r3
80002bac:	f0 1f 00 0a 	mcall	80002bd4 <mysensortask+0x8c>
	}
80002bb0:	ce ab       	rjmp	80002b84 <mysensortask+0x3c>
80002bb2:	00 00       	add	r0,r0
80002bb4:	80 00       	ld.sh	r0,r0[0x0]
80002bb6:	25 a4       	sub	r4,90
80002bb8:	80 00       	ld.sh	r0,r0[0x0]
80002bba:	26 2c       	sub	r12,98
80002bbc:	80 00       	ld.sh	r0,r0[0x0]
80002bbe:	28 c8       	sub	r8,-116
80002bc0:	80 00       	ld.sh	r0,r0[0x0]
80002bc2:	a8 c4       	st.b	r4[0x4],r4
80002bc4:	80 00       	ld.sh	r0,r0[0x0]
80002bc6:	21 d0       	sub	r0,29
80002bc8:	00 00       	add	r0,r0
80002bca:	08 18       	sub	r8,r4
80002bcc:	80 00       	ld.sh	r0,r0[0x0]
80002bce:	27 ac       	sub	r12,122
80002bd0:	80 00       	ld.sh	r0,r0[0x0]
80002bd2:	3e 24       	mov	r4,-30
80002bd4:	80 00       	ld.sh	r0,r0[0x0]
80002bd6:	45 34       	lddsp	r4,sp[0x14c]

80002bd8 <twi_master_interrupt_handler>:
/*! \brief TWI interrupt handler.
 */
ISR(twi_master_interrupt_handler, CONF_TWI_IRQ_GROUP, CONF_TWI_IRQ_LEVEL)
{
	// get masked status register value
	int status = twi_inst->sr & twi_it_mask;
80002bd8:	4a 78       	lddpc	r8,80002c74 <twi_master_interrupt_handler+0x9c>
80002bda:	70 08       	ld.w	r8,r8[0x0]
80002bdc:	70 89       	ld.w	r9,r8[0x20]
80002bde:	4a 7a       	lddpc	r10,80002c78 <twi_master_interrupt_handler+0xa0>
80002be0:	74 0a       	ld.w	r10,r10[0x0]
80002be2:	f5 e9 00 09 	and	r9,r10,r9

	// this is a NACK
	if (status & AVR32_TWI_SR_NACK_MASK) {
80002be6:	12 9a       	mov	r10,r9
80002be8:	e2 1a 01 00 	andl	r10,0x100,COH
80002bec:	c3 91       	brne	80002c5e <twi_master_interrupt_handler+0x86>
		goto nack;
	}
	// this is a RXRDY
	else if (status & AVR32_TWI_SR_RXRDY_MASK) {
80002bee:	12 9a       	mov	r10,r9
80002bf0:	e2 1a 00 02 	andl	r10,0x2,COH
80002bf4:	c1 70       	breq	80002c22 <twi_master_interrupt_handler+0x4a>
		// get data from Receive Holding Register
		*twi_rx_data = twi_inst->rhr;
80002bf6:	4a 29       	lddpc	r9,80002c7c <twi_master_interrupt_handler+0xa4>
80002bf8:	72 0a       	ld.w	r10,r9[0x0]
80002bfa:	70 cb       	ld.w	r11,r8[0x30]
80002bfc:	b4 8b       	st.b	r10[0x0],r11
		twi_rx_data++;
80002bfe:	72 0a       	ld.w	r10,r9[0x0]
80002c00:	2f fa       	sub	r10,-1
80002c02:	93 0a       	st.w	r9[0x0],r10
		// last byte to receive
		if (--twi_rx_nb_bytes == 1) {
80002c04:	49 f9       	lddpc	r9,80002c80 <twi_master_interrupt_handler+0xa8>
80002c06:	72 0a       	ld.w	r10,r9[0x0]
80002c08:	20 1a       	sub	r10,1
80002c0a:	93 0a       	st.w	r9[0x0],r10
80002c0c:	72 09       	ld.w	r9,r9[0x0]
			// set stop bit
			twi_inst->cr = AVR32_TWI_STOP_MASK;
80002c0e:	58 19       	cp.w	r9,1
80002c10:	f9 b9 00 02 	moveq	r9,2
80002c14:	f1 f9 0a 00 	st.weq	r8[0x0],r9
		}
		// receive complete
		if (twi_rx_nb_bytes == 0) {
80002c18:	49 a9       	lddpc	r9,80002c80 <twi_master_interrupt_handler+0xa8>
80002c1a:	72 09       	ld.w	r9,r9[0x0]
80002c1c:	58 09       	cp.w	r9,0
80002c1e:	c2 30       	breq	80002c64 <twi_master_interrupt_handler+0x8c>
80002c20:	d6 03       	rete
			// finish the receive operation
			goto complete;
		}
	}
	// this is a TXRDY
	else if (status & AVR32_TWI_SR_TXRDY_MASK) {
80002c22:	12 9a       	mov	r10,r9
80002c24:	e2 1a 00 04 	andl	r10,0x4,COH
80002c28:	c1 70       	breq	80002c56 <twi_master_interrupt_handler+0x7e>
		// decrease transmitted bytes number
		twi_tx_nb_bytes--;
80002c2a:	49 79       	lddpc	r9,80002c84 <twi_master_interrupt_handler+0xac>
80002c2c:	72 0a       	ld.w	r10,r9[0x0]
80002c2e:	20 1a       	sub	r10,1
80002c30:	93 0a       	st.w	r9[0x0],r10
		// no more bytes to transmit
		if (twi_tx_nb_bytes <= 0) {
80002c32:	72 09       	ld.w	r9,r9[0x0]
80002c34:	58 09       	cp.w	r9,0
80002c36:	e0 89 00 0a 	brgt	80002c4a <twi_master_interrupt_handler+0x72>
			// enable TXCOMP IT and unmask all others IT
			twi_it_mask = AVR32_TWI_IER_TXCOMP_MASK;
80002c3a:	49 09       	lddpc	r9,80002c78 <twi_master_interrupt_handler+0xa0>
80002c3c:	30 1a       	mov	r10,1
80002c3e:	93 0a       	st.w	r9[0x0],r10
			twi_inst->idr = ~0UL;
80002c40:	3f fa       	mov	r10,-1
80002c42:	91 aa       	st.w	r8[0x28],r10
			twi_inst->ier = twi_it_mask;
80002c44:	72 09       	ld.w	r9,r9[0x0]
80002c46:	91 99       	st.w	r8[0x24],r9
80002c48:	d6 03       	rete
		} else {
			// put the byte in the Transmit Holding Register
			twi_inst->thr = *twi_tx_data++;
80002c4a:	49 0a       	lddpc	r10,80002c88 <twi_master_interrupt_handler+0xb0>
80002c4c:	74 09       	ld.w	r9,r10[0x0]
80002c4e:	13 3b       	ld.ub	r11,r9++
80002c50:	91 db       	st.w	r8[0x34],r11
80002c52:	95 09       	st.w	r10[0x0],r9
80002c54:	d6 03       	rete
		}
	}
	// this is a TXCOMP
	else if (status & AVR32_TWI_SR_TXCOMP_MASK) {
80002c56:	f3 d9 c0 01 	bfextu	r9,r9,0x0,0x1
80002c5a:	c0 51       	brne	80002c64 <twi_master_interrupt_handler+0x8c>
80002c5c:	d6 03       	rete
	}

	return;

nack:
	twi_nack = true;
80002c5e:	30 1a       	mov	r10,1
80002c60:	48 b9       	lddpc	r9,80002c8c <twi_master_interrupt_handler+0xb4>
80002c62:	b2 8a       	st.b	r9[0x0],r10

complete:
	// disable all interrupts
	twi_inst->idr = ~0UL;
80002c64:	3f f9       	mov	r9,-1
80002c66:	91 a9       	st.w	r8[0x28],r9
	twi_inst->sr;
80002c68:	70 88       	ld.w	r8,r8[0x20]
	twi_busy = false;
80002c6a:	30 09       	mov	r9,0
80002c6c:	48 98       	lddpc	r8,80002c90 <twi_master_interrupt_handler+0xb8>
80002c6e:	b0 89       	st.b	r8[0x0],r9
80002c70:	d6 03       	rete
80002c72:	00 00       	add	r0,r0
80002c74:	00 00       	add	r0,r0
80002c76:	05 9c       	ld.ub	r12,r2[0x1]
80002c78:	00 00       	add	r0,r0
80002c7a:	05 98       	ld.ub	r8,r2[0x1]
80002c7c:	00 00       	add	r0,r0
80002c7e:	05 a8       	ld.ub	r8,r2[0x2]
80002c80:	00 00       	add	r0,r0
80002c82:	05 a4       	ld.ub	r4,r2[0x2]
80002c84:	00 00       	add	r0,r0
80002c86:	05 94       	ld.ub	r4,r2[0x1]
80002c88:	00 00       	add	r0,r0
80002c8a:	05 a0       	ld.ub	r0,r2[0x2]
80002c8c:	00 00       	add	r0,r0
80002c8e:	05 91       	ld.ub	r1,r2[0x1]
80002c90:	00 00       	add	r0,r0
80002c92:	05 90       	ld.ub	r0,r2[0x1]

80002c94 <twi_mk_addr>:
 * which byte is the MSB to start with.
 *
 * Please see the device datasheet for details on this.
 */
static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
80002c94:	18 98       	mov	r8,r12
	uint32_t val;

	if (len == 0)
80002c96:	58 0b       	cp.w	r11,0
80002c98:	c0 21       	brne	80002c9c <twi_mk_addr+0x8>
80002c9a:	5e fd       	retal	0
		return 0;

	val = addr[0];
80002c9c:	19 8c       	ld.ub	r12,r12[0x0]
	if (len > 1) {
80002c9e:	58 1b       	cp.w	r11,1
80002ca0:	e0 8a 00 05 	brle	80002caa <twi_mk_addr+0x16>
		val <<= 8;
		val |= addr[1];
80002ca4:	11 99       	ld.ub	r9,r8[0x1]
80002ca6:	f3 ec 10 8c 	or	r12,r9,r12<<0x8
	}
	if (len > 2) {
80002caa:	58 2b       	cp.w	r11,2
80002cac:	5e ac       	retle	r12
		val <<= 8;
		val |= addr[2];
80002cae:	11 a8       	ld.ub	r8,r8[0x2]
80002cb0:	f1 ec 10 8c 	or	r12,r8,r12<<0x8
	}
	return val;
}
80002cb4:	5e fc       	retal	r12
80002cb6:	d7 03       	nop

80002cb8 <twi_is_busy>:
}


bool twi_is_busy(void)
{
	if (twi_busy) {
80002cb8:	48 28       	lddpc	r8,80002cc0 <twi_is_busy+0x8>
80002cba:	11 8c       	ld.ub	r12,r8[0x0]
		return true;          // Still receiving/transmitting...
	} else {
		return false;
	}
}
80002cbc:	5e fc       	retal	r12
80002cbe:	00 00       	add	r0,r0
80002cc0:	00 00       	add	r0,r0
80002cc2:	05 90       	ld.ub	r0,r2[0x1]

80002cc4 <twi_master_write>:
	return TWI_SUCCESS;
}


int twi_master_write(volatile avr32_twi_t *twi, const twi_package_t *package)
{
80002cc4:	eb cd 40 c0 	pushm	r6-r7,lr
80002cc8:	18 96       	mov	r6,r12
80002cca:	16 97       	mov	r7,r11
	// No data to send
	if (package->length == 0) {
80002ccc:	76 38       	ld.w	r8,r11[0xc]
80002cce:	58 08       	cp.w	r8,0
80002cd0:	c0 51       	brne	80002cda <twi_master_write+0x16>
80002cd2:	e3 cf c0 c0 	ldm	sp++,r6-r7,pc,r12=-1
		return TWI_INVALID_ARGUMENT;
	}

	while (twi_is_busy()) {
		cpu_relax();
80002cd6:	fe cf ff fc 	sub	pc,pc,-4
	// No data to send
	if (package->length == 0) {
		return TWI_INVALID_ARGUMENT;
	}

	while (twi_is_busy()) {
80002cda:	f0 1f 00 1f 	mcall	80002d54 <twi_master_write+0x90>
80002cde:	cf c1       	brne	80002cd6 <twi_master_write+0x12>
		cpu_relax();
	};

	twi_nack = false;
80002ce0:	30 09       	mov	r9,0
80002ce2:	49 e8       	lddpc	r8,80002d58 <twi_master_write+0x94>
80002ce4:	b0 89       	st.b	r8[0x0],r9
	twi_busy = true;
80002ce6:	30 19       	mov	r9,1
80002ce8:	49 d8       	lddpc	r8,80002d5c <twi_master_write+0x98>
80002cea:	b0 89       	st.b	r8[0x0],r9

	// Enable master transfer, disable slave
	twi->cr =   AVR32_TWI_CR_MSEN_MASK
80002cec:	32 48       	mov	r8,36
80002cee:	8d 08       	st.w	r6[0x0],r8
			| AVR32_TWI_CR_SVDIS_MASK
#endif
			;

	// set write mode, slave address and 3 internal address byte length
	twi->mmr = (0 << AVR32_TWI_MMR_MREAD_OFFSET) |
80002cf0:	6e 18       	ld.w	r8,r7[0x4]
80002cf2:	a9 68       	lsl	r8,0x8
80002cf4:	e2 18 03 00 	andl	r8,0x300,COH
80002cf8:	0f 89       	ld.ub	r9,r7[0x0]
80002cfa:	f1 e9 11 08 	or	r8,r8,r9<<0x10
80002cfe:	8d 18       	st.w	r6[0x4],r8
			(package->chip << AVR32_TWI_MMR_DADR_OFFSET) |
			((package->addr_length << AVR32_TWI_MMR_IADRSZ_OFFSET) & AVR32_TWI_MMR_IADRSZ_MASK);

	// Set pointer to TWI instance for IT
	twi_inst = twi;
80002d00:	49 88       	lddpc	r8,80002d60 <twi_master_write+0x9c>
80002d02:	91 06       	st.w	r8[0x0],r6

	// set internal address for remote chip
	twi->iadr = twi_mk_addr(package->addr, package->addr_length);
80002d04:	6e 1b       	ld.w	r11,r7[0x4]
80002d06:	ee cc ff ff 	sub	r12,r7,-1
80002d0a:	f0 1f 00 17 	mcall	80002d64 <twi_master_write+0xa0>
80002d0e:	8d 3c       	st.w	r6[0xc],r12

	// get a pointer to applicative data
	twi_tx_data = package->buffer;
80002d10:	6e 29       	ld.w	r9,r7[0x8]
80002d12:	49 68       	lddpc	r8,80002d68 <twi_master_write+0xa4>
80002d14:	91 09       	st.w	r8[0x0],r9

	// get a copy of nb bytes to write
	twi_tx_nb_bytes = package->length;
80002d16:	6e 3a       	ld.w	r10,r7[0xc]
80002d18:	49 59       	lddpc	r9,80002d6c <twi_master_write+0xa8>
80002d1a:	93 0a       	st.w	r9[0x0],r10

	// put the first byte in the Transmit Holding Register
	twi->thr = *twi_tx_data++;
80002d1c:	70 09       	ld.w	r9,r8[0x0]
80002d1e:	13 3a       	ld.ub	r10,r9++
80002d20:	8d da       	st.w	r6[0x34],r10
80002d22:	91 09       	st.w	r8[0x0],r9

	// mask NACK and TXRDY interrupts
	twi_it_mask = AVR32_TWI_IER_NACK_MASK | AVR32_TWI_IER_TXRDY_MASK;
80002d24:	49 38       	lddpc	r8,80002d70 <twi_master_write+0xac>
80002d26:	e0 69 01 04 	mov	r9,260
80002d2a:	91 09       	st.w	r8[0x0],r9

	// update IMR through IER
	twi->ier = twi_it_mask;
80002d2c:	70 08       	ld.w	r8,r8[0x0]
80002d2e:	8d 98       	st.w	r6[0x24],r8

	// send data
	while (twi_is_busy()) {
80002d30:	c0 38       	rjmp	80002d36 <twi_master_write+0x72>
		cpu_relax();
80002d32:	fe cf ff fc 	sub	pc,pc,-4

	// update IMR through IER
	twi->ier = twi_it_mask;

	// send data
	while (twi_is_busy()) {
80002d36:	f0 1f 00 08 	mcall	80002d54 <twi_master_write+0x90>
80002d3a:	cf c1       	brne	80002d32 <twi_master_write+0x6e>
		cpu_relax();
	}

	// Disable master transfer
	twi->cr =  AVR32_TWI_CR_MSDIS_MASK;
80002d3c:	30 88       	mov	r8,8
80002d3e:	8d 08       	st.w	r6[0x0],r8

	if (twi_nack) {
80002d40:	48 68       	lddpc	r8,80002d58 <twi_master_write+0x94>
80002d42:	11 8c       	ld.ub	r12,r8[0x0]
80002d44:	58 0c       	cp.w	r12,0
80002d46:	f9 bc 01 fb 	movne	r12,-5
80002d4a:	f9 bc 00 00 	moveq	r12,0
		return TWI_RECEIVE_NACK;
	}

	return TWI_SUCCESS;
}
80002d4e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002d52:	00 00       	add	r0,r0
80002d54:	80 00       	ld.sh	r0,r0[0x0]
80002d56:	2c b8       	sub	r8,-53
80002d58:	00 00       	add	r0,r0
80002d5a:	05 91       	ld.ub	r1,r2[0x1]
80002d5c:	00 00       	add	r0,r0
80002d5e:	05 90       	ld.ub	r0,r2[0x1]
80002d60:	00 00       	add	r0,r0
80002d62:	05 9c       	ld.ub	r12,r2[0x1]
80002d64:	80 00       	ld.sh	r0,r0[0x0]
80002d66:	2c 94       	sub	r4,-55
80002d68:	00 00       	add	r0,r0
80002d6a:	05 a0       	ld.ub	r0,r2[0x2]
80002d6c:	00 00       	add	r0,r0
80002d6e:	05 94       	ld.ub	r4,r2[0x1]
80002d70:	00 00       	add	r0,r0
80002d72:	05 98       	ld.ub	r8,r2[0x1]

80002d74 <twi_master_read>:
	}
	return val;
}

int twi_master_read(volatile avr32_twi_t *twi, const twi_package_t *package)
{
80002d74:	eb cd 40 c0 	pushm	r6-r7,lr
80002d78:	18 96       	mov	r6,r12
80002d7a:	16 97       	mov	r7,r11
	// check argument
	if (package->length == 0) {
80002d7c:	76 38       	ld.w	r8,r11[0xc]
80002d7e:	58 08       	cp.w	r8,0
80002d80:	c0 51       	brne	80002d8a <twi_master_read+0x16>
80002d82:	e3 cf c0 c0 	ldm	sp++,r6-r7,pc,r12=-1
		return TWI_INVALID_ARGUMENT;
	}

	while (twi_is_busy()) {
		cpu_relax();
80002d86:	fe cf ff fc 	sub	pc,pc,-4
	// check argument
	if (package->length == 0) {
		return TWI_INVALID_ARGUMENT;
	}

	while (twi_is_busy()) {
80002d8a:	f0 1f 00 21 	mcall	80002e0c <twi_master_read+0x98>
80002d8e:	cf c1       	brne	80002d86 <twi_master_read+0x12>
		cpu_relax();
	};

	twi_nack = false;
80002d90:	30 09       	mov	r9,0
80002d92:	4a 08       	lddpc	r8,80002e10 <twi_master_read+0x9c>
80002d94:	b0 89       	st.b	r8[0x0],r9
	twi_busy = true;
80002d96:	30 19       	mov	r9,1
80002d98:	49 f8       	lddpc	r8,80002e14 <twi_master_read+0xa0>
80002d9a:	b0 89       	st.b	r8[0x0],r9

	// set read mode, slave address and 3 internal address byte length
	twi->mmr = (package->chip << AVR32_TWI_MMR_DADR_OFFSET) |
80002d9c:	0f 89       	ld.ub	r9,r7[0x0]
80002d9e:	6e 18       	ld.w	r8,r7[0x4]
80002da0:	a9 68       	lsl	r8,0x8
80002da2:	e2 18 03 00 	andl	r8,0x300,COH
80002da6:	f1 e9 11 08 	or	r8,r8,r9<<0x10
80002daa:	ad a8       	sbr	r8,0xc
80002dac:	8d 18       	st.w	r6[0x4],r8
			((package->addr_length << AVR32_TWI_MMR_IADRSZ_OFFSET) & AVR32_TWI_MMR_IADRSZ_MASK) |
			(1 << AVR32_TWI_MMR_MREAD_OFFSET);

	// Set pointer to TWIM instance for IT
	twi_inst = twi;
80002dae:	49 b8       	lddpc	r8,80002e18 <twi_master_read+0xa4>
80002db0:	91 06       	st.w	r8[0x0],r6

	// set internal address for remote chip
	twi->iadr = twi_mk_addr(package->addr, package->addr_length);
80002db2:	6e 1b       	ld.w	r11,r7[0x4]
80002db4:	ee cc ff ff 	sub	r12,r7,-1
80002db8:	f0 1f 00 19 	mcall	80002e1c <twi_master_read+0xa8>
80002dbc:	8d 3c       	st.w	r6[0xc],r12

	// get a pointer to applicative data
	twi_rx_data = package->buffer;
80002dbe:	6e 29       	ld.w	r9,r7[0x8]
80002dc0:	49 88       	lddpc	r8,80002e20 <twi_master_read+0xac>
80002dc2:	91 09       	st.w	r8[0x0],r9

	// get a copy of nb bytes to read
	twi_rx_nb_bytes = package->length;
80002dc4:	6e 39       	ld.w	r9,r7[0xc]
80002dc6:	49 88       	lddpc	r8,80002e24 <twi_master_read+0xb0>
80002dc8:	91 09       	st.w	r8[0x0],r9

	// Enable master transfer
	twi->cr =  AVR32_TWI_CR_MSEN_MASK;
80002dca:	30 49       	mov	r9,4
80002dcc:	8d 09       	st.w	r6[0x0],r9

	// Send start condition
	twi->cr = AVR32_TWI_START_MASK;
80002dce:	30 19       	mov	r9,1
80002dd0:	8d 09       	st.w	r6[0x0],r9

	// only one byte to receive
	if (twi_rx_nb_bytes == 1) {
80002dd2:	70 08       	ld.w	r8,r8[0x0]
		// set stop bit
		twi->cr = AVR32_TWI_STOP_MASK;
80002dd4:	12 38       	cp.w	r8,r9
80002dd6:	f9 b8 00 02 	moveq	r8,2
80002dda:	ed f8 0a 00 	st.weq	r6[0x0],r8
	}

	// mask NACK and RXRDY interrupts
	twi_it_mask = AVR32_TWI_IER_NACK_MASK | AVR32_TWI_IER_RXRDY_MASK;
80002dde:	49 38       	lddpc	r8,80002e28 <twi_master_read+0xb4>
80002de0:	e0 69 01 02 	mov	r9,258
80002de4:	91 09       	st.w	r8[0x0],r9

	// update IMR through IER
	twi->ier = twi_it_mask;
80002de6:	70 08       	ld.w	r8,r8[0x0]
80002de8:	8d 98       	st.w	r6[0x24],r8

	// get data
	while (twi_is_busy()) {
80002dea:	c0 38       	rjmp	80002df0 <twi_master_read+0x7c>
		cpu_relax();
80002dec:	fe cf ff fc 	sub	pc,pc,-4

	// update IMR through IER
	twi->ier = twi_it_mask;

	// get data
	while (twi_is_busy()) {
80002df0:	f0 1f 00 07 	mcall	80002e0c <twi_master_read+0x98>
80002df4:	cf c1       	brne	80002dec <twi_master_read+0x78>
		cpu_relax();
	}

	// Disable master transfer
	twi->cr =  AVR32_TWI_CR_MSDIS_MASK;
80002df6:	30 88       	mov	r8,8
80002df8:	8d 08       	st.w	r6[0x0],r8

	if (twi_nack) {
80002dfa:	48 68       	lddpc	r8,80002e10 <twi_master_read+0x9c>
80002dfc:	11 8c       	ld.ub	r12,r8[0x0]
80002dfe:	58 0c       	cp.w	r12,0
80002e00:	f9 bc 01 fb 	movne	r12,-5
80002e04:	f9 bc 00 00 	moveq	r12,0
		return TWI_RECEIVE_NACK;
	}

	return TWI_SUCCESS;
}
80002e08:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002e0c:	80 00       	ld.sh	r0,r0[0x0]
80002e0e:	2c b8       	sub	r8,-53
80002e10:	00 00       	add	r0,r0
80002e12:	05 91       	ld.ub	r1,r2[0x1]
80002e14:	00 00       	add	r0,r0
80002e16:	05 90       	ld.ub	r0,r2[0x1]
80002e18:	00 00       	add	r0,r0
80002e1a:	05 9c       	ld.ub	r12,r2[0x1]
80002e1c:	80 00       	ld.sh	r0,r0[0x0]
80002e1e:	2c 94       	sub	r4,-55
80002e20:	00 00       	add	r0,r0
80002e22:	05 a8       	ld.ub	r8,r2[0x2]
80002e24:	00 00       	add	r0,r0
80002e26:	05 a4       	ld.ub	r4,r2[0x2]
80002e28:	00 00       	add	r0,r0
80002e2a:	05 98       	ld.ub	r8,r2[0x1]

80002e2c <twi_master_init>:
	return TWI_SUCCESS;
}


int twi_master_init(volatile avr32_twi_t *twi, const twi_options_t *opt)
{
80002e2c:	eb cd 40 e0 	pushm	r5-r7,lr
80002e30:	18 97       	mov	r7,r12
80002e32:	16 95       	mov	r5,r11
	irqflags_t flags = sysreg_read(AVR32_SR);
80002e34:	e1 b8 00 00 	mfsr	r8,0x0
	int status = TWI_SUCCESS;

	// Set pointer to TWIM instance for IT
	twi_inst = twi;
80002e38:	49 f9       	lddpc	r9,80002eb4 <twi_master_init+0x88>
80002e3a:	93 0c       	st.w	r9[0x0],r12

	// Disable TWI interrupts
	cpu_irq_disable();
80002e3c:	d3 03       	ssrf	0x10
	twi->idr = ~0UL;
80002e3e:	3f f9       	mov	r9,-1
80002e40:	99 a9       	st.w	r12[0x28],r9
	twi->sr;
80002e42:	78 89       	ld.w	r9,r12[0x20]

	// Reset TWI
	twi->cr = AVR32_TWI_CR_SWRST_MASK;
80002e44:	e0 69 00 80 	mov	r9,128
80002e48:	99 09       	st.w	r12[0x0],r9
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002e4a:	e6 18 00 01 	andh	r8,0x1,COH
80002e4e:	c0 21       	brne	80002e52 <twi_master_init+0x26>
      cpu_irq_enable();
80002e50:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);

	// Dummy read in SR
	twi->sr;
80002e52:	6e 88       	ld.w	r8,r7[0x20]

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002e54:	e1 b6 00 00 	mfsr	r6,0x0
	cpu_irq_disable();
80002e58:	d3 03       	ssrf	0x10

	// register Register twim_master_interrupt_handler interrupt
	// on level CONF_TWI_IRQ_LEVEL
	flags = cpu_irq_save();
	irq_register_handler(&twi_master_interrupt_handler, CONF_TWI_IRQ_LINE,
80002e5a:	30 3a       	mov	r10,3
80002e5c:	e0 6b 01 60 	mov	r11,352
80002e60:	49 6c       	lddpc	r12,80002eb8 <twi_master_init+0x8c>
80002e62:	f0 1f 00 17 	mcall	80002ebc <twi_master_init+0x90>
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002e66:	e6 16 00 01 	andh	r6,0x1,COH
80002e6a:	c0 21       	brne	80002e6e <twi_master_init+0x42>
      cpu_irq_enable();
80002e6c:	d5 03       	csrf	0x10
		unsigned long pba_hz)
{
	unsigned int ckdiv = 0;
	unsigned int c_lh_div;

	c_lh_div = pba_hz / (speed * 2) - 4;
80002e6e:	6a 19       	ld.w	r9,r5[0x4]
80002e70:	a1 79       	lsl	r9,0x1
80002e72:	6a 08       	ld.w	r8,r5[0x0]
80002e74:	f0 09 0d 08 	divu	r8,r8,r9
80002e78:	20 48       	sub	r8,4

	// cldiv must fit in 8 bits, ckdiv must fit in 3 bits
	while ((c_lh_div > 0xFF) && (ckdiv < 0x7)) {
80002e7a:	e0 48 00 ff 	cp.w	r8,255
80002e7e:	e0 8b 00 04 	brhi	80002e86 <twi_master_init+0x5a>
80002e82:	30 09       	mov	r9,0
80002e84:	c0 f8       	rjmp	80002ea2 <twi_master_init+0x76>
80002e86:	30 09       	mov	r9,0
80002e88:	30 0c       	mov	r12,0
		// increase clock divider
		ckdiv++;
80002e8a:	2f f9       	sub	r9,-1

		// divide cldiv value
		c_lh_div /= 2;
80002e8c:	a1 98       	lsr	r8,0x1
	unsigned int c_lh_div;

	c_lh_div = pba_hz / (speed * 2) - 4;

	// cldiv must fit in 8 bits, ckdiv must fit in 3 bits
	while ((c_lh_div > 0xFF) && (ckdiv < 0x7)) {
80002e8e:	e0 48 00 ff 	cp.w	r8,255
80002e92:	5f bb       	srhi	r11
80002e94:	58 69       	cp.w	r9,6
80002e96:	5f 8a       	srls	r10
80002e98:	f7 ea 00 0a 	and	r10,r11,r10
80002e9c:	f8 0a 18 00 	cp.b	r10,r12
80002ea0:	cf 51       	brne	80002e8a <twi_master_init+0x5e>
		// divide cldiv value
		c_lh_div /= 2;
	}

	// set clock waveform generator register
	twi->cwgr = ((c_lh_div << AVR32_TWI_CWGR_CLDIV_OFFSET) |
80002ea2:	b1 69       	lsl	r9,0x10
80002ea4:	f3 e8 10 89 	or	r9,r9,r8<<0x8
80002ea8:	f3 e8 10 08 	or	r8,r9,r8
80002eac:	8f 48       	st.w	r7[0x10],r8

	// Probe the component
	//status = twi_probe(twi, opt->chip);

	return status;
}
80002eae:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
80002eb2:	00 00       	add	r0,r0
80002eb4:	00 00       	add	r0,r0
80002eb6:	05 9c       	ld.ub	r12,r2[0x1]
80002eb8:	80 00       	ld.sh	r0,r0[0x0]
80002eba:	2b d8       	sub	r8,-67
80002ebc:	80 00       	ld.sh	r0,r0[0x0]
80002ebe:	32 ec       	mov	r12,46

80002ec0 <getBaudDiv>:
xSemaphoreHandle xSPIMutex;
#endif

int16_t getBaudDiv(const uint32_t baudrate, uint32_t pb_hz)
{
	uint32_t baudDiv = div_ceil(pb_hz, baudrate);
80002ec0:	f8 c8 00 01 	sub	r8,r12,1
80002ec4:	f0 0b 00 0b 	add	r11,r8,r11
80002ec8:	f6 0c 0d 0a 	divu	r10,r11,r12
80002ecc:	14 9c       	mov	r12,r10

	if (baudDiv <= 0 || baudDiv > 255) {
80002ece:	f4 c8 00 01 	sub	r8,r10,1
80002ed2:	e0 48 00 fe 	cp.w	r8,254
80002ed6:	e0 88 00 03 	brls	80002edc <getBaudDiv+0x1c>
80002eda:	5e fe       	retal	-1
		return -1;
	}

	return baudDiv;
80002edc:	5c 8c       	casts.h	r12
}
80002ede:	5e fc       	retal	r12

80002ee0 <spi_initMaster>:
spi_status_t spi_initMaster(volatile avr32_spi_t *spi,
		const spi_options_t *options)
{
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (options->modfdis > 1) {
80002ee0:	f7 39 00 0d 	ld.ub	r9,r11[13]
80002ee4:	30 18       	mov	r8,1
80002ee6:	f0 09 18 00 	cp.b	r9,r8
80002eea:	e0 88 00 04 	brls	80002ef2 <spi_initMaster+0x12>
80002eee:	30 2c       	mov	r12,2
80002ef0:	5e fc       	retal	r12
		return SPI_ERROR_ARGUMENT;
	}

	/* Reset. */
	spi->cr = AVR32_SPI_CR_SWRST_MASK;
80002ef2:	e0 68 00 80 	mov	r8,128
80002ef6:	99 08       	st.w	r12[0x0],r8

	/* Master Mode. */
	u_avr32_spi_mr.mr = spi->mr;
80002ef8:	78 18       	ld.w	r8,r12[0x4]
	u_avr32_spi_mr.MR.mstr = 1;
80002efa:	30 19       	mov	r9,1
80002efc:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
	u_avr32_spi_mr.MR.modfdis = options->modfdis;
80002f00:	f7 39 00 0d 	ld.ub	r9,r11[13]
80002f04:	f1 d9 d0 81 	bfins	r8,r9,0x4,0x1
	u_avr32_spi_mr.MR.llb = 0;
80002f08:	30 09       	mov	r9,0
80002f0a:	f1 d9 d0 e1 	bfins	r8,r9,0x7,0x1
	u_avr32_spi_mr.MR.pcs = (1 << AVR32_SPI_MR_PCS_SIZE) - 1;
80002f0e:	30 fa       	mov	r10,15
80002f10:	f1 da d2 04 	bfins	r8,r10,0x10,0x4
	spi->mr = u_avr32_spi_mr.mr;
80002f14:	99 18       	st.w	r12[0x4],r8
80002f16:	5e f9       	retal	r9

80002f18 <spi_selectionMode>:

spi_status_t spi_selectionMode(volatile avr32_spi_t *spi,
		uint8_t variable_ps,
		uint8_t pcs_decode,
		uint8_t delay)
{
80002f18:	d4 01       	pushm	lr
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (variable_ps > 1 ||
80002f1a:	30 18       	mov	r8,1
80002f1c:	f0 0b 18 00 	cp.b	r11,r8
80002f20:	5f be       	srhi	lr
80002f22:	f0 0a 18 00 	cp.b	r10,r8
80002f26:	5f b8       	srhi	r8
80002f28:	fd e8 10 08 	or	r8,lr,r8
80002f2c:	c0 30       	breq	80002f32 <spi_selectionMode+0x1a>
80002f2e:	30 2c       	mov	r12,2
80002f30:	d8 02       	popm	pc
			pcs_decode > 1) {
		return SPI_ERROR_ARGUMENT;
	}

	u_avr32_spi_mr.mr = spi->mr;
80002f32:	78 18       	ld.w	r8,r12[0x4]
	u_avr32_spi_mr.MR.ps = variable_ps;
80002f34:	f1 db d0 21 	bfins	r8,r11,0x1,0x1
	u_avr32_spi_mr.MR.pcsdec = pcs_decode;
80002f38:	f1 da d0 41 	bfins	r8,r10,0x2,0x1
	u_avr32_spi_mr.MR.dlybcs = delay;
80002f3c:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8
	spi->mr = u_avr32_spi_mr.mr;
80002f40:	99 18       	st.w	r12[0x4],r8
80002f42:	d8 0a       	popm	pc,r12=0

80002f44 <spi_enable>:
	return SPI_OK;
}

void spi_enable(volatile avr32_spi_t *spi)
{
	spi->cr = AVR32_SPI_CR_SPIEN_MASK;
80002f44:	30 18       	mov	r8,1
80002f46:	99 08       	st.w	r12[0x0],r8
}
80002f48:	5e fc       	retal	r12

80002f4a <spi_write>:
{
	return ((spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0);
}

spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
80002f4a:	e0 68 3a 98 	mov	r8,15000
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
80002f4e:	c0 58       	rjmp	80002f58 <spi_write+0xe>
		if (!timeout--) {
80002f50:	58 08       	cp.w	r8,0
80002f52:	c0 21       	brne	80002f56 <spi_write+0xc>
80002f54:	5e ff       	retal	1
80002f56:	20 18       	sub	r8,1

spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
80002f58:	78 49       	ld.w	r9,r12[0x10]
80002f5a:	e2 19 00 02 	andl	r9,0x2,COH
80002f5e:	cf 90       	breq	80002f50 <spi_write+0x6>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
80002f60:	5c 7b       	castu.h	r11
80002f62:	99 3b       	st.w	r12[0xc],r11
80002f64:	5e fd       	retal	0

80002f66 <spi_read>:
{
	return ((spi->sr & AVR32_SPI_SR_RDRF_MASK) != 0);
}

spi_status_t spi_read(volatile avr32_spi_t *spi, uint16_t *data)
{
80002f66:	e0 68 3a 98 	mov	r8,15000
	unsigned int timeout = SPI_TIMEOUT;

	while ((spi->sr &
80002f6a:	c0 58       	rjmp	80002f74 <spi_read+0xe>
			(AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) !=
			(AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) {
		if (!timeout--) {
80002f6c:	58 08       	cp.w	r8,0
80002f6e:	c0 21       	brne	80002f72 <spi_read+0xc>
80002f70:	5e ff       	retal	1
80002f72:	20 18       	sub	r8,1

spi_status_t spi_read(volatile avr32_spi_t *spi, uint16_t *data)
{
	unsigned int timeout = SPI_TIMEOUT;

	while ((spi->sr &
80002f74:	78 49       	ld.w	r9,r12[0x10]
80002f76:	e2 19 02 01 	andl	r9,0x201,COH
80002f7a:	e0 49 02 01 	cp.w	r9,513
80002f7e:	cf 71       	brne	80002f6c <spi_read+0x6>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	*data = spi->rdr >> AVR32_SPI_RDR_RD_OFFSET;
80002f80:	78 28       	ld.w	r8,r12[0x8]
80002f82:	b6 08       	st.h	r11[0x0],r8
80002f84:	5e fd       	retal	0
80002f86:	d7 03       	nop

80002f88 <spi_setupChipReg>:
}

spi_status_t spi_setupChipReg(volatile avr32_spi_t *spi,
		const spi_options_t *options,
		uint32_t pb_hz)
{
80002f88:	eb cd 40 f8 	pushm	r3-r7,lr
80002f8c:	18 95       	mov	r5,r12
80002f8e:	16 97       	mov	r7,r11
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
80002f90:	f7 36 00 0c 	ld.ub	r6,r11[12]
80002f94:	30 38       	mov	r8,3
80002f96:	f0 06 18 00 	cp.b	r6,r8
80002f9a:	e0 8b 00 5e 	brhi	80003056 <spi_setupChipReg+0xce>
			options->stay_act > 1 ||
80002f9e:	f7 34 00 0b 	ld.ub	r4,r11[11]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
80002fa2:	30 18       	mov	r8,1
80002fa4:	f0 04 18 00 	cp.b	r4,r8
80002fa8:	e0 8b 00 57 	brhi	80003056 <spi_setupChipReg+0xce>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
80002fac:	f7 33 00 08 	ld.ub	r3,r11[8]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
80002fb0:	30 78       	mov	r8,7
80002fb2:	f0 03 18 00 	cp.b	r3,r8
80002fb6:	e0 88 00 50 	brls	80003056 <spi_setupChipReg+0xce>
80002fba:	31 08       	mov	r8,16
80002fbc:	f0 03 18 00 	cp.b	r3,r8
80002fc0:	e0 8b 00 4b 	brhi	80003056 <spi_setupChipReg+0xce>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
		return SPI_ERROR_ARGUMENT;
	}

	int baudDiv = getBaudDiv(options->baudrate, pb_hz);
80002fc4:	14 9b       	mov	r11,r10
80002fc6:	6e 1c       	ld.w	r12,r7[0x4]
80002fc8:	f0 1f 00 26 	mcall	80003060 <spi_setupChipReg+0xd8>

	if (baudDiv < 0) {
80002fcc:	c4 55       	brlt	80003056 <spi_setupChipReg+0xce>
		return SPI_ERROR_ARGUMENT;
	}

	/* Will use CSR0 offsets; these are the same for CSR0 to CSR3. */
	u_avr32_spi_csr.csr = 0;
80002fce:	30 08       	mov	r8,0
	u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
80002fd0:	ec 09 16 01 	lsr	r9,r6,0x1
80002fd4:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
	u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
80002fd8:	ec 16 00 01 	eorl	r6,0x1
80002fdc:	f1 d6 d0 21 	bfins	r8,r6,0x1,0x1
	u_avr32_spi_csr.CSR.csaat  = options->stay_act;
80002fe0:	f1 d4 d0 61 	bfins	r8,r4,0x3,0x1
	u_avr32_spi_csr.CSR.bits   = options->bits - 8;
80002fe4:	20 83       	sub	r3,8
80002fe6:	f1 d3 d0 84 	bfins	r8,r3,0x4,0x4
	u_avr32_spi_csr.CSR.scbr   = baudDiv;
80002fea:	f1 dc d1 08 	bfins	r8,r12,0x8,0x8
	u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
80002fee:	ef 39 00 09 	ld.ub	r9,r7[9]
80002ff2:	f1 d9 d2 08 	bfins	r8,r9,0x10,0x8
	u_avr32_spi_csr.CSR.dlybct = options->trans_delay;
80002ff6:	ef 39 00 0a 	ld.ub	r9,r7[10]
80002ffa:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8

	switch (options->reg) {
80002ffe:	0f 89       	ld.ub	r9,r7[0x0]
80003000:	30 1a       	mov	r10,1
80003002:	f4 09 18 00 	cp.b	r9,r10
80003006:	c0 d0       	breq	80003020 <spi_setupChipReg+0x98>
80003008:	c0 a3       	brcs	8000301c <spi_setupChipReg+0x94>
8000300a:	30 2a       	mov	r10,2
8000300c:	f4 09 18 00 	cp.b	r9,r10
80003010:	c0 a0       	breq	80003024 <spi_setupChipReg+0x9c>
80003012:	30 3a       	mov	r10,3
80003014:	f4 09 18 00 	cp.b	r9,r10
80003018:	c1 f1       	brne	80003056 <spi_setupChipReg+0xce>
8000301a:	c0 78       	rjmp	80003028 <spi_setupChipReg+0xa0>
	case 0:
		spi->csr0 = u_avr32_spi_csr.csr;
8000301c:	8b c8       	st.w	r5[0x30],r8
		break;
8000301e:	c0 68       	rjmp	8000302a <spi_setupChipReg+0xa2>

	case 1:
		spi->csr1 = u_avr32_spi_csr.csr;
80003020:	8b d8       	st.w	r5[0x34],r8
		break;
80003022:	c0 48       	rjmp	8000302a <spi_setupChipReg+0xa2>

	case 2:
		spi->csr2 = u_avr32_spi_csr.csr;
80003024:	8b e8       	st.w	r5[0x38],r8
		break;
80003026:	c0 28       	rjmp	8000302a <spi_setupChipReg+0xa2>

	case 3:
		spi->csr3 = u_avr32_spi_csr.csr;
80003028:	8b f8       	st.w	r5[0x3c],r8
	default:
		return SPI_ERROR_ARGUMENT;
	}

#ifdef FREERTOS_USED
	if (!xSPIMutex) {
8000302a:	48 f8       	lddpc	r8,80003064 <spi_setupChipReg+0xdc>
8000302c:	70 08       	ld.w	r8,r8[0x0]
8000302e:	58 08       	cp.w	r8,0
80003030:	c1 61       	brne	8000305c <spi_setupChipReg+0xd4>
		/* Create the SPI mutex. */
		vSemaphoreCreateBinary(xSPIMutex);
80003032:	30 0b       	mov	r11,0
80003034:	30 1c       	mov	r12,1
80003036:	f0 1f 00 0d 	mcall	80003068 <spi_setupChipReg+0xe0>
8000303a:	48 b8       	lddpc	r8,80003064 <spi_setupChipReg+0xdc>
8000303c:	91 0c       	st.w	r8[0x0],r12
8000303e:	58 0c       	cp.w	r12,0
80003040:	c0 a0       	breq	80003054 <spi_setupChipReg+0xcc>
80003042:	30 09       	mov	r9,0
80003044:	12 9a       	mov	r10,r9
80003046:	12 9b       	mov	r11,r9
80003048:	f0 1f 00 09 	mcall	8000306c <spi_setupChipReg+0xe4>
		if (!xSPIMutex) {
8000304c:	48 68       	lddpc	r8,80003064 <spi_setupChipReg+0xdc>
8000304e:	70 08       	ld.w	r8,r8[0x0]
80003050:	58 08       	cp.w	r8,0
80003052:	c0 51       	brne	8000305c <spi_setupChipReg+0xd4>
80003054:	c0 08       	rjmp	80003054 <spi_setupChipReg+0xcc>
80003056:	30 2c       	mov	r12,2
80003058:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
8000305c:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
80003060:	80 00       	ld.sh	r0,r0[0x0]
80003062:	2e c0       	sub	r0,-20
80003064:	00 00       	add	r0,r0
80003066:	08 2c       	rsub	r12,r4
80003068:	80 00       	ld.sh	r0,r0[0x0]
8000306a:	3f 7c       	mov	r12,-9
8000306c:	80 00       	ld.sh	r0,r0[0x0]
8000306e:	3e 24       	mov	r4,-30

80003070 <spi_unselectChip>:

	return SPI_OK;
}

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
80003070:	d4 01       	pushm	lr
80003072:	e0 68 3a 98 	mov	r8,15000
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
80003076:	c0 58       	rjmp	80003080 <spi_unselectChip+0x10>
		if (!timeout--) {
80003078:	58 08       	cp.w	r8,0
8000307a:	c0 21       	brne	8000307e <spi_unselectChip+0xe>
8000307c:	da 0a       	popm	pc,r12=1
8000307e:	20 18       	sub	r8,1

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
80003080:	78 49       	ld.w	r9,r12[0x10]
80003082:	e2 19 02 00 	andl	r9,0x200,COH
80003086:	cf 90       	breq	80003078 <spi_unselectChip+0x8>
			return SPI_ERROR_TIMEOUT;
		}
	}

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
80003088:	78 18       	ld.w	r8,r12[0x4]
8000308a:	ea 18 00 0f 	orh	r8,0xf
8000308e:	99 18       	st.w	r12[0x4],r8

	/* Last transfer, so de-assert the current NPCS if CSAAT is set. */
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
80003090:	fc 18 01 00 	movh	r8,0x100
80003094:	99 08       	st.w	r12[0x0],r8

#ifdef FREERTOS_USED
	xSemaphoreGive(xSPIMutex);
80003096:	30 09       	mov	r9,0
80003098:	12 9a       	mov	r10,r9
8000309a:	12 9b       	mov	r11,r9
8000309c:	48 38       	lddpc	r8,800030a8 <spi_unselectChip+0x38>
8000309e:	70 0c       	ld.w	r12,r8[0x0]
800030a0:	f0 1f 00 03 	mcall	800030ac <spi_unselectChip+0x3c>
800030a4:	d8 0a       	popm	pc,r12=0
800030a6:	00 00       	add	r0,r0
800030a8:	00 00       	add	r0,r0
800030aa:	08 2c       	rsub	r12,r4
800030ac:	80 00       	ld.sh	r0,r0[0x0]
800030ae:	3e 24       	mov	r4,-30

800030b0 <spi_selectChip>:

	return SPI_OK;
}

spi_status_t spi_selectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
800030b0:	eb cd 40 f8 	pushm	r3-r7,lr
800030b4:	18 94       	mov	r4,r12
800030b6:	16 93       	mov	r3,r11
#ifdef FREERTOS_USED
	while (pdFALSE == xSemaphoreTake(xSPIMutex, 20)) {
800030b8:	49 a6       	lddpc	r6,80003120 <spi_selectChip+0x70>
800030ba:	30 07       	mov	r7,0
800030bc:	31 45       	mov	r5,20
800030be:	0e 99       	mov	r9,r7
800030c0:	0a 9a       	mov	r10,r5
800030c2:	0e 9b       	mov	r11,r7
800030c4:	6c 0c       	ld.w	r12,r6[0x0]
800030c6:	f0 1f 00 18 	mcall	80003124 <spi_selectChip+0x74>
800030ca:	cf a0       	breq	800030be <spi_selectChip+0xe>
	}
#endif

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
800030cc:	68 18       	ld.w	r8,r4[0x4]
800030ce:	ea 18 00 0f 	orh	r8,0xf
800030d2:	89 18       	st.w	r4[0x4],r8

	if (spi->mr & AVR32_SPI_MR_PCSDEC_MASK) {
800030d4:	68 18       	ld.w	r8,r4[0x4]
800030d6:	e2 18 00 04 	andl	r8,0x4,COH
800030da:	c1 10       	breq	800030fc <spi_selectChip+0x4c>
		/* The signal is decoded; allow up to 15 chips. */
		if (chip > 14) {
800030dc:	30 e8       	mov	r8,14
800030de:	f0 03 18 00 	cp.b	r3,r8
800030e2:	e0 8b 00 1c 	brhi	8000311a <spi_selectChip+0x6a>
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~AVR32_SPI_MR_PCS_MASK |
800030e6:	68 19       	ld.w	r9,r4[0x4]
800030e8:	e6 08 15 10 	lsl	r8,r3,0x10
800030ec:	ea 18 ff f0 	orh	r8,0xfff0
800030f0:	e8 18 ff ff 	orl	r8,0xffff
800030f4:	12 68       	and	r8,r9
800030f6:	89 18       	st.w	r4[0x4],r8
800030f8:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
				(chip << AVR32_SPI_MR_PCS_OFFSET);
	} else {
		if (chip > 3) {
800030fc:	30 38       	mov	r8,3
800030fe:	f0 03 18 00 	cp.b	r3,r8
80003102:	e0 8b 00 0c 	brhi	8000311a <spi_selectChip+0x6a>
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~(1 << (AVR32_SPI_MR_PCS_OFFSET + chip));
80003106:	68 19       	ld.w	r9,r4[0x4]
80003108:	2f 03       	sub	r3,-16
8000310a:	30 18       	mov	r8,1
8000310c:	f0 03 09 48 	lsl	r8,r8,r3
80003110:	5c d8       	com	r8
80003112:	12 68       	and	r8,r9
80003114:	89 18       	st.w	r4[0x4],r8
80003116:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
8000311a:	30 2c       	mov	r12,2
	}

	return SPI_OK;
}
8000311c:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
80003120:	00 00       	add	r0,r0
80003122:	08 2c       	rsub	r12,r4
80003124:	80 00       	ld.sh	r0,r0[0x0]
80003126:	3c 68       	mov	r8,-58

80003128 <LED_Display>:
  // Use the LED descriptors to get the connections of a given LED to the MCU.
  tLED_DESCRIPTOR *led_descriptor;
  volatile avr32_gpio_port_t *led_gpio_port;

  // Make sure only existing LEDs are specified.
  leds &= (1 << LED_COUNT) - 1;
80003128:	f9 dc c0 08 	bfextu	r12,r12,0x0,0x8

  // Update the saved state of all LEDs with the requested changes.
  LED_State = leds;
8000312c:	49 28       	lddpc	r8,80003174 <LED_Display+0x4c>
8000312e:	91 0c       	st.w	r8[0x0],r12

  // For all LEDs...
  for (led_descriptor = &LED_DESCRIPTOR[0];
80003130:	49 28       	lddpc	r8,80003178 <LED_Display+0x50>
80003132:	f0 c9 ff 80 	sub	r9,r8,-128
80003136:	12 38       	cp.w	r8,r9
80003138:	5e 2c       	reths	r12
8000313a:	10 9b       	mov	r11,r8
8000313c:	2f c8       	sub	r8,-4
{
  return LED_State;
}


void LED_Display(U32 leds)
8000313e:	f6 cb ff 7c 	sub	r11,r11,-132
  for (led_descriptor = &LED_DESCRIPTOR[0];
       led_descriptor < LED_DESCRIPTOR + LED_COUNT;
       led_descriptor++)
  {
    // Set the LED to the requested state.
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
80003142:	f0 f9 ff fc 	ld.w	r9,r8[-4]
80003146:	a9 69       	lsl	r9,0x8
80003148:	e0 29 f0 00 	sub	r9,61440
    if (leds & 1)
8000314c:	f5 dc c0 01 	bfextu	r10,r12,0x0,0x1
    {
      led_gpio_port->ovrc  = led_descriptor->GPIO.PIN_MASK;
80003150:	f1 fa 10 00 	ld.wne	r10,r8[0x0]
80003154:	f3 fa 1a 16 	st.wne	r9[0x58],r10
    }
    else
    {
      led_gpio_port->ovrs  = led_descriptor->GPIO.PIN_MASK;
80003158:	f1 fa 00 00 	ld.weq	r10,r8[0x0]
8000315c:	f3 fa 0a 15 	st.weq	r9[0x54],r10
    }
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
80003160:	70 0a       	ld.w	r10,r8[0x0]
80003162:	f3 4a 00 44 	st.w	r9[68],r10
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
80003166:	70 0a       	ld.w	r10,r8[0x0]
80003168:	93 1a       	st.w	r9[0x4],r10
8000316a:	2f 08       	sub	r8,-16

  // Update the saved state of all LEDs with the requested changes.
  LED_State = leds;

  // For all LEDs...
  for (led_descriptor = &LED_DESCRIPTOR[0];
8000316c:	16 38       	cp.w	r8,r11
8000316e:	5e 0c       	reteq	r12
    {
      led_gpio_port->ovrs  = led_descriptor->GPIO.PIN_MASK;
    }
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
    leds >>= 1;
80003170:	a1 9c       	lsr	r12,0x1
80003172:	ce 8b       	rjmp	80003142 <LED_Display+0x1a>
80003174:	00 00       	add	r0,r0
80003176:	00 30       	cp.w	r0,r0
80003178:	80 00       	ld.sh	r0,r0[0x0]
8000317a:	a8 d4       	st.b	r4[0x5],r4

8000317c <LED_On>:
  tLED_DESCRIPTOR *led_descriptor = &LED_DESCRIPTOR[0] - 1;
  volatile avr32_gpio_port_t *led_gpio_port;
  U8 led_shift;

  // Make sure only existing LEDs are specified.
  leds &= (1 << LED_COUNT) - 1;
8000317c:	f9 dc c0 08 	bfextu	r12,r12,0x0,0x8

  // Update the saved state of all LEDs with the requested changes.
  Set_bits(LED_State, leds);
80003180:	49 18       	lddpc	r8,800031c4 <LED_On+0x48>
80003182:	70 09       	ld.w	r9,r8[0x0]
80003184:	f9 e9 10 09 	or	r9,r12,r9
80003188:	91 09       	st.w	r8[0x0],r9

  // While there are specified LEDs left to manage...
  while (leds)
8000318a:	58 0c       	cp.w	r12,0
8000318c:	5e 0c       	reteq	r12
8000318e:	48 f8       	lddpc	r8,800031c8 <LED_On+0x4c>
80003190:	21 08       	sub	r8,16
  {
    // Select the next specified LED and turn it on.
    led_shift = 1 + ctz(leds);
80003192:	18 9a       	mov	r10,r12
80003194:	5c 9a       	brev	r10
80003196:	f4 0a 12 00 	clz	r10,r10
8000319a:	2f fa       	sub	r10,-1
    led_descriptor += led_shift;
8000319c:	f4 09 15 04 	lsl	r9,r10,0x4
800031a0:	12 08       	add	r8,r9
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
800031a2:	70 09       	ld.w	r9,r8[0x0]
800031a4:	a9 69       	lsl	r9,0x8
800031a6:	e0 29 f0 00 	sub	r9,61440
    led_gpio_port->ovrc  = led_descriptor->GPIO.PIN_MASK;
800031aa:	70 1b       	ld.w	r11,r8[0x4]
800031ac:	f3 4b 00 58 	st.w	r9[88],r11
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
800031b0:	70 1b       	ld.w	r11,r8[0x4]
800031b2:	f3 4b 00 44 	st.w	r9[68],r11
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
800031b6:	70 1b       	ld.w	r11,r8[0x4]
800031b8:	93 1b       	st.w	r9[0x4],r11
    leds >>= led_shift;
800031ba:	f8 0a 0a 4c 	lsr	r12,r12,r10

  // Update the saved state of all LEDs with the requested changes.
  Set_bits(LED_State, leds);

  // While there are specified LEDs left to manage...
  while (leds)
800031be:	ce a1       	brne	80003192 <LED_On+0x16>
800031c0:	5e fc       	retal	r12
800031c2:	00 00       	add	r0,r0
800031c4:	00 00       	add	r0,r0
800031c6:	00 30       	cp.w	r0,r0
800031c8:	80 00       	ld.sh	r0,r0[0x0]
800031ca:	a8 d4       	st.b	r4[0x5],r4

800031cc <LED_Off>:
  tLED_DESCRIPTOR *led_descriptor = &LED_DESCRIPTOR[0] - 1;
  volatile avr32_gpio_port_t *led_gpio_port;
  U8 led_shift;

  // Make sure only existing LEDs are specified.
  leds &= (1 << LED_COUNT) - 1;
800031cc:	f9 dc c0 08 	bfextu	r12,r12,0x0,0x8

  // Update the saved state of all LEDs with the requested changes.
  Clr_bits(LED_State, leds);
800031d0:	49 28       	lddpc	r8,80003218 <LED_Off+0x4c>
800031d2:	70 09       	ld.w	r9,r8[0x0]
800031d4:	f8 0a 11 ff 	rsub	r10,r12,-1
800031d8:	f5 e9 00 09 	and	r9,r10,r9
800031dc:	91 09       	st.w	r8[0x0],r9

  // While there are specified LEDs left to manage...
  while (leds)
800031de:	58 0c       	cp.w	r12,0
800031e0:	5e 0c       	reteq	r12
800031e2:	48 f8       	lddpc	r8,8000321c <LED_Off+0x50>
800031e4:	21 08       	sub	r8,16
  {
    // Select the next specified LED and turn it off.
    led_shift = 1 + ctz(leds);
800031e6:	18 9a       	mov	r10,r12
800031e8:	5c 9a       	brev	r10
800031ea:	f4 0a 12 00 	clz	r10,r10
800031ee:	2f fa       	sub	r10,-1
    led_descriptor += led_shift;
800031f0:	f4 09 15 04 	lsl	r9,r10,0x4
800031f4:	12 08       	add	r8,r9
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
800031f6:	70 09       	ld.w	r9,r8[0x0]
800031f8:	a9 69       	lsl	r9,0x8
800031fa:	e0 29 f0 00 	sub	r9,61440
    led_gpio_port->ovrs  = led_descriptor->GPIO.PIN_MASK;
800031fe:	70 1b       	ld.w	r11,r8[0x4]
80003200:	f3 4b 00 54 	st.w	r9[84],r11
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
80003204:	70 1b       	ld.w	r11,r8[0x4]
80003206:	f3 4b 00 44 	st.w	r9[68],r11
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
8000320a:	70 1b       	ld.w	r11,r8[0x4]
8000320c:	93 1b       	st.w	r9[0x4],r11
    leds >>= led_shift;
8000320e:	f8 0a 0a 4c 	lsr	r12,r12,r10

  // Update the saved state of all LEDs with the requested changes.
  Clr_bits(LED_State, leds);

  // While there are specified LEDs left to manage...
  while (leds)
80003212:	ce a1       	brne	800031e6 <LED_Off+0x1a>
80003214:	5e fc       	retal	r12
80003216:	00 00       	add	r0,r0
80003218:	00 00       	add	r0,r0
8000321a:	00 30       	cp.w	r0,r0
8000321c:	80 00       	ld.sh	r0,r0[0x0]
8000321e:	a8 d4       	st.b	r4[0x5],r4

80003220 <flashc_set_wait_state>:
}


void flashc_set_wait_state(unsigned int wait_state)
{
	u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
80003220:	fe 68 14 00 	mov	r8,-125952
80003224:	70 09       	ld.w	r9,r8[0x0]
	u_avr32_flashc_fcr.FCR.fws = wait_state;
80003226:	f3 dc d0 c1 	bfins	r9,r12,0x6,0x1
	AVR32_FLASHC.fcr = u_avr32_flashc_fcr.fcr;
8000322a:	91 09       	st.w	r8[0x0],r9
}
8000322c:	5e fc       	retal	r12

8000322e <gpio_enable_module_pin>:
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
8000322e:	f8 08 16 05 	lsr	r8,r12,0x5
80003232:	a9 68       	lsl	r8,0x8
80003234:	e0 28 f0 00 	sub	r8,61440

	/* Enable the correct function. */
	switch (function) {
80003238:	58 1b       	cp.w	r11,1
8000323a:	c0 d0       	breq	80003254 <gpio_enable_module_pin+0x26>
8000323c:	c0 63       	brcs	80003248 <gpio_enable_module_pin+0x1a>
8000323e:	58 2b       	cp.w	r11,2
80003240:	c1 00       	breq	80003260 <gpio_enable_module_pin+0x32>
80003242:	58 3b       	cp.w	r11,3
80003244:	c1 40       	breq	8000326c <gpio_enable_module_pin+0x3e>
80003246:	5e ff       	retal	1
	case 0: /* A function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80003248:	30 19       	mov	r9,1
8000324a:	f2 0c 09 49 	lsl	r9,r9,r12
8000324e:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80003250:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
80003252:	c1 28       	rjmp	80003276 <gpio_enable_module_pin+0x48>

	case 1: /* B function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80003254:	30 19       	mov	r9,1
80003256:	f2 0c 09 49 	lsl	r9,r9,r12
8000325a:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
8000325c:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
8000325e:	c0 c8       	rjmp	80003276 <gpio_enable_module_pin+0x48>

	case 2: /* C function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80003260:	30 19       	mov	r9,1
80003262:	f2 0c 09 49 	lsl	r9,r9,r12
80003266:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80003268:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
8000326a:	c0 68       	rjmp	80003276 <gpio_enable_module_pin+0x48>

	case 3: /* D function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
8000326c:	30 19       	mov	r9,1
8000326e:	f2 0c 09 49 	lsl	r9,r9,r12
80003272:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80003274:	91 99       	st.w	r8[0x24],r9
	default:
		return GPIO_INVALID_ARGUMENT;
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
80003276:	30 19       	mov	r9,1
80003278:	f2 0c 09 4c 	lsl	r12,r9,r12
8000327c:	91 2c       	st.w	r8[0x8],r12
8000327e:	5e fd       	retal	0

80003280 <gpio_enable_module>:
 * \param size The number of pins in \a gpiomap.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
80003280:	d4 21       	pushm	r4-r7,lr
80003282:	18 97       	mov	r7,r12
80003284:	16 94       	mov	r4,r11
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
80003286:	58 0b       	cp.w	r11,0
80003288:	c0 31       	brne	8000328e <gpio_enable_module+0xe>
8000328a:	30 05       	mov	r5,0
8000328c:	c0 d8       	rjmp	800032a6 <gpio_enable_module+0x26>
8000328e:	30 06       	mov	r6,0
80003290:	0c 95       	mov	r5,r6
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
80003292:	6e 1b       	ld.w	r11,r7[0x4]
80003294:	6e 0c       	ld.w	r12,r7[0x0]
80003296:	f0 1f 00 06 	mcall	800032ac <gpio_enable_module+0x2c>
8000329a:	18 45       	or	r5,r12
		gpiomap++;
8000329c:	2f 87       	sub	r7,-8
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
8000329e:	2f f6       	sub	r6,-1
800032a0:	0c 34       	cp.w	r4,r6
800032a2:	fe 9b ff f8 	brhi	80003292 <gpio_enable_module+0x12>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
		gpiomap++;
	}

	return status;
}
800032a6:	0a 9c       	mov	r12,r5
800032a8:	d8 22       	popm	r4-r7,pc
800032aa:	00 00       	add	r0,r0
800032ac:	80 00       	ld.sh	r0,r0[0x0]
800032ae:	32 2e       	mov	lr,34

800032b0 <gpio_set_gpio_pin>:
 *
 * \param pin The pin number.
 */
void gpio_set_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800032b0:	f8 08 16 05 	lsr	r8,r12,0x5
800032b4:	a9 68       	lsl	r8,0x8
800032b6:	e0 28 f0 00 	sub	r8,61440
	
	/* Value to be driven on the I/O line: 1. */
	gpio_port->ovrs  = 1 << (pin & 0x1F);
800032ba:	30 19       	mov	r9,1
800032bc:	f2 0c 09 4c 	lsl	r12,r9,r12
800032c0:	f1 4c 00 54 	st.w	r8[84],r12
	/* The GPIO output driver is enabled for that pin. */ 
	gpio_port->oders = 1 << (pin & 0x1F);
800032c4:	f1 4c 00 44 	st.w	r8[68],r12
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
800032c8:	91 1c       	st.w	r8[0x4],r12
}
800032ca:	5e fc       	retal	r12

800032cc <gpio_clr_gpio_pin>:
 *
 * \param pin The pin number.
 */
void gpio_clr_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800032cc:	f8 08 16 05 	lsr	r8,r12,0x5
800032d0:	a9 68       	lsl	r8,0x8
800032d2:	e0 28 f0 00 	sub	r8,61440
	
	/* Value to be driven on the I/O line: 0. */
	gpio_port->ovrc  = 1 << (pin & 0x1F);
800032d6:	30 19       	mov	r9,1
800032d8:	f2 0c 09 4c 	lsl	r12,r9,r12
800032dc:	f1 4c 00 58 	st.w	r8[88],r12
	/* The GPIO output driver is enabled for that pin. */
	gpio_port->oders = 1 << (pin & 0x1F);
800032e0:	f1 4c 00 44 	st.w	r8[68],r12
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
800032e4:	91 1c       	st.w	r8[0x4],r12
}
800032e6:	5e fc       	retal	r12

800032e8 <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
800032e8:	c0 08       	rjmp	800032e8 <_unhandled_interrupt>
800032ea:	d7 03       	nop

800032ec <INTC_register_interrupt>:
 */
void INTC_register_interrupt(__int_handler handler, uint32_t irq,
	uint32_t int_level)
{
	// Determine the group of the IRQ.
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;
800032ec:	f6 08 16 05 	lsr	r8,r11,0x5

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
		._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP]
800032f0:	49 99       	lddpc	r9,80003354 <INTC_register_interrupt+0x68>
800032f2:	f2 08 00 39 	add	r9,r9,r8<<0x3
800032f6:	f7 db c0 05 	bfextu	r11,r11,0x0,0x5
800032fa:	72 19       	ld.w	r9,r9[0x4]
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
800032fc:	f2 0b 09 2c 	st.w	r9[r11<<0x2],r12
	/* Program the corresponding IPRX register to set the interrupt priority
	level and the interrupt vector offset that will be fetched by the core
	interrupt system.
	NOTE: The _intx functions are intermediate assembly functions between
	the core interrupt system and the user interrupt handler. */
	if (int_level == AVR32_INTC_INT0) {
80003300:	58 0a       	cp.w	r10,0
80003302:	c0 91       	brne	80003314 <INTC_register_interrupt+0x28>
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80003304:	49 59       	lddpc	r9,80003358 <INTC_register_interrupt+0x6c>
80003306:	49 6a       	lddpc	r10,8000335c <INTC_register_interrupt+0x70>
80003308:	12 1a       	sub	r10,r9
8000330a:	fe 79 08 00 	mov	r9,-63488
8000330e:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80003312:	5e fc       	retal	r12
	} else if (int_level == AVR32_INTC_INT1) {
80003314:	58 1a       	cp.w	r10,1
80003316:	c0 a1       	brne	8000332a <INTC_register_interrupt+0x3e>
		AVR32_INTC.ipr[int_grp] = IPR_INT1;
80003318:	49 09       	lddpc	r9,80003358 <INTC_register_interrupt+0x6c>
8000331a:	49 2a       	lddpc	r10,80003360 <INTC_register_interrupt+0x74>
8000331c:	12 1a       	sub	r10,r9
8000331e:	bf aa       	sbr	r10,0x1e
80003320:	fe 79 08 00 	mov	r9,-63488
80003324:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80003328:	5e fc       	retal	r12
	} else if (int_level == AVR32_INTC_INT2) {
8000332a:	58 2a       	cp.w	r10,2
8000332c:	c0 a1       	brne	80003340 <INTC_register_interrupt+0x54>
		AVR32_INTC.ipr[int_grp] = IPR_INT2;
8000332e:	48 b9       	lddpc	r9,80003358 <INTC_register_interrupt+0x6c>
80003330:	48 da       	lddpc	r10,80003364 <INTC_register_interrupt+0x78>
80003332:	12 1a       	sub	r10,r9
80003334:	bf ba       	sbr	r10,0x1f
80003336:	fe 79 08 00 	mov	r9,-63488
8000333a:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
8000333e:	5e fc       	retal	r12
	} else {
		AVR32_INTC.ipr[int_grp] = IPR_INT3;
80003340:	48 69       	lddpc	r9,80003358 <INTC_register_interrupt+0x6c>
80003342:	48 aa       	lddpc	r10,80003368 <INTC_register_interrupt+0x7c>
80003344:	12 1a       	sub	r10,r9
80003346:	ea 1a c0 00 	orh	r10,0xc000
8000334a:	fe 79 08 00 	mov	r9,-63488
8000334e:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80003352:	5e fc       	retal	r12
80003354:	80 00       	ld.sh	r0,r0[0x0]
80003356:	a9 54       	asr	r4,0x9
80003358:	80 00       	ld.sh	r0,r0[0x0]
8000335a:	a6 00       	st.h	r3[0x0],r0
8000335c:	80 00       	ld.sh	r0,r0[0x0]
8000335e:	a7 04       	ld.d	r4,r3
80003360:	80 00       	ld.sh	r0,r0[0x0]
80003362:	a7 12       	ld.d	r2,--r3
80003364:	80 00       	ld.sh	r0,r0[0x0]
80003366:	a7 20       	st.d	r3++,r0
80003368:	80 00       	ld.sh	r0,r0[0x0]
8000336a:	a7 2e       	st.d	r3++,lr

8000336c <INTC_init_interrupts>:
/**
 * \brief Initializes the hardware interrupt controller driver.
 *
 */
void INTC_init_interrupts(void)
{
8000336c:	d4 21       	pushm	r4-r7,lr
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
8000336e:	49 18       	lddpc	r8,800033b0 <INTC_init_interrupts+0x44>
80003370:	e3 b8 00 01 	mtsr	0x4,r8
80003374:	49 0e       	lddpc	lr,800033b4 <INTC_init_interrupts+0x48>
80003376:	30 07       	mov	r7,0
80003378:	0e 94       	mov	r4,r7
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
8000337a:	49 0c       	lddpc	r12,800033b8 <INTC_init_interrupts+0x4c>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
8000337c:	49 05       	lddpc	r5,800033bc <INTC_init_interrupts+0x50>
8000337e:	10 15       	sub	r5,r8
80003380:	fe 76 08 00 	mov	r6,-63488
80003384:	c1 08       	rjmp	800033a4 <INTC_init_interrupts+0x38>
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
80003386:	08 98       	mov	r8,r4
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
				._int_line_handler_table[int_req]
80003388:	7c 1b       	ld.w	r11,lr[0x4]

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
8000338a:	7c 0a       	ld.w	r10,lr[0x0]
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
8000338c:	f6 08 09 2c 	st.w	r11[r8<<0x2],r12
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
80003390:	2f f8       	sub	r8,-1

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80003392:	10 3a       	cp.w	r10,r8
80003394:	fe 9b ff fc 	brhi	8000338c <INTC_init_interrupts+0x20>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80003398:	ec 07 09 25 	st.w	r6[r7<<0x2],r5
	uint32_t int_grp, int_req;

	INTC_init_evba();

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
8000339c:	2f f7       	sub	r7,-1
8000339e:	2f 8e       	sub	lr,-8
800033a0:	59 47       	cp.w	r7,20
800033a2:	c0 50       	breq	800033ac <INTC_init_interrupts+0x40>
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
800033a4:	7c 08       	ld.w	r8,lr[0x0]
800033a6:	58 08       	cp.w	r8,0
800033a8:	ce f1       	brne	80003386 <INTC_init_interrupts+0x1a>
800033aa:	cf 7b       	rjmp	80003398 <INTC_init_interrupts+0x2c>
800033ac:	d8 22       	popm	r4-r7,pc
800033ae:	00 00       	add	r0,r0
800033b0:	80 00       	ld.sh	r0,r0[0x0]
800033b2:	a6 00       	st.h	r3[0x0],r0
800033b4:	80 00       	ld.sh	r0,r0[0x0]
800033b6:	a9 54       	asr	r4,0x9
800033b8:	80 00       	ld.sh	r0,r0[0x0]
800033ba:	32 e8       	mov	r8,46
800033bc:	80 00       	ld.sh	r0,r0[0x0]
800033be:	a7 04       	ld.d	r4,r3

800033c0 <_get_interrupt_handler>:
__int_handler _get_interrupt_handler(uint32_t int_level)
{
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
800033c0:	fe 78 08 00 	mov	r8,-63488
800033c4:	e0 69 00 83 	mov	r9,131
800033c8:	f2 0c 01 0c 	sub	r12,r9,r12
800033cc:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
	uint32_t int_req = AVR32_INTC.irr[int_grp];
800033d0:	f2 ca ff c0 	sub	r10,r9,-64
800033d4:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
800033d8:	58 08       	cp.w	r8,0
800033da:	c0 21       	brne	800033de <_get_interrupt_handler+0x1e>
800033dc:	5e fd       	retal	0
		? _int_handler_table[int_grp]._int_line_handler_table[32
800033de:	f0 08 12 00 	clz	r8,r8
800033e2:	48 5a       	lddpc	r10,800033f4 <_get_interrupt_handler+0x34>
800033e4:	f4 09 00 39 	add	r9,r10,r9<<0x3
800033e8:	f0 08 11 1f 	rsub	r8,r8,31
800033ec:	72 19       	ld.w	r9,r9[0x4]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
800033ee:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
800033f2:	5e fc       	retal	r12
800033f4:	80 00       	ld.sh	r0,r0[0x0]
800033f6:	a9 54       	asr	r4,0x9

800033f8 <pm_set_osc0_mode>:
 * \param mode Oscillator 0 mode (i.e. AVR32_PM_OSCCTRL0_MODE_x).
 */
static void pm_set_osc0_mode(volatile avr32_pm_t *pm, unsigned int mode)
{
  // Read
  u_avr32_pm_oscctrl0_t u_avr32_pm_oscctrl0 = {pm->oscctrl0};
800033f8:	78 a8       	ld.w	r8,r12[0x28]
  // Modify
  u_avr32_pm_oscctrl0.OSCCTRL0.mode = mode;
800033fa:	f1 db d0 03 	bfins	r8,r11,0x0,0x3
  // Write
  pm->oscctrl0 = u_avr32_pm_oscctrl0.oscctrl0;
800033fe:	99 a8       	st.w	r12[0x28],r8
}
80003400:	5e fc       	retal	r12
80003402:	d7 03       	nop

80003404 <pm_enable_osc0_crystal>:
  pm_set_osc0_mode(pm, AVR32_PM_OSCCTRL0_MODE_EXT_CLOCK);
}


void pm_enable_osc0_crystal(volatile avr32_pm_t *pm, unsigned int fosc0)
{
80003404:	d4 01       	pushm	lr
  pm_set_osc0_mode(pm, (fosc0 <  900000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G0 :
80003406:	ec 5b bb 9f 	cp.w	r11,899999
8000340a:	e0 8b 00 04 	brhi	80003412 <pm_enable_osc0_crystal+0xe>
8000340e:	30 4b       	mov	r11,4
80003410:	c1 38       	rjmp	80003436 <pm_enable_osc0_crystal+0x32>
80003412:	e0 68 c6 bf 	mov	r8,50879
80003416:	ea 18 00 2d 	orh	r8,0x2d
8000341a:	10 3b       	cp.w	r11,r8
8000341c:	e0 8b 00 04 	brhi	80003424 <pm_enable_osc0_crystal+0x20>
80003420:	30 5b       	mov	r11,5
80003422:	c0 a8       	rjmp	80003436 <pm_enable_osc0_crystal+0x32>
80003424:	e0 68 12 00 	mov	r8,4608
80003428:	ea 18 00 7a 	orh	r8,0x7a
8000342c:	10 3b       	cp.w	r11,r8
8000342e:	f9 bb 03 06 	movlo	r11,6
80003432:	f9 bb 02 07 	movhs	r11,7
80003436:	f0 1f 00 02 	mcall	8000343c <pm_enable_osc0_crystal+0x38>
                       (fosc0 < 3000000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G1 :
                       (fosc0 < 8000000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G2 :
                                           AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G3);
}
8000343a:	d8 02       	popm	pc
8000343c:	80 00       	ld.sh	r0,r0[0x0]
8000343e:	33 f8       	mov	r8,63

80003440 <pm_enable_clk0_no_wait>:


void pm_enable_clk0_no_wait(volatile avr32_pm_t *pm, unsigned int startup)
{
  // Read register
  u_avr32_pm_oscctrl0_t u_avr32_pm_oscctrl0 = {pm->oscctrl0};
80003440:	78 a8       	ld.w	r8,r12[0x28]
  // Modify
  u_avr32_pm_oscctrl0.OSCCTRL0.startup = startup;
80003442:	f1 db d1 03 	bfins	r8,r11,0x8,0x3
  // Write back
  pm->oscctrl0 = u_avr32_pm_oscctrl0.oscctrl0;
80003446:	99 a8       	st.w	r12[0x28],r8

  pm->mcctrl |= AVR32_PM_MCCTRL_OSC0EN_MASK;
80003448:	78 08       	ld.w	r8,r12[0x0]
8000344a:	a3 a8       	sbr	r8,0x2
8000344c:	99 08       	st.w	r12[0x0],r8
}
8000344e:	5e fc       	retal	r12

80003450 <pm_wait_for_clk0_ready>:


void pm_wait_for_clk0_ready(volatile avr32_pm_t *pm)
{
  while (!(pm->poscsr & AVR32_PM_POSCSR_OSC0RDY_MASK));
80003450:	79 58       	ld.w	r8,r12[0x54]
80003452:	e2 18 00 80 	andl	r8,0x80,COH
80003456:	cf d0       	breq	80003450 <pm_wait_for_clk0_ready>
}
80003458:	5e fc       	retal	r12
8000345a:	d7 03       	nop

8000345c <pm_enable_clk0>:
                                           AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G3);
}


void pm_enable_clk0(volatile avr32_pm_t *pm, unsigned int startup)
{
8000345c:	eb cd 40 80 	pushm	r7,lr
80003460:	18 97       	mov	r7,r12
  pm_enable_clk0_no_wait(pm, startup);
80003462:	f0 1f 00 04 	mcall	80003470 <pm_enable_clk0+0x14>
  pm_wait_for_clk0_ready(pm);
80003466:	0e 9c       	mov	r12,r7
80003468:	f0 1f 00 03 	mcall	80003474 <pm_enable_clk0+0x18>
}
8000346c:	e3 cd 80 80 	ldm	sp++,r7,pc
80003470:	80 00       	ld.sh	r0,r0[0x0]
80003472:	34 40       	mov	r0,68
80003474:	80 00       	ld.sh	r0,r0[0x0]
80003476:	34 50       	mov	r0,69

80003478 <pm_cksel>:
              unsigned int pbasel,
              unsigned int pbbdiv,
              unsigned int pbbsel,
              unsigned int hsbdiv,
              unsigned int hsbsel)
{
80003478:	eb cd 40 d0 	pushm	r4,r6-r7,lr
8000347c:	fa c4 ff f0 	sub	r4,sp,-16
  u_avr32_pm_cksel_t u_avr32_pm_cksel = {0};
80003480:	30 0e       	mov	lr,0

  u_avr32_pm_cksel.CKSEL.cpusel = hsbsel;
80003482:	09 f7       	ld.ub	r7,r4[0x7]
80003484:	ef d7 c0 03 	bfextu	r7,r7,0x0,0x3
80003488:	fd d7 d0 03 	bfins	lr,r7,0x0,0x3
  u_avr32_pm_cksel.CKSEL.cpudiv = hsbdiv;
8000348c:	09 b4       	ld.ub	r4,r4[0x3]
8000348e:	08 96       	mov	r6,r4
80003490:	e9 d4 c0 01 	bfextu	r4,r4,0x0,0x1
80003494:	fd d4 d0 e1 	bfins	lr,r4,0x7,0x1
  u_avr32_pm_cksel.CKSEL.hsbsel = hsbsel;
80003498:	fd d7 d1 03 	bfins	lr,r7,0x8,0x3
  u_avr32_pm_cksel.CKSEL.hsbdiv = hsbdiv;
8000349c:	fd d4 d1 e1 	bfins	lr,r4,0xf,0x1
  u_avr32_pm_cksel.CKSEL.pbasel = pbasel;
800034a0:	fd da d2 03 	bfins	lr,r10,0x10,0x3
  u_avr32_pm_cksel.CKSEL.pbadiv = pbadiv;
800034a4:	fd db d2 e1 	bfins	lr,r11,0x17,0x1
  u_avr32_pm_cksel.CKSEL.pbbsel = pbbsel;
800034a8:	fd d8 d3 03 	bfins	lr,r8,0x18,0x3
  u_avr32_pm_cksel.CKSEL.pbbdiv = pbbdiv;
800034ac:	fd d9 d3 e1 	bfins	lr,r9,0x1f,0x1

  pm->cksel = u_avr32_pm_cksel.cksel;
800034b0:	99 1e       	st.w	r12[0x4],lr

  // Wait for ckrdy bit and then clear it
  while (!(pm->poscsr & AVR32_PM_POSCSR_CKRDY_MASK));
800034b2:	79 58       	ld.w	r8,r12[0x54]
800034b4:	e2 18 00 20 	andl	r8,0x20,COH
800034b8:	cf d0       	breq	800034b2 <pm_cksel+0x3a>
}
800034ba:	e3 cd 80 d0 	ldm	sp++,r4,r6-r7,pc

800034be <pm_pll_setup>:
                  unsigned int pll,
                  unsigned int mul,
                  unsigned int div,
                  unsigned int osc,
                  unsigned int lockcount)
{
800034be:	eb cd 40 80 	pushm	r7,lr
800034c2:	40 27       	lddsp	r7,sp[0x8]
  u_avr32_pm_pll_t u_avr32_pm_pll = {0};
800034c4:	30 0e       	mov	lr,0

  u_avr32_pm_pll.PLL.pllosc   = osc;
800034c6:	fd d8 d0 21 	bfins	lr,r8,0x1,0x1
  u_avr32_pm_pll.PLL.plldiv   = div;
800034ca:	fd d9 d1 04 	bfins	lr,r9,0x8,0x4
  u_avr32_pm_pll.PLL.pllmul   = mul;
800034ce:	fd da d2 04 	bfins	lr,r10,0x10,0x4
  u_avr32_pm_pll.PLL.pllcount = lockcount;
800034d2:	fd d7 d3 06 	bfins	lr,r7,0x18,0x6

  pm->pll[pll] = u_avr32_pm_pll.pll;
800034d6:	2f 8b       	sub	r11,-8
800034d8:	f8 0b 09 2e 	st.w	r12[r11<<0x2],lr
}
800034dc:	e3 cd 80 80 	ldm	sp++,r7,pc

800034e0 <pm_pll_set_option>:
void pm_pll_set_option(volatile avr32_pm_t *pm,
                       unsigned int pll,
                       unsigned int pll_freq,
                       unsigned int pll_div2,
                       unsigned int pll_wbwdisable)
{
800034e0:	d4 01       	pushm	lr
  u_avr32_pm_pll_t u_avr32_pm_pll = {pm->pll[pll]};
800034e2:	2f 8b       	sub	r11,-8
800034e4:	f8 0b 03 2e 	ld.w	lr,r12[r11<<0x2]
  u_avr32_pm_pll.PLL.pllopt = pll_freq | (pll_div2 << 1) | (pll_wbwdisable << 2);
800034e8:	f5 e9 10 19 	or	r9,r10,r9<<0x1
800034ec:	f3 e8 10 28 	or	r8,r9,r8<<0x2
800034f0:	fd d8 d0 43 	bfins	lr,r8,0x2,0x3
  pm->pll[pll] = u_avr32_pm_pll.pll;
800034f4:	f8 0b 09 2e 	st.w	r12[r11<<0x2],lr
}
800034f8:	d8 02       	popm	pc

800034fa <pm_pll_enable>:


void pm_pll_enable(volatile avr32_pm_t *pm,
                  unsigned int pll)
{
  pm->pll[pll] |= AVR32_PM_PLLEN_MASK;
800034fa:	2f 8b       	sub	r11,-8
800034fc:	f8 0b 03 28 	ld.w	r8,r12[r11<<0x2]
80003500:	a1 a8       	sbr	r8,0x0
80003502:	f8 0b 09 28 	st.w	r12[r11<<0x2],r8
}
80003506:	5e fc       	retal	r12

80003508 <pm_wait_for_pll0_locked>:
}


void pm_wait_for_pll0_locked(volatile avr32_pm_t *pm)
{
  while (!(pm->poscsr & AVR32_PM_POSCSR_LOCK0_MASK));
80003508:	79 58       	ld.w	r8,r12[0x54]
8000350a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000350e:	cf d0       	breq	80003508 <pm_wait_for_pll0_locked>
}
80003510:	5e fc       	retal	r12

80003512 <pm_switch_to_clock>:


void pm_switch_to_clock(volatile avr32_pm_t *pm, unsigned long clock)
{
  // Read
  u_avr32_pm_mcctrl_t u_avr32_pm_mcctrl = {pm->mcctrl};
80003512:	78 08       	ld.w	r8,r12[0x0]
  // Modify
  u_avr32_pm_mcctrl.MCCTRL.mcsel = clock;
80003514:	f1 db d0 02 	bfins	r8,r11,0x0,0x2
  // Write back
  pm->mcctrl = u_avr32_pm_mcctrl.mcctrl;
80003518:	99 08       	st.w	r12[0x0],r8
}
8000351a:	5e fc       	retal	r12

8000351c <pm_switch_to_osc0>:


void pm_switch_to_osc0(volatile avr32_pm_t *pm, unsigned int fosc0, unsigned int startup)
{
8000351c:	eb cd 40 c0 	pushm	r6-r7,lr
80003520:	18 97       	mov	r7,r12
80003522:	14 96       	mov	r6,r10
  pm_enable_osc0_crystal(pm, fosc0);            // Enable the Osc0 in crystal mode
80003524:	f0 1f 00 06 	mcall	8000353c <pm_switch_to_osc0+0x20>
  pm_enable_clk0(pm, startup);                  // Crystal startup time - This parameter is critical and depends on the characteristics of the crystal
80003528:	0c 9b       	mov	r11,r6
8000352a:	0e 9c       	mov	r12,r7
8000352c:	f0 1f 00 05 	mcall	80003540 <pm_switch_to_osc0+0x24>
  pm_switch_to_clock(pm, AVR32_PM_MCSEL_OSC0);  // Then switch main clock to Osc0
80003530:	30 1b       	mov	r11,1
80003532:	0e 9c       	mov	r12,r7
80003534:	f0 1f 00 04 	mcall	80003544 <pm_switch_to_osc0+0x28>
}
80003538:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000353c:	80 00       	ld.sh	r0,r0[0x0]
8000353e:	34 04       	mov	r4,64
80003540:	80 00       	ld.sh	r0,r0[0x0]
80003542:	34 5c       	mov	r12,69
80003544:	80 00       	ld.sh	r0,r0[0x0]
80003546:	35 12       	mov	r2,81

80003548 <pm_configure_clocks>:

#define PM_MAX_MUL                ((1 << AVR32_PM_PLL0_PLLMUL_SIZE) - 1)


int pm_configure_clocks(pm_freq_param_t *param)
{
80003548:	eb cd 40 fc 	pushm	r2-r7,lr
8000354c:	18 97       	mov	r7,r12
  //  12    8   1  108     1     54    27
  //  12    9   1  120     1     60    15
  //  12    9   1  120     1     60    30
  //  12   10   1  132     1     66    16.5
  //
  unsigned long in_cpu_f  = param->cpu_f;
8000354e:	78 05       	ld.w	r5,r12[0x0]
  unsigned long in_osc0_f = param->osc0_f;
80003550:	78 26       	ld.w	r6,r12[0x8]
  unsigned long mul, div, div2_en = 0, div2_cpu = 0, div2_pba = 0;
  unsigned long pll_freq, rest;
  bool b_div2_pba, b_div2_cpu;

  // Switch to external Oscillator 0
  pm_switch_to_osc0(&AVR32_PM, in_osc0_f, param->osc0_startup);
80003552:	78 3a       	ld.w	r10,r12[0xc]
80003554:	0c 9b       	mov	r11,r6
80003556:	fe 7c 0c 00 	mov	r12,-62464
8000355a:	f0 1f 00 69 	mcall	800036fc <pm_configure_clocks+0x1b4>

  // Start with CPU freq config
  if (in_cpu_f == in_osc0_f)
8000355e:	0c 35       	cp.w	r5,r6
80003560:	c0 51       	brne	8000356a <pm_configure_clocks+0x22>
  {
    param->cpu_f = in_osc0_f;
80003562:	8f 05       	st.w	r7[0x0],r5
    param->pba_f = in_osc0_f;
80003564:	8f 15       	st.w	r7[0x4],r5
80003566:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0
  else if (in_cpu_f < in_osc0_f)
  {
    // TBD
  }

  rest = in_cpu_f % in_osc0_f;
8000356a:	ea 06 0d 08 	divu	r8,r5,r6
8000356e:	12 9c       	mov	r12,r9

  for (div = 1; div < 32; div++)
  {
    if ((div * rest) % in_osc0_f == 0)
80003570:	f8 06 0d 08 	divu	r8,r12,r6
80003574:	58 09       	cp.w	r9,0
80003576:	c0 31       	brne	8000357c <pm_configure_clocks+0x34>
80003578:	30 19       	mov	r9,1
8000357a:	c1 28       	rjmp	8000359e <pm_configure_clocks+0x56>
8000357c:	f8 08 15 01 	lsl	r8,r12,0x1
80003580:	30 29       	mov	r9,2
80003582:	f0 06 0d 0a 	divu	r10,r8,r6
80003586:	58 0b       	cp.w	r11,0
80003588:	c0 70       	breq	80003596 <pm_configure_clocks+0x4e>
    // TBD
  }

  rest = in_cpu_f % in_osc0_f;

  for (div = 1; div < 32; div++)
8000358a:	2f f9       	sub	r9,-1
8000358c:	18 08       	add	r8,r12
8000358e:	e0 49 00 20 	cp.w	r9,32
80003592:	cf 81       	brne	80003582 <pm_configure_clocks+0x3a>
80003594:	cb 18       	rjmp	800036f6 <pm_configure_clocks+0x1ae>
  {
    if ((div * rest) % in_osc0_f == 0)
      break;
  }
  if (div == 32)
80003596:	e0 49 00 20 	cp.w	r9,32
8000359a:	e0 80 00 ae 	breq	800036f6 <pm_configure_clocks+0x1ae>
    return PM_FREQ_STATUS_FAIL;

  mul = (in_cpu_f * div) / in_osc0_f;
8000359e:	f2 05 02 4b 	mul	r11,r9,r5
800035a2:	f6 06 0d 0a 	divu	r10,r11,r6

  if (mul > PM_MAX_MUL)
800035a6:	58 fa       	cp.w	r10,15
800035a8:	e0 8b 00 a7 	brhi	800036f6 <pm_configure_clocks+0x1ae>
    return PM_FREQ_STATUS_FAIL;

  // export 2power from PLL div to div2_cpu
  while (!(div % 2))
800035ac:	f1 d9 c0 01 	bfextu	r8,r9,0x0,0x1
800035b0:	c0 30       	breq	800035b6 <pm_configure_clocks+0x6e>
800035b2:	30 05       	mov	r5,0
800035b4:	c0 78       	rjmp	800035c2 <pm_configure_clocks+0x7a>
800035b6:	30 05       	mov	r5,0
  {
    div /= 2;
800035b8:	a1 99       	lsr	r9,0x1
    div2_cpu++;
800035ba:	2f f5       	sub	r5,-1

  if (mul > PM_MAX_MUL)
    return PM_FREQ_STATUS_FAIL;

  // export 2power from PLL div to div2_cpu
  while (!(div % 2))
800035bc:	f1 d9 c0 01 	bfextu	r8,r9,0x0,0x1
800035c0:	cf c0       	breq	800035b8 <pm_configure_clocks+0x70>

  // Here we know the mul and div parameter of the PLL config.
  // . Check out if the PLL has a valid in_cpu_f.
  // . Try to have for the PLL frequency (VCO output) the highest possible value
  //   to reduce jitter.
  while (in_osc0_f * 2 * mul / div < AVR32_PM_PLL_VCO_RANGE0_MAX_FREQ)
800035c2:	f4 06 02 4b 	mul	r11,r10,r6
800035c6:	f6 03 15 01 	lsl	r3,r11,0x1
800035ca:	e6 09 0d 02 	divu	r2,r3,r9
800035ce:	e0 6c 1b ff 	mov	r12,7167
800035d2:	ea 1c 0e 4e 	orh	r12,0xe4e
800035d6:	18 32       	cp.w	r2,r12
800035d8:	e0 8b 00 1d 	brhi	80003612 <pm_configure_clocks+0xca>
  {
    if (2 * mul > PM_MAX_MUL)
800035dc:	f4 08 15 01 	lsl	r8,r10,0x1
800035e0:	58 f8       	cp.w	r8,15
800035e2:	e0 88 00 09 	brls	800035f4 <pm_configure_clocks+0xac>
800035e6:	c1 68       	rjmp	80003612 <pm_configure_clocks+0xca>
800035e8:	f0 0a 15 01 	lsl	r10,r8,0x1
800035ec:	58 fa       	cp.w	r10,15
800035ee:	e0 8b 00 11 	brhi	80003610 <pm_configure_clocks+0xc8>
800035f2:	14 98       	mov	r8,r10
      break;
    mul *= 2;
    div2_cpu++;
800035f4:	2f f5       	sub	r5,-1

  // Here we know the mul and div parameter of the PLL config.
  // . Check out if the PLL has a valid in_cpu_f.
  // . Try to have for the PLL frequency (VCO output) the highest possible value
  //   to reduce jitter.
  while (in_osc0_f * 2 * mul / div < AVR32_PM_PLL_VCO_RANGE0_MAX_FREQ)
800035f6:	f0 06 02 4b 	mul	r11,r8,r6
800035fa:	f6 03 15 01 	lsl	r3,r11,0x1
800035fe:	e6 09 0d 02 	divu	r2,r3,r9
80003602:	e0 6c 1b ff 	mov	r12,7167
80003606:	ea 1c 0e 4e 	orh	r12,0xe4e
8000360a:	18 32       	cp.w	r2,r12
8000360c:	fe 98 ff ee 	brls	800035e8 <pm_configure_clocks+0xa0>
80003610:	10 9a       	mov	r10,r8
      break;
    mul *= 2;
    div2_cpu++;
  }

  if (div2_cpu != 0)
80003612:	58 05       	cp.w	r5,0
80003614:	f9 b6 00 00 	moveq	r6,0
  {
    div2_cpu--;
80003618:	f7 b5 01 01 	subne	r5,1
8000361c:	f9 b6 01 01 	movne	r6,1
    div2_en = 1;
  }

  pll_freq = in_osc0_f * mul / (div * (1 << div2_en));
80003620:	f2 06 09 43 	lsl	r3,r9,r6
80003624:	f6 03 0d 02 	divu	r2,r11,r3
80003628:	04 94       	mov	r4,r2

  // Update real CPU Frequency
  param->cpu_f = pll_freq / (1 << div2_cpu);
8000362a:	e4 05 0a 48 	lsr	r8,r2,r5
8000362e:	8f 08       	st.w	r7[0x0],r8
  mul--;

  pm_pll_setup(&AVR32_PM
80003630:	31 08       	mov	r8,16
80003632:	1a d8       	st.w	--sp,r8
80003634:	30 08       	mov	r8,0
80003636:	20 1a       	sub	r10,1
80003638:	10 9b       	mov	r11,r8
8000363a:	fe 7c 0c 00 	mov	r12,-62464
8000363e:	f0 1f 00 31 	mcall	80003700 <pm_configure_clocks+0x1b8>
  , div // div
  , 0   // osc
  , 16  // lockcount
  );

  pm_pll_set_option(&AVR32_PM
80003642:	e0 69 67 ff 	mov	r9,26623
80003646:	ea 19 09 89 	orh	r9,0x989
8000364a:	12 32       	cp.w	r2,r9
8000364c:	5f 8a       	srls	r10
8000364e:	30 08       	mov	r8,0
80003650:	0c 99       	mov	r9,r6
80003652:	10 9b       	mov	r11,r8
80003654:	fe 7c 0c 00 	mov	r12,-62464
80003658:	f0 1f 00 2b 	mcall	80003704 <pm_configure_clocks+0x1bc>
8000365c:	04 98       	mov	r8,r2
8000365e:	30 06       	mov	r6,0
  , div2_en // pll_div2
  , 0 // pll_wbwdisable
  );

  rest = pll_freq;
  while (rest > AVR32_PM_PBA_MAX_FREQ ||
80003660:	2f fd       	sub	sp,-4
80003662:	c0 78       	rjmp	80003670 <pm_configure_clocks+0x128>
         rest != param->pba_f)
  {
    div2_pba++;
80003664:	2f f6       	sub	r6,-1
    rest = pll_freq / (1 << div2_pba);
80003666:	e8 06 0a 48 	lsr	r8,r4,r6
    if (rest < param->pba_f)
8000366a:	6e 19       	ld.w	r9,r7[0x4]
8000366c:	12 38       	cp.w	r8,r9
8000366e:	c0 b3       	brcs	80003684 <pm_configure_clocks+0x13c>
  , div2_en // pll_div2
  , 0 // pll_wbwdisable
  );

  rest = pll_freq;
  while (rest > AVR32_PM_PBA_MAX_FREQ ||
80003670:	e0 6c 14 80 	mov	r12,5248
80003674:	ea 1c 03 ef 	orh	r12,0x3ef
80003678:	18 38       	cp.w	r8,r12
8000367a:	fe 9b ff f5 	brhi	80003664 <pm_configure_clocks+0x11c>
         rest != param->pba_f)
8000367e:	6e 19       	ld.w	r9,r7[0x4]
80003680:	10 39       	cp.w	r9,r8
80003682:	cf 11       	brne	80003664 <pm_configure_clocks+0x11c>
    if (rest < param->pba_f)
      break;
  }

  // Update real PBA Frequency
  param->pba_f = pll_freq / (1 << div2_pba);
80003684:	e8 06 0a 44 	lsr	r4,r4,r6
80003688:	8f 14       	st.w	r7[0x4],r4

  // Enable PLL0
  pm_pll_enable(&AVR32_PM, 0);
8000368a:	30 0b       	mov	r11,0
8000368c:	fe 7c 0c 00 	mov	r12,-62464
80003690:	f0 1f 00 1e 	mcall	80003708 <pm_configure_clocks+0x1c0>

  // Wait for PLL0 locked
  pm_wait_for_pll0_locked(&AVR32_PM);
80003694:	fe 7c 0c 00 	mov	r12,-62464
80003698:	f0 1f 00 1d 	mcall	8000370c <pm_configure_clocks+0x1c4>

  if (div2_cpu)
8000369c:	58 05       	cp.w	r5,0
8000369e:	f9 b9 00 00 	moveq	r9,0
  {
    b_div2_cpu = true;
    div2_cpu--;
800036a2:	f7 b5 01 01 	subne	r5,1
800036a6:	f9 b9 01 01 	movne	r9,1
  }
  else
    b_div2_cpu = false;

  if (div2_pba)
800036aa:	58 06       	cp.w	r6,0
800036ac:	f9 bb 00 00 	moveq	r11,0
  {
    b_div2_pba = true;
    div2_pba--;
800036b0:	f7 b6 01 01 	subne	r6,1
800036b4:	f9 bb 01 01 	movne	r11,1
  }
  else
    b_div2_pba = false;

  pm_cksel(&AVR32_PM
800036b8:	1a d5       	st.w	--sp,r5
800036ba:	1a d9       	st.w	--sp,r9
800036bc:	0a 98       	mov	r8,r5
800036be:	0c 9a       	mov	r10,r6
800036c0:	fe 7c 0c 00 	mov	r12,-62464
800036c4:	f0 1f 00 13 	mcall	80003710 <pm_configure_clocks+0x1c8>
  , b_div2_pba, div2_pba // PBA
  , b_div2_cpu, div2_cpu // PBB
  , b_div2_cpu, div2_cpu // HSB
  );

  if (param->cpu_f > AVR32_FLASHC_FWS_0_MAX_FREQ)
800036c8:	2f ed       	sub	sp,-8
800036ca:	6e 08       	ld.w	r8,r7[0x0]
800036cc:	e0 69 8a 40 	mov	r9,35392
800036d0:	ea 19 01 f7 	orh	r9,0x1f7
800036d4:	12 38       	cp.w	r8,r9
800036d6:	e0 88 00 06 	brls	800036e2 <pm_configure_clocks+0x19a>
  {
    flashc_set_wait_state(1);
800036da:	30 1c       	mov	r12,1
800036dc:	f0 1f 00 0e 	mcall	80003714 <pm_configure_clocks+0x1cc>
800036e0:	c0 48       	rjmp	800036e8 <pm_configure_clocks+0x1a0>
      flashc_issue_command(AVR32_FLASHC_FCMD_CMD_HSDIS, -1);
#endif
  }
  else
  {
    flashc_set_wait_state(0);
800036e2:	30 0c       	mov	r12,0
800036e4:	f0 1f 00 0c 	mcall	80003714 <pm_configure_clocks+0x1cc>
    else
      flashc_issue_command(AVR32_FLASHC_FCMD_CMD_HSDIS, -1);
#endif
  }

  pm_switch_to_clock(&AVR32_PM, AVR32_PM_MCCTRL_MCSEL_PLL0);
800036e8:	30 2b       	mov	r11,2
800036ea:	fe 7c 0c 00 	mov	r12,-62464
800036ee:	f0 1f 00 0b 	mcall	80003718 <pm_configure_clocks+0x1d0>
800036f2:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0

  return PM_FREQ_STATUS_OK;
800036f6:	e3 cf c0 fc 	ldm	sp++,r2-r7,pc,r12=-1
800036fa:	00 00       	add	r0,r0
800036fc:	80 00       	ld.sh	r0,r0[0x0]
800036fe:	35 1c       	mov	r12,81
80003700:	80 00       	ld.sh	r0,r0[0x0]
80003702:	34 be       	mov	lr,75
80003704:	80 00       	ld.sh	r0,r0[0x0]
80003706:	34 e0       	mov	r0,78
80003708:	80 00       	ld.sh	r0,r0[0x0]
8000370a:	34 fa       	mov	r10,79
8000370c:	80 00       	ld.sh	r0,r0[0x0]
8000370e:	35 08       	mov	r8,80
80003710:	80 00       	ld.sh	r0,r0[0x0]
80003712:	34 78       	mov	r8,71
80003714:	80 00       	ld.sh	r0,r0[0x0]
80003716:	32 20       	mov	r0,34
80003718:	80 00       	ld.sh	r0,r0[0x0]
8000371a:	35 12       	mov	r2,81

8000371c <pcl_configure_clocks>:
#if UC3D
static long int pcl_configure_clocks_uc3d(pcl_freq_param_t *param); // FORWARD declaration
#endif

long int pcl_configure_clocks(pcl_freq_param_t *param)
{
8000371c:	d4 01       	pushm	lr
#ifndef AVR32_PM_VERSION_RESETVALUE
  // Implementation for UC3A, UC3A3, UC3B parts.
  return(pm_configure_clocks(param));
8000371e:	f0 1f 00 02 	mcall	80003724 <pcl_configure_clocks+0x8>
  #else
    // Implementation for UC3L parts.
    return(pcl_configure_clocks_uc3l(param));
  #endif
#endif
}
80003722:	d8 02       	popm	pc
80003724:	80 00       	ld.sh	r0,r0[0x0]
80003726:	35 48       	mov	r8,84

80003728 <usart_write_char>:
 *
 * \return \c 1 if the USART Transmit Holding Register is free, otherwise \c 0.
 */
__always_inline static int usart_tx_ready(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_TXRDY_MASK) != 0;
80003728:	78 58       	ld.w	r8,r12[0x14]
}


int usart_write_char(volatile avr32_usart_t *usart, int c)
{
  if (usart_tx_ready(usart))
8000372a:	e2 18 00 02 	andl	r8,0x2,COH
8000372e:	c0 31       	brne	80003734 <usart_write_char+0xc>
80003730:	30 2c       	mov	r12,2
80003732:	5e fc       	retal	r12
  {
    usart->thr = (c << AVR32_USART_THR_TXCHR_OFFSET) & AVR32_USART_THR_TXCHR_MASK;
80003734:	f7 db c0 09 	bfextu	r11,r11,0x0,0x9
80003738:	99 7b       	st.w	r12[0x1c],r11
8000373a:	5e fd       	retal	0

8000373c <usart_putchar>:
    return USART_TX_BUSY;
}


int usart_putchar(volatile avr32_usart_t *usart, int c)
{
8000373c:	eb cd 40 e0 	pushm	r5-r7,lr
80003740:	18 96       	mov	r6,r12
80003742:	16 95       	mov	r5,r11
80003744:	e0 67 27 0f 	mov	r7,9999
80003748:	c0 68       	rjmp	80003754 <usart_putchar+0x18>
  int timeout = USART_DEFAULT_TIMEOUT;

  do
  {
    if (!timeout--) return USART_FAILURE;
8000374a:	58 07       	cp.w	r7,0
8000374c:	c0 31       	brne	80003752 <usart_putchar+0x16>
8000374e:	e3 cf c0 e0 	ldm	sp++,r5-r7,pc,r12=-1
80003752:	20 17       	sub	r7,1
  } while (usart_write_char(usart, c) != USART_SUCCESS);
80003754:	0a 9b       	mov	r11,r5
80003756:	0c 9c       	mov	r12,r6
80003758:	f0 1f 00 03 	mcall	80003764 <usart_putchar+0x28>
8000375c:	cf 71       	brne	8000374a <usart_putchar+0xe>

  return USART_SUCCESS;
}
8000375e:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80003762:	00 00       	add	r0,r0
80003764:	80 00       	ld.sh	r0,r0[0x0]
80003766:	37 28       	mov	r8,114

80003768 <usart_read_char>:

int usart_read_char(volatile avr32_usart_t *usart, int *c)
{
  // Check for errors: frame, parity and overrun. In RS485 mode, a parity error
  // would mean that an address char has been received.
  if (usart->csr & (AVR32_USART_CSR_OVRE_MASK |
80003768:	78 58       	ld.w	r8,r12[0x14]
8000376a:	e2 18 00 e0 	andl	r8,0xe0,COH
8000376e:	c0 30       	breq	80003774 <usart_read_char+0xc>
80003770:	30 4c       	mov	r12,4
80003772:	5e fc       	retal	r12
 *
 * \return \c 1 if the USART Receive Holding Register is full, otherwise \c 0.
 */
__always_inline static int usart_test_hit(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_RXRDY_MASK) != 0;
80003774:	78 58       	ld.w	r8,r12[0x14]
                    AVR32_USART_CSR_FRAME_MASK |
                    AVR32_USART_CSR_PARE_MASK))
    return USART_RX_ERROR;

  // No error; if we really did receive a char, read it and return SUCCESS.
  if (usart_test_hit(usart))
80003776:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000377a:	c0 31       	brne	80003780 <usart_read_char+0x18>
8000377c:	30 3c       	mov	r12,3
8000377e:	5e fc       	retal	r12
  {
    *c = (usart->rhr & AVR32_USART_RHR_RXCHR_MASK) >> AVR32_USART_RHR_RXCHR_OFFSET;
80003780:	78 68       	ld.w	r8,r12[0x18]
80003782:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
80003786:	97 08       	st.w	r11[0x0],r8
80003788:	5e fd       	retal	0
8000378a:	d7 03       	nop

8000378c <usart_getchar>:
    return USART_RX_EMPTY;
}


int usart_getchar(volatile avr32_usart_t *usart)
{
8000378c:	eb cd 40 c0 	pushm	r6-r7,lr
80003790:	20 1d       	sub	sp,4
80003792:	18 96       	mov	r6,r12
  int c, ret;

  while ((ret = usart_read_char(usart, &c)) == USART_RX_EMPTY);
80003794:	1a 97       	mov	r7,sp
80003796:	1a 9b       	mov	r11,sp
80003798:	0c 9c       	mov	r12,r6
8000379a:	f0 1f 00 07 	mcall	800037b4 <usart_getchar+0x28>
8000379e:	58 3c       	cp.w	r12,3
800037a0:	cf b0       	breq	80003796 <usart_getchar+0xa>

  if (ret == USART_RX_ERROR)
800037a2:	58 4c       	cp.w	r12,4
800037a4:	f9 bc 00 ff 	moveq	r12,-1
    return USART_FAILURE;

  return c;
800037a8:	fb fc 10 00 	ld.wne	r12,sp[0x0]
}
800037ac:	2f fd       	sub	sp,-4
800037ae:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800037b2:	00 00       	add	r0,r0
800037b4:	80 00       	ld.sh	r0,r0[0x0]
800037b6:	37 68       	mov	r8,118

800037b8 <vParTestInitialise>:
static volatile unsigned portCHAR ucCurrentOutputValue = partstALL_OUTPUTS_OFF; /*lint !e956 File scope parameters okay here. */

/*-----------------------------------------------------------*/

void vParTestInitialise( void )
{
800037b8:	d4 01       	pushm	lr
	LED_Display(partstALL_OUTPUTS_OFF); /* Start with all LEDs off. */
800037ba:	30 0c       	mov	r12,0
800037bc:	f0 1f 00 02 	mcall	800037c4 <vParTestInitialise+0xc>
}
800037c0:	d8 02       	popm	pc
800037c2:	00 00       	add	r0,r0
800037c4:	80 00       	ld.sh	r0,r0[0x0]
800037c6:	31 28       	mov	r8,18

800037c8 <vListInitialise>:
void vListInitialise( xList *pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
800037c8:	f8 c8 ff f8 	sub	r8,r12,-8
800037cc:	99 18       	st.w	r12[0x4],r8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
800037ce:	3f f9       	mov	r9,-1
800037d0:	99 29       	st.w	r12[0x8],r9

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
800037d2:	99 38       	st.w	r12[0xc],r8
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
800037d4:	99 48       	st.w	r12[0x10],r8

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
800037d6:	30 08       	mov	r8,0
800037d8:	99 08       	st.w	r12[0x0],r8
}
800037da:	5e fc       	retal	r12

800037dc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
800037dc:	30 08       	mov	r8,0
800037de:	99 48       	st.w	r12[0x10],r8
}
800037e0:	5e fc       	retal	r12

800037e2 <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
800037e2:	78 18       	ld.w	r8,r12[0x4]

	pxNewListItem->pxNext = pxIndex->pxNext;
800037e4:	70 19       	ld.w	r9,r8[0x4]
800037e6:	97 19       	st.w	r11[0x4],r9
	pxNewListItem->pxPrevious = pxList->pxIndex;
800037e8:	78 19       	ld.w	r9,r12[0x4]
800037ea:	97 29       	st.w	r11[0x8],r9
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
800037ec:	70 19       	ld.w	r9,r8[0x4]
800037ee:	93 2b       	st.w	r9[0x8],r11
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
800037f0:	91 1b       	st.w	r8[0x4],r11
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
800037f2:	99 1b       	st.w	r12[0x4],r11

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
800037f4:	97 4c       	st.w	r11[0x10],r12

	( pxList->uxNumberOfItems )++;
800037f6:	78 08       	ld.w	r8,r12[0x0]
800037f8:	2f f8       	sub	r8,-1
800037fa:	99 08       	st.w	r12[0x0],r8
}
800037fc:	5e fc       	retal	r12

800037fe <vListInsert>:
{
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
800037fe:	76 0a       	ld.w	r10,r11[0x0]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
80003800:	5b fa       	cp.w	r10,-1
80003802:	c0 31       	brne	80003808 <vListInsert+0xa>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
80003804:	78 48       	ld.w	r8,r12[0x10]
80003806:	c0 c8       	rjmp	8000381e <vListInsert+0x20>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
80003808:	f8 c8 ff f8 	sub	r8,r12,-8
8000380c:	70 19       	ld.w	r9,r8[0x4]
8000380e:	72 09       	ld.w	r9,r9[0x0]
80003810:	12 3a       	cp.w	r10,r9
80003812:	c0 63       	brcs	8000381e <vListInsert+0x20>
80003814:	70 18       	ld.w	r8,r8[0x4]
80003816:	70 19       	ld.w	r9,r8[0x4]
80003818:	72 09       	ld.w	r9,r9[0x0]
8000381a:	12 3a       	cp.w	r10,r9
8000381c:	cf c2       	brcc	80003814 <vListInsert+0x16>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
8000381e:	70 19       	ld.w	r9,r8[0x4]
80003820:	97 19       	st.w	r11[0x4],r9
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
80003822:	93 2b       	st.w	r9[0x8],r11
	pxNewListItem->pxPrevious = pxIterator;
80003824:	97 28       	st.w	r11[0x8],r8
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
80003826:	91 1b       	st.w	r8[0x4],r11

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
80003828:	97 4c       	st.w	r11[0x10],r12

	( pxList->uxNumberOfItems )++;
8000382a:	78 08       	ld.w	r8,r12[0x0]
8000382c:	2f f8       	sub	r8,-1
8000382e:	99 08       	st.w	r12[0x0],r8
}
80003830:	5e fc       	retal	r12

80003832 <vListRemove>:

void vListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
80003832:	78 18       	ld.w	r8,r12[0x4]
80003834:	78 29       	ld.w	r9,r12[0x8]
80003836:	91 29       	st.w	r8[0x8],r9
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
80003838:	78 28       	ld.w	r8,r12[0x8]
8000383a:	78 19       	ld.w	r9,r12[0x4]
8000383c:	91 19       	st.w	r8[0x4],r9

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
8000383e:	78 48       	ld.w	r8,r12[0x10]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
80003840:	70 19       	ld.w	r9,r8[0x4]
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
80003842:	18 39       	cp.w	r9,r12
80003844:	f9 f9 00 02 	ld.weq	r9,r12[0x8]
80003848:	f1 f9 0a 01 	st.weq	r8[0x4],r9
	}

	pxItemToRemove->pvContainer = NULL;
8000384c:	30 09       	mov	r9,0
8000384e:	99 49       	st.w	r12[0x10],r9
	( pxList->uxNumberOfItems )--;
80003850:	70 09       	ld.w	r9,r8[0x0]
80003852:	20 19       	sub	r9,1
80003854:	91 09       	st.w	r8[0x0],r9
}
80003856:	5e fc       	retal	r12

80003858 <pxPortInitialiseStack>:
	/* Setup the initial stack of the task.  The stack is set exactly as
	expected by the portRESTORE_CONTEXT() macro. */

	/* When the task starts, it will expect to find the function parameter in R12. */
	pxTopOfStack--;
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x08080808;					/* R8 */
80003858:	e0 68 08 08 	mov	r8,2056
8000385c:	ea 18 08 08 	orh	r8,0x808
80003860:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x09090909;					/* R9 */
80003862:	e0 68 09 09 	mov	r8,2313
80003866:	ea 18 09 09 	orh	r8,0x909
8000386a:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x0A0A0A0A;					/* R10 */
8000386c:	e0 68 0a 0a 	mov	r8,2570
80003870:	ea 18 0a 0a 	orh	r8,0xa0a
80003874:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x0B0B0B0B;					/* R11 */
80003876:	e0 68 0b 0b 	mov	r8,2827
8000387a:	ea 18 0b 0b 	orh	r8,0xb0b
8000387e:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) pvParameters;					/* R12 */
80003880:	18 da       	st.w	--r12,r10
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0xDEADBEEF;					/* R14/LR */
80003882:	e0 68 be ef 	mov	r8,48879
80003886:	ea 18 de ad 	orh	r8,0xdead
8000388a:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) pxCode + portINSTRUCTION_SIZE; /* R15/PC */
8000388c:	18 db       	st.w	--r12,r11
	*pxTopOfStack-- = ( portSTACK_TYPE ) portINITIAL_SR;				/* SR */
8000388e:	fc 18 00 40 	movh	r8,0x40
80003892:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0xFF0000FF;					/* R0 */
80003894:	e0 68 00 ff 	mov	r8,255
80003898:	ea 18 ff 00 	orh	r8,0xff00
8000389c:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x01010101;					/* R1 */
8000389e:	e0 68 01 01 	mov	r8,257
800038a2:	ea 18 01 01 	orh	r8,0x101
800038a6:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x02020202;					/* R2 */
800038a8:	e0 68 02 02 	mov	r8,514
800038ac:	ea 18 02 02 	orh	r8,0x202
800038b0:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x03030303;					/* R3 */
800038b2:	e0 68 03 03 	mov	r8,771
800038b6:	ea 18 03 03 	orh	r8,0x303
800038ba:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x04040404;					/* R4 */
800038bc:	e0 68 04 04 	mov	r8,1028
800038c0:	ea 18 04 04 	orh	r8,0x404
800038c4:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x05050505;					/* R5 */
800038c6:	e0 68 05 05 	mov	r8,1285
800038ca:	ea 18 05 05 	orh	r8,0x505
800038ce:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x06060606;					/* R6 */
800038d0:	e0 68 06 06 	mov	r8,1542
800038d4:	ea 18 06 06 	orh	r8,0x606
800038d8:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x07070707;					/* R7 */
800038da:	e0 68 07 07 	mov	r8,1799
800038de:	ea 18 07 07 	orh	r8,0x707
800038e2:	18 d8       	st.w	--r12,r8
	*pxTopOfStack = ( portSTACK_TYPE ) portNO_CRITICAL_NESTING;			/* ulCriticalNesting */
800038e4:	30 08       	mov	r8,0
800038e6:	18 d8       	st.w	--r12,r8

	return pxTopOfStack;
}
800038e8:	5e fc       	retal	r12
800038ea:	d7 03       	nop

800038ec <vPortEnterCritical>:
be saved to the stack.  Instead the critical section nesting level is stored
in a variable, which is then saved as part of the stack context. */
__attribute__((__noinline__)) void vPortEnterCritical( void )
{
	/* Disable interrupts */
	portDISABLE_INTERRUPTS();
800038ec:	d3 03       	ssrf	0x10

	/* Now interrupts are disabled ulCriticalNesting can be accessed
	 directly.  Increment ulCriticalNesting to keep a count of how many times
	 portENTER_CRITICAL() has been called. */
	ulCriticalNesting++;
800038ee:	48 38       	lddpc	r8,800038f8 <vPortEnterCritical+0xc>
800038f0:	70 09       	ld.w	r9,r8[0x0]
800038f2:	2f f9       	sub	r9,-1
800038f4:	91 09       	st.w	r8[0x0],r9
}
800038f6:	5e fc       	retal	r12
800038f8:	00 00       	add	r0,r0
800038fa:	00 34       	cp.w	r4,r0

800038fc <xPortStartScheduler>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

portBASE_TYPE xPortStartScheduler( void )
{
800038fc:	d4 01       	pushm	lr
	};

#endif

	/* Disable all interrupt/exception. */
	portDISABLE_INTERRUPTS();
800038fe:	d3 03       	ssrf	0x10
		/* Start the timer/counter. */
		tc_start(tc, configTICK_TC_CHANNEL);
	}
	#else
	{
		INTC_register_interrupt(&vTick, AVR32_CORE_COMPARE_IRQ, AVR32_INTC_INT0);
80003900:	30 0a       	mov	r10,0
80003902:	14 9b       	mov	r11,r10
80003904:	49 2c       	lddpc	r12,8000394c <xPortStartScheduler+0x50>
80003906:	f0 1f 00 13 	mcall	80003950 <xPortStartScheduler+0x54>
/* Schedule the COUNT&COMPARE match interrupt in (configCPU_CLOCK_HZ/configTICK_RATE_HZ)
clock cycles from now. */
#if( configTICK_USE_TC==0 )
	static void prvScheduleFirstTick(void)
	{
		Set_system_register(AVR32_COMPARE, configCPU_CLOCK_HZ/configTICK_RATE_HZ);
8000390a:	e0 68 bb 80 	mov	r8,48000
8000390e:	e3 b8 00 43 	mtsr	0x10c,r8
		Set_system_register(AVR32_COUNT, 0);
80003912:	30 08       	mov	r8,0
80003914:	e3 b8 00 42 	mtsr	0x108,r8
	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();

	/* Start the first task. */
	portRESTORE_CONTEXT();
80003918:	e0 68 07 88 	mov	r8,1928
8000391c:	ea 18 00 00 	orh	r8,0x0
80003920:	70 00       	ld.w	r0,r8[0x0]
80003922:	60 0d       	ld.w	sp,r0[0x0]
80003924:	1b 00       	ld.w	r0,sp++
80003926:	e0 68 00 34 	mov	r8,52
8000392a:	ea 18 00 00 	orh	r8,0x0
8000392e:	91 00       	st.w	r8[0x0],r0
80003930:	e3 cd 00 ff 	ldm	sp++,r0-r7
80003934:	2f ed       	sub	sp,-8
80003936:	e3 cd 5f 00 	ldm	sp++,r8-r12,lr
8000393a:	fa f0 ff e0 	ld.w	r0,sp[-32]
8000393e:	e3 b0 00 00 	mtsr	0x0,r0
80003942:	fa f0 ff dc 	ld.w	r0,sp[-36]
80003946:	fa ff ff e4 	ld.w	pc,sp[-28]

	/* Should not get here! */
	return 0;
}
8000394a:	d8 0a       	popm	pc,r12=0
8000394c:	80 00       	ld.sh	r0,r0[0x0]
8000394e:	3a 18       	mov	r8,-95
80003950:	80 00       	ld.sh	r0,r0[0x0]
80003952:	32 ec       	mov	r12,46

80003954 <SCALLYield>:
/*-----------------------------------------------------------*/
__attribute__((__naked__)) void SCALLYield( void );
__attribute__((__naked__)) void SCALLYield( void )
{
	/* Save the context of the interrupted task. */
	portSAVE_CONTEXT_SCALL();
80003954:	20 6d       	sub	sp,24
80003956:	eb cd 00 ff 	pushm	r0-r7
8000395a:	fa c7 ff c0 	sub	r7,sp,-64
8000395e:	ee f0 ff f8 	ld.w	r0,r7[-8]
80003962:	ef 40 ff e0 	st.w	r7[-32],r0
80003966:	ee f0 ff fc 	ld.w	r0,r7[-4]
8000396a:	ef 40 ff e4 	st.w	r7[-28],r0
8000396e:	eb c7 5f 00 	stm	--r7,r8-r12,lr
80003972:	e0 68 00 34 	mov	r8,52
80003976:	ea 18 00 00 	orh	r8,0x0
8000397a:	70 00       	ld.w	r0,r8[0x0]
8000397c:	1a d0       	st.w	--sp,r0
8000397e:	f0 1f 00 1a 	mcall	800039e4 <LABEL_RET_SCALL_260+0x14>
80003982:	e0 68 07 88 	mov	r8,1928
80003986:	ea 18 00 00 	orh	r8,0x0
8000398a:	70 00       	ld.w	r0,r8[0x0]
8000398c:	81 0d       	st.w	r0[0x0],sp
	vTaskSwitchContext();
8000398e:	f0 1f 00 17 	mcall	800039e8 <LABEL_RET_SCALL_260+0x18>
	portRESTORE_CONTEXT_SCALL();
80003992:	e0 68 07 88 	mov	r8,1928
80003996:	ea 18 00 00 	orh	r8,0x0
8000399a:	70 00       	ld.w	r0,r8[0x0]
8000399c:	60 0d       	ld.w	sp,r0[0x0]
8000399e:	1b 00       	ld.w	r0,sp++
800039a0:	e0 68 00 34 	mov	r8,52
800039a4:	ea 18 00 00 	orh	r8,0x0
800039a8:	91 00       	st.w	r8[0x0],r0
800039aa:	fa c7 ff d8 	sub	r7,sp,-40
800039ae:	e3 c7 5f 00 	ldm	r7++,r8-r12,lr
800039b2:	ee f0 ff e0 	ld.w	r0,r7[-32]
800039b6:	e0 61 00 34 	mov	r1,52
800039ba:	ea 11 00 00 	orh	r1,0x0
800039be:	62 02       	ld.w	r2,r1[0x0]
800039c0:	58 02       	cp.w	r2,0
800039c2:	c0 70       	breq	800039d0 <LABEL_RET_SCALL_260>
800039c4:	e4 c2 00 01 	sub	r2,r2,1
800039c8:	83 02       	st.w	r1[0x0],r2
800039ca:	58 02       	cp.w	r2,0
800039cc:	c0 21       	brne	800039d0 <LABEL_RET_SCALL_260>
800039ce:	b1 c0       	cbr	r0,0x10

800039d0 <LABEL_RET_SCALL_260>:
800039d0:	ef 40 ff f8 	st.w	r7[-8],r0
800039d4:	ee f0 ff e4 	ld.w	r0,r7[-28]
800039d8:	ef 40 ff fc 	st.w	r7[-4],r0
800039dc:	e3 cd 00 ff 	ldm	sp++,r0-r7
800039e0:	2f ad       	sub	sp,-24
800039e2:	d6 13       	rets
800039e4:	80 00       	ld.sh	r0,r0[0x0]
800039e6:	38 ec       	mov	r12,-114
800039e8:	80 00       	ld.sh	r0,r0[0x0]
800039ea:	40 00       	lddsp	r0,sp[0x0]

800039ec <prvClearCcInt>:
		Set_system_register(AVR32_COUNT, 0);
	}

	__attribute__((__noinline__)) static void prvClearCcInt(void)
	{
		Set_system_register(AVR32_COMPARE, Get_system_register(AVR32_COMPARE));
800039ec:	e1 b8 00 43 	mfsr	r8,0x10c
800039f0:	e3 b8 00 43 	mtsr	0x10c,r8
	}
800039f4:	5e fc       	retal	r12
800039f6:	d7 03       	nop

800039f8 <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

__attribute__((__noinline__)) void vPortExitCritical( void )
{
	if(ulCriticalNesting > portNO_CRITICAL_NESTING)
800039f8:	48 78       	lddpc	r8,80003a14 <vPortExitCritical+0x1c>
800039fa:	70 08       	ld.w	r8,r8[0x0]
800039fc:	58 08       	cp.w	r8,0
800039fe:	5e 0c       	reteq	r12
	{
		ulCriticalNesting--;
80003a00:	48 58       	lddpc	r8,80003a14 <vPortExitCritical+0x1c>
80003a02:	70 09       	ld.w	r9,r8[0x0]
80003a04:	20 19       	sub	r9,1
80003a06:	91 09       	st.w	r8[0x0],r9
		if( ulCriticalNesting == portNO_CRITICAL_NESTING )
80003a08:	70 08       	ld.w	r8,r8[0x0]
80003a0a:	58 08       	cp.w	r8,0
80003a0c:	5e 1c       	retne	r12
		{
			/* Enable all interrupt/exception. */
			portENABLE_INTERRUPTS();
80003a0e:	d5 03       	csrf	0x10
80003a10:	5e fc       	retal	r12
80003a12:	00 00       	add	r0,r0
80003a14:	00 00       	add	r0,r0
80003a16:	00 34       	cp.w	r4,r0

80003a18 <vTick>:
/* The preemptive scheduler is defined as "naked" as the full context is saved
on entry as part of the context switch. */
__attribute__((__naked__)) static void vTick( void )
{
	/* Save the context of the interrupted task. */
	portSAVE_CONTEXT_OS_INT();
80003a18:	eb cd 00 ff 	pushm	r0-r7
80003a1c:	e0 68 00 34 	mov	r8,52
80003a20:	ea 18 00 00 	orh	r8,0x0
80003a24:	70 00       	ld.w	r0,r8[0x0]
80003a26:	1a d0       	st.w	--sp,r0
80003a28:	7a 90       	ld.w	r0,sp[0x24]
80003a2a:	e1 d0 c2 c3 	bfextu	r0,r0,0x16,0x3
80003a2e:	58 10       	cp.w	r0,1
80003a30:	e0 8b 00 08 	brhi	80003a40 <LABEL_INT_SKIP_SAVE_CONTEXT_234>
80003a34:	e0 68 07 88 	mov	r8,1928
80003a38:	ea 18 00 00 	orh	r8,0x0
80003a3c:	70 00       	ld.w	r0,r8[0x0]
80003a3e:	81 0d       	st.w	r0[0x0],sp

80003a40 <LABEL_INT_SKIP_SAVE_CONTEXT_234>:
	#if( configTICK_USE_TC==1 )
		/* Clear the interrupt flag. */
		prvClearTcInt();
	#else
		/* Clear the interrupt flag. */
		prvClearCcInt();
80003a40:	f0 1f 00 12 	mcall	80003a88 <LABEL_INT_SKIP_RESTORE_CONTEXT_251+0x14>
	#endif

	/* Because FreeRTOS is not supposed to run with nested interrupts, put all OS
	calls in a critical section . */
	portENTER_CRITICAL();
80003a44:	f0 1f 00 12 	mcall	80003a8c <LABEL_INT_SKIP_RESTORE_CONTEXT_251+0x18>
		vTaskIncrementTick();
80003a48:	f0 1f 00 12 	mcall	80003a90 <LABEL_INT_SKIP_RESTORE_CONTEXT_251+0x1c>
	portEXIT_CRITICAL();
80003a4c:	f0 1f 00 12 	mcall	80003a94 <LABEL_INT_SKIP_RESTORE_CONTEXT_251+0x20>

	/* Restore the context of the "elected task". */
	portRESTORE_CONTEXT_OS_INT();
80003a50:	7a 90       	ld.w	r0,sp[0x24]
80003a52:	e1 d0 c2 c3 	bfextu	r0,r0,0x16,0x3
80003a56:	58 10       	cp.w	r0,1
80003a58:	e0 8b 00 0e 	brhi	80003a74 <LABEL_INT_SKIP_RESTORE_CONTEXT_251>
80003a5c:	f0 1f 00 0c 	mcall	80003a8c <LABEL_INT_SKIP_RESTORE_CONTEXT_251+0x18>
80003a60:	f0 1f 00 0e 	mcall	80003a98 <LABEL_INT_SKIP_RESTORE_CONTEXT_251+0x24>
80003a64:	f0 1f 00 0c 	mcall	80003a94 <LABEL_INT_SKIP_RESTORE_CONTEXT_251+0x20>
80003a68:	e0 68 07 88 	mov	r8,1928
80003a6c:	ea 18 00 00 	orh	r8,0x0
80003a70:	70 00       	ld.w	r0,r8[0x0]
80003a72:	60 0d       	ld.w	sp,r0[0x0]

80003a74 <LABEL_INT_SKIP_RESTORE_CONTEXT_251>:
80003a74:	1b 00       	ld.w	r0,sp++
80003a76:	e0 68 00 34 	mov	r8,52
80003a7a:	ea 18 00 00 	orh	r8,0x0
80003a7e:	91 00       	st.w	r8[0x0],r0
80003a80:	e3 cd 00 ff 	ldm	sp++,r0-r7
80003a84:	d6 03       	rete
80003a86:	00 00       	add	r0,r0
80003a88:	80 00       	ld.sh	r0,r0[0x0]
80003a8a:	39 ec       	mov	r12,-98
80003a8c:	80 00       	ld.sh	r0,r0[0x0]
80003a8e:	38 ec       	mov	r12,-114
80003a90:	80 00       	ld.sh	r0,r0[0x0]
80003a92:	42 6c       	lddsp	r12,sp[0x98]
80003a94:	80 00       	ld.sh	r0,r0[0x0]
80003a96:	39 f8       	mov	r8,-97
80003a98:	80 00       	ld.sh	r0,r0[0x0]
80003a9a:	40 00       	lddsp	r0,sp[0x0]

80003a9c <__malloc_lock>:
 * safe section as memory allocation management uses global data.
 * See the aforementioned details.
 */
void __malloc_lock(struct _reent *ptr);
void __malloc_lock(struct _reent *ptr)
{
80003a9c:	d4 01       	pushm	lr
	vTaskSuspendAll();
80003a9e:	f0 1f 00 02 	mcall	80003aa4 <__malloc_lock+0x8>
}
80003aa2:	d8 02       	popm	pc
80003aa4:	80 00       	ld.sh	r0,r0[0x0]
80003aa6:	3f f0       	mov	r0,-1

80003aa8 <__malloc_unlock>:
 * a safe section as memory allocation management uses global data.
 * See the aforementioned details.
 */
void __malloc_unlock(struct _reent *ptr);
void __malloc_unlock(struct _reent *ptr)
{
80003aa8:	d4 01       	pushm	lr
	xTaskResumeAll();
80003aaa:	f0 1f 00 02 	mcall	80003ab0 <__malloc_unlock+0x8>
}
80003aae:	d8 02       	popm	pc
80003ab0:	80 00       	ld.sh	r0,r0[0x0]
80003ab2:	43 f0       	lddsp	r0,sp[0xfc]

80003ab4 <_init_startup>:
 * exception vectors are not compatible with the SCALL management in the current
 * FreeRTOS port. More low-level initializations are besides added here.
 */
int _init_startup(void);
int _init_startup(void)
{
80003ab4:	d4 01       	pushm	lr
		extern void __heap_end__;
		portBASE_TYPE *pxMem;
	#endif

	/* Load the Exception Vector Base Address in the corresponding system register. */
	Set_system_register( AVR32_EVBA, ( int ) &_evba );
80003ab6:	48 48       	lddpc	r8,80003ac4 <_init_startup+0x10>
80003ab8:	e3 b8 00 01 	mtsr	0x4,r8

	/* Enable exceptions. */
	ENABLE_ALL_EXCEPTIONS();
80003abc:	d5 53       	csrf	0x15

	/* Initialize interrupt handling. */
	INTC_init_interrupts();
80003abe:	f0 1f 00 03 	mcall	80003ac8 <_init_startup+0x14>
	}
	#endif

  // Don't-care value for GCC.
  return 1;
}
80003ac2:	da 0a       	popm	pc,r12=1
80003ac4:	80 00       	ld.sh	r0,r0[0x0]
80003ac6:	a6 00       	st.h	r3[0x0],r0
80003ac8:	80 00       	ld.sh	r0,r0[0x0]
80003aca:	33 6c       	mov	r12,54

80003acc <_read>:
/**
 * Low-level read command.
 */
int __attribute__((weak))
_read (int file, char * ptr, int len)
{
80003acc:	d4 21       	pushm	r4-r7,lr
80003ace:	16 95       	mov	r5,r11
80003ad0:	14 96       	mov	r6,r10
  int nChars = 0;

  if (file != 0)
80003ad2:	58 0c       	cp.w	r12,0
80003ad4:	c0 30       	breq	80003ada <_read+0xe>
80003ad6:	3f f7       	mov	r7,-1
80003ad8:	c1 48       	rjmp	80003b00 <_read+0x34>
    return -1;

  for (; len > 0; --len)
80003ada:	58 0a       	cp.w	r10,0
80003adc:	e0 89 00 04 	brgt	80003ae4 <_read+0x18>
80003ae0:	30 07       	mov	r7,0
80003ae2:	c0 f8       	rjmp	80003b00 <_read+0x34>
80003ae4:	30 07       	mov	r7,0
  {
    int c = usart_getchar(stdio_usart_base);
80003ae6:	48 84       	lddpc	r4,80003b04 <_read+0x38>
80003ae8:	68 0c       	ld.w	r12,r4[0x0]
80003aea:	f0 1f 00 08 	mcall	80003b08 <_read+0x3c>
    if (c < 0)
80003aee:	c0 95       	brlt	80003b00 <_read+0x34>
      break;

    *ptr++ = c;
80003af0:	ea 07 0b 0c 	st.b	r5[r7],r12
    ++nChars;
80003af4:	2f f7       	sub	r7,-1

/**
 * Low-level read command.
 */
int __attribute__((weak))
_read (int file, char * ptr, int len)
80003af6:	ec 07 01 08 	sub	r8,r6,r7
  int nChars = 0;

  if (file != 0)
    return -1;

  for (; len > 0; --len)
80003afa:	58 08       	cp.w	r8,0
80003afc:	fe 99 ff f6 	brgt	80003ae8 <_read+0x1c>
    *ptr++ = c;
    ++nChars;
  }

  return nChars;
}
80003b00:	0e 9c       	mov	r12,r7
80003b02:	d8 22       	popm	r4-r7,pc
80003b04:	00 00       	add	r0,r0
80003b06:	08 30       	cp.w	r0,r4
80003b08:	80 00       	ld.sh	r0,r0[0x0]
80003b0a:	37 8c       	mov	r12,120

80003b0c <_write>:
 * 1 and 2 is stdout and stderr which goes to usart
 * 3 is framebuffer
 */
int __attribute__((weak))
_write (int file, char * ptr, int len)
{
80003b0c:	d4 21       	pushm	r4-r7,lr
80003b0e:	16 95       	mov	r5,r11
80003b10:	14 96       	mov	r6,r10
  int nChars = 0;

  if ( (file != 1)
80003b12:	20 1c       	sub	r12,1
80003b14:	58 2c       	cp.w	r12,2
80003b16:	e0 8b 00 12 	brhi	80003b3a <_write+0x2e>
       && (file != 2) && (file!=3))
    return -1;

  for (; len != 0; --len)
80003b1a:	58 0a       	cp.w	r10,0
80003b1c:	c0 31       	brne	80003b22 <_write+0x16>
80003b1e:	30 07       	mov	r7,0
80003b20:	c0 e8       	rjmp	80003b3c <_write+0x30>
80003b22:	30 07       	mov	r7,0
  {
    if (usart_putchar(stdio_usart_base, *ptr++) < 0)
80003b24:	48 74       	lddpc	r4,80003b40 <_write+0x34>
80003b26:	68 0c       	ld.w	r12,r4[0x0]
80003b28:	ea 07 07 0b 	ld.ub	r11,r5[r7]
80003b2c:	f0 1f 00 06 	mcall	80003b44 <_write+0x38>
80003b30:	c0 55       	brlt	80003b3a <_write+0x2e>
    {
      return -1;
    }

    ++nChars;
80003b32:	2f f7       	sub	r7,-1

  if ( (file != 1)
       && (file != 2) && (file!=3))
    return -1;

  for (; len != 0; --len)
80003b34:	0e 36       	cp.w	r6,r7
80003b36:	cf 81       	brne	80003b26 <_write+0x1a>
80003b38:	c0 28       	rjmp	80003b3c <_write+0x30>
80003b3a:	3f f7       	mov	r7,-1

    ++nChars;
  }

  return nChars;
}
80003b3c:	0e 9c       	mov	r12,r7
80003b3e:	d8 22       	popm	r4-r7,pc
80003b40:	00 00       	add	r0,r0
80003b42:	08 30       	cp.w	r0,r4
80003b44:	80 00       	ld.sh	r0,r0[0x0]
80003b46:	37 3c       	mov	r12,115

80003b48 <vPortFree>:
	return pvReturn;
}
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
80003b48:	eb cd 40 80 	pushm	r7,lr
80003b4c:	18 97       	mov	r7,r12
	if( pv )
80003b4e:	58 0c       	cp.w	r12,0
80003b50:	c0 80       	breq	80003b60 <vPortFree+0x18>
	{
		vTaskSuspendAll();
80003b52:	f0 1f 00 05 	mcall	80003b64 <vPortFree+0x1c>
		{
			free( pv );
80003b56:	0e 9c       	mov	r12,r7
80003b58:	f0 1f 00 04 	mcall	80003b68 <vPortFree+0x20>
		}
		xTaskResumeAll();
80003b5c:	f0 1f 00 04 	mcall	80003b6c <vPortFree+0x24>
80003b60:	e3 cd 80 80 	ldm	sp++,r7,pc
80003b64:	80 00       	ld.sh	r0,r0[0x0]
80003b66:	3f f0       	mov	r0,-1
80003b68:	80 00       	ld.sh	r0,r0[0x0]
80003b6a:	49 68       	lddpc	r8,80003bc0 <prvCopyDataFromQueue+0x28>
80003b6c:	80 00       	ld.sh	r0,r0[0x0]
80003b6e:	43 f0       	lddsp	r0,sp[0xfc]

80003b70 <pvPortMalloc>:
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
80003b70:	eb cd 40 80 	pushm	r7,lr
80003b74:	18 97       	mov	r7,r12
void *pvReturn;

	vTaskSuspendAll();
80003b76:	f0 1f 00 06 	mcall	80003b8c <pvPortMalloc+0x1c>
	{
		pvReturn = malloc( xWantedSize );
80003b7a:	0e 9c       	mov	r12,r7
80003b7c:	f0 1f 00 05 	mcall	80003b90 <pvPortMalloc+0x20>
80003b80:	18 97       	mov	r7,r12
	}
	xTaskResumeAll();
80003b82:	f0 1f 00 05 	mcall	80003b94 <pvPortMalloc+0x24>
		}
	}
	#endif

	return pvReturn;
}
80003b86:	0e 9c       	mov	r12,r7
80003b88:	e3 cd 80 80 	ldm	sp++,r7,pc
80003b8c:	80 00       	ld.sh	r0,r0[0x0]
80003b8e:	3f f0       	mov	r0,-1
80003b90:	80 00       	ld.sh	r0,r0[0x0]
80003b92:	49 78       	lddpc	r8,80003bec <prvUnlockQueue+0x24>
80003b94:	80 00       	ld.sh	r0,r0[0x0]
80003b96:	43 f0       	lddsp	r0,sp[0xfc]

80003b98 <prvCopyDataFromQueue>:
	++( pxQueue->uxMessagesWaiting );
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
80003b98:	d4 01       	pushm	lr
80003b9a:	16 98       	mov	r8,r11
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
80003b9c:	78 09       	ld.w	r9,r12[0x0]
80003b9e:	58 09       	cp.w	r9,0
80003ba0:	c1 10       	breq	80003bc2 <prvCopyDataFromQueue+0x2a>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
80003ba2:	78 3a       	ld.w	r10,r12[0xc]
80003ba4:	79 09       	ld.w	r9,r12[0x40]
80003ba6:	f4 09 00 09 	add	r9,r10,r9
80003baa:	99 39       	st.w	r12[0xc],r9
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
80003bac:	78 1a       	ld.w	r10,r12[0x4]
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
80003bae:	14 39       	cp.w	r9,r10
80003bb0:	f9 f9 20 00 	ld.wcc	r9,r12[0x0]
80003bb4:	f9 f9 2a 03 	st.wcc	r12[0xc],r9
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
80003bb8:	79 0a       	ld.w	r10,r12[0x40]
80003bba:	78 3b       	ld.w	r11,r12[0xc]
80003bbc:	10 9c       	mov	r12,r8
80003bbe:	f0 1f 00 02 	mcall	80003bc4 <prvCopyDataFromQueue+0x2c>
80003bc2:	d8 02       	popm	pc
80003bc4:	80 00       	ld.sh	r0,r0[0x0]
80003bc6:	4d c0       	lddpc	r0,80003d34 <xQueueGenericReceive+0xcc>

80003bc8 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
80003bc8:	eb cd 40 c0 	pushm	r6-r7,lr
80003bcc:	18 97       	mov	r7,r12

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
80003bce:	f0 1f 00 23 	mcall	80003c58 <prvUnlockQueue+0x90>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
80003bd2:	6f 28       	ld.w	r8,r7[0x48]
80003bd4:	58 08       	cp.w	r8,0
80003bd6:	e0 8a 00 18 	brle	80003c06 <prvUnlockQueue+0x3e>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
80003bda:	6e 98       	ld.w	r8,r7[0x24]
80003bdc:	58 08       	cp.w	r8,0
80003bde:	c1 40       	breq	80003c06 <prvUnlockQueue+0x3e>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
80003be0:	ee c6 ff dc 	sub	r6,r7,-36
80003be4:	c0 48       	rjmp	80003bec <prvUnlockQueue+0x24>
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
80003be6:	6e 98       	ld.w	r8,r7[0x24]
80003be8:	58 08       	cp.w	r8,0
80003bea:	c0 e0       	breq	80003c06 <prvUnlockQueue+0x3e>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
80003bec:	0c 9c       	mov	r12,r6
80003bee:	f0 1f 00 1c 	mcall	80003c5c <prvUnlockQueue+0x94>
80003bf2:	c0 30       	breq	80003bf8 <prvUnlockQueue+0x30>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
80003bf4:	f0 1f 00 1b 	mcall	80003c60 <prvUnlockQueue+0x98>
				}

				--( pxQueue->xTxLock );
80003bf8:	6f 28       	ld.w	r8,r7[0x48]
80003bfa:	20 18       	sub	r8,1
80003bfc:	ef 48 00 48 	st.w	r7[72],r8
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
80003c00:	58 08       	cp.w	r8,0
80003c02:	fe 99 ff f2 	brgt	80003be6 <prvUnlockQueue+0x1e>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
80003c06:	3f f8       	mov	r8,-1
80003c08:	ef 48 00 48 	st.w	r7[72],r8
	}
	taskEXIT_CRITICAL();
80003c0c:	f0 1f 00 16 	mcall	80003c64 <prvUnlockQueue+0x9c>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
80003c10:	f0 1f 00 12 	mcall	80003c58 <prvUnlockQueue+0x90>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
80003c14:	6f 18       	ld.w	r8,r7[0x44]
80003c16:	58 08       	cp.w	r8,0
80003c18:	e0 8a 00 18 	brle	80003c48 <prvUnlockQueue+0x80>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
80003c1c:	6e 48       	ld.w	r8,r7[0x10]
80003c1e:	58 08       	cp.w	r8,0
80003c20:	c1 40       	breq	80003c48 <prvUnlockQueue+0x80>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
80003c22:	ee c6 ff f0 	sub	r6,r7,-16
80003c26:	c0 48       	rjmp	80003c2e <prvUnlockQueue+0x66>
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
80003c28:	6e 48       	ld.w	r8,r7[0x10]
80003c2a:	58 08       	cp.w	r8,0
80003c2c:	c0 e0       	breq	80003c48 <prvUnlockQueue+0x80>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
80003c2e:	0c 9c       	mov	r12,r6
80003c30:	f0 1f 00 0b 	mcall	80003c5c <prvUnlockQueue+0x94>
80003c34:	c0 30       	breq	80003c3a <prvUnlockQueue+0x72>
				{
					vTaskMissedYield();
80003c36:	f0 1f 00 0b 	mcall	80003c60 <prvUnlockQueue+0x98>
				}

				--( pxQueue->xRxLock );
80003c3a:	6f 18       	ld.w	r8,r7[0x44]
80003c3c:	20 18       	sub	r8,1
80003c3e:	ef 48 00 44 	st.w	r7[68],r8
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
80003c42:	58 08       	cp.w	r8,0
80003c44:	fe 99 ff f2 	brgt	80003c28 <prvUnlockQueue+0x60>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
80003c48:	3f f8       	mov	r8,-1
80003c4a:	ef 48 00 44 	st.w	r7[68],r8
	}
	taskEXIT_CRITICAL();
80003c4e:	f0 1f 00 06 	mcall	80003c64 <prvUnlockQueue+0x9c>
}
80003c52:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80003c56:	00 00       	add	r0,r0
80003c58:	80 00       	ld.sh	r0,r0[0x0]
80003c5a:	38 ec       	mov	r12,-114
80003c5c:	80 00       	ld.sh	r0,r0[0x0]
80003c5e:	41 f0       	lddsp	r0,sp[0x7c]
80003c60:	80 00       	ld.sh	r0,r0[0x0]
80003c62:	40 fc       	lddsp	r12,sp[0x3c]
80003c64:	80 00       	ld.sh	r0,r0[0x0]
80003c66:	39 f8       	mov	r8,-97

80003c68 <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
80003c68:	d4 31       	pushm	r0-r7,lr
80003c6a:	20 5d       	sub	sp,20
80003c6c:	18 97       	mov	r7,r12
80003c6e:	50 0b       	stdsp	sp[0x0],r11
80003c70:	50 2a       	stdsp	sp[0x8],r10
80003c72:	50 19       	stdsp	sp[0x4],r9
						portEXIT_CRITICAL();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
80003c74:	f8 c2 ff dc 	sub	r2,r12,-36
80003c78:	30 05       	mov	r5,0
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
80003c7a:	fa c4 ff f4 	sub	r4,sp,-12
80003c7e:	30 10       	mov	r0,1

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
		prvLockQueue( pxQueue );
80003c80:	0a 91       	mov	r1,r5

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
80003c82:	fa c3 ff f8 	sub	r3,sp,-8
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
80003c86:	f0 1f 00 3e 	mcall	80003d7c <xQueueGenericReceive+0x114>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
80003c8a:	6e e8       	ld.w	r8,r7[0x38]
80003c8c:	58 08       	cp.w	r8,0
80003c8e:	c2 a0       	breq	80003ce2 <xQueueGenericReceive+0x7a>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
80003c90:	6e 36       	ld.w	r6,r7[0xc]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
80003c92:	40 0b       	lddsp	r11,sp[0x0]
80003c94:	0e 9c       	mov	r12,r7
80003c96:	f0 1f 00 3b 	mcall	80003d80 <xQueueGenericReceive+0x118>

				if( xJustPeeking == pdFALSE )
80003c9a:	40 18       	lddsp	r8,sp[0x4]
80003c9c:	58 08       	cp.w	r8,0
80003c9e:	c1 51       	brne	80003cc8 <xQueueGenericReceive+0x60>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
80003ca0:	6e e8       	ld.w	r8,r7[0x38]
80003ca2:	20 18       	sub	r8,1
80003ca4:	8f e8       	st.w	r7[0x38],r8

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
80003ca6:	6e 08       	ld.w	r8,r7[0x0]
80003ca8:	58 08       	cp.w	r8,0
80003caa:	c0 41       	brne	80003cb2 <xQueueGenericReceive+0x4a>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
80003cac:	f0 1f 00 36 	mcall	80003d84 <xQueueGenericReceive+0x11c>
80003cb0:	8f 1c       	st.w	r7[0x4],r12
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
80003cb2:	6e 48       	ld.w	r8,r7[0x10]
80003cb4:	58 08       	cp.w	r8,0
80003cb6:	c1 20       	breq	80003cda <xQueueGenericReceive+0x72>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
80003cb8:	ee cc ff f0 	sub	r12,r7,-16
80003cbc:	f0 1f 00 33 	mcall	80003d88 <xQueueGenericReceive+0x120>
80003cc0:	58 1c       	cp.w	r12,1
80003cc2:	c0 c1       	brne	80003cda <xQueueGenericReceive+0x72>
						{
							portYIELD_WITHIN_API();
80003cc4:	d7 33       	scall
80003cc6:	c0 a8       	rjmp	80003cda <xQueueGenericReceive+0x72>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
80003cc8:	8f 36       	st.w	r7[0xc],r6

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
80003cca:	6e 98       	ld.w	r8,r7[0x24]
80003ccc:	58 08       	cp.w	r8,0
80003cce:	c0 60       	breq	80003cda <xQueueGenericReceive+0x72>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
80003cd0:	04 9c       	mov	r12,r2
80003cd2:	f0 1f 00 2e 	mcall	80003d88 <xQueueGenericReceive+0x120>
80003cd6:	c0 20       	breq	80003cda <xQueueGenericReceive+0x72>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
80003cd8:	d7 33       	scall
						}
					}

				}

				taskEXIT_CRITICAL();
80003cda:	f0 1f 00 2d 	mcall	80003d8c <xQueueGenericReceive+0x124>
80003cde:	30 1c       	mov	r12,1
				return pdPASS;
80003ce0:	c4 c8       	rjmp	80003d78 <xQueueGenericReceive+0x110>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
80003ce2:	40 28       	lddsp	r8,sp[0x8]
80003ce4:	58 08       	cp.w	r8,0
80003ce6:	c0 51       	brne	80003cf0 <xQueueGenericReceive+0x88>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
80003ce8:	f0 1f 00 29 	mcall	80003d8c <xQueueGenericReceive+0x124>
80003cec:	30 0c       	mov	r12,0
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
80003cee:	c4 58       	rjmp	80003d78 <xQueueGenericReceive+0x110>
				}
				else if( xEntryTimeSet == pdFALSE )
80003cf0:	58 05       	cp.w	r5,0
80003cf2:	c0 51       	brne	80003cfc <xQueueGenericReceive+0x94>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
80003cf4:	08 9c       	mov	r12,r4
80003cf6:	f0 1f 00 27 	mcall	80003d90 <xQueueGenericReceive+0x128>
80003cfa:	00 95       	mov	r5,r0
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
80003cfc:	f0 1f 00 24 	mcall	80003d8c <xQueueGenericReceive+0x124>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
80003d00:	f0 1f 00 25 	mcall	80003d94 <xQueueGenericReceive+0x12c>
		prvLockQueue( pxQueue );
80003d04:	f0 1f 00 1e 	mcall	80003d7c <xQueueGenericReceive+0x114>
80003d08:	6f 18       	ld.w	r8,r7[0x44]
80003d0a:	5b f8       	cp.w	r8,-1
80003d0c:	ef f1 0a 11 	st.weq	r7[0x44],r1
80003d10:	6f 28       	ld.w	r8,r7[0x48]
80003d12:	5b f8       	cp.w	r8,-1
80003d14:	ef f1 0a 12 	st.weq	r7[0x48],r1
80003d18:	f0 1f 00 1d 	mcall	80003d8c <xQueueGenericReceive+0x124>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
80003d1c:	06 9b       	mov	r11,r3
80003d1e:	08 9c       	mov	r12,r4
80003d20:	f0 1f 00 1e 	mcall	80003d98 <xQueueGenericReceive+0x130>
80003d24:	c2 41       	brne	80003d6c <xQueueGenericReceive+0x104>

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
80003d26:	f0 1f 00 16 	mcall	80003d7c <xQueueGenericReceive+0x114>
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
80003d2a:	6e e6       	ld.w	r6,r7[0x38]
	taskEXIT_CRITICAL();
80003d2c:	f0 1f 00 18 	mcall	80003d8c <xQueueGenericReceive+0x124>
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) )
80003d30:	58 06       	cp.w	r6,0
80003d32:	c1 71       	brne	80003d60 <xQueueGenericReceive+0xf8>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
80003d34:	6e 08       	ld.w	r8,r7[0x0]
80003d36:	58 08       	cp.w	r8,0
80003d38:	c0 81       	brne	80003d48 <xQueueGenericReceive+0xe0>
					{
						portENTER_CRITICAL();
80003d3a:	f0 1f 00 11 	mcall	80003d7c <xQueueGenericReceive+0x114>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
80003d3e:	6e 1c       	ld.w	r12,r7[0x4]
80003d40:	f0 1f 00 17 	mcall	80003d9c <xQueueGenericReceive+0x134>
						}
						portEXIT_CRITICAL();
80003d44:	f0 1f 00 12 	mcall	80003d8c <xQueueGenericReceive+0x124>
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
80003d48:	40 2b       	lddsp	r11,sp[0x8]
80003d4a:	04 9c       	mov	r12,r2
80003d4c:	f0 1f 00 15 	mcall	80003da0 <xQueueGenericReceive+0x138>
				prvUnlockQueue( pxQueue );
80003d50:	0e 9c       	mov	r12,r7
80003d52:	f0 1f 00 15 	mcall	80003da4 <xQueueGenericReceive+0x13c>
				if( !xTaskResumeAll() )
80003d56:	f0 1f 00 15 	mcall	80003da8 <xQueueGenericReceive+0x140>
80003d5a:	c9 61       	brne	80003c86 <xQueueGenericReceive+0x1e>
				{
					portYIELD_WITHIN_API();
80003d5c:	d7 33       	scall
80003d5e:	c9 4b       	rjmp	80003c86 <xQueueGenericReceive+0x1e>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
80003d60:	0e 9c       	mov	r12,r7
80003d62:	f0 1f 00 11 	mcall	80003da4 <xQueueGenericReceive+0x13c>
				( void ) xTaskResumeAll();
80003d66:	f0 1f 00 11 	mcall	80003da8 <xQueueGenericReceive+0x140>
80003d6a:	c8 eb       	rjmp	80003c86 <xQueueGenericReceive+0x1e>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
80003d6c:	0e 9c       	mov	r12,r7
80003d6e:	f0 1f 00 0e 	mcall	80003da4 <xQueueGenericReceive+0x13c>
			( void ) xTaskResumeAll();
80003d72:	f0 1f 00 0e 	mcall	80003da8 <xQueueGenericReceive+0x140>
80003d76:	30 0c       	mov	r12,0
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
}
80003d78:	2f bd       	sub	sp,-20
80003d7a:	d8 32       	popm	r0-r7,pc
80003d7c:	80 00       	ld.sh	r0,r0[0x0]
80003d7e:	38 ec       	mov	r12,-114
80003d80:	80 00       	ld.sh	r0,r0[0x0]
80003d82:	3b 98       	mov	r8,-71
80003d84:	80 00       	ld.sh	r0,r0[0x0]
80003d86:	41 08       	lddsp	r8,sp[0x40]
80003d88:	80 00       	ld.sh	r0,r0[0x0]
80003d8a:	41 f0       	lddsp	r0,sp[0x7c]
80003d8c:	80 00       	ld.sh	r0,r0[0x0]
80003d8e:	39 f8       	mov	r8,-97
80003d90:	80 00       	ld.sh	r0,r0[0x0]
80003d92:	40 e4       	lddsp	r4,sp[0x38]
80003d94:	80 00       	ld.sh	r0,r0[0x0]
80003d96:	3f f0       	mov	r0,-1
80003d98:	80 00       	ld.sh	r0,r0[0x0]
80003d9a:	43 80       	lddsp	r0,sp[0xe0]
80003d9c:	80 00       	ld.sh	r0,r0[0x0]
80003d9e:	41 6c       	lddsp	r12,sp[0x58]
80003da0:	80 00       	ld.sh	r0,r0[0x0]
80003da2:	45 7c       	lddsp	r12,sp[0x15c]
80003da4:	80 00       	ld.sh	r0,r0[0x0]
80003da6:	3b c8       	mov	r8,-68
80003da8:	80 00       	ld.sh	r0,r0[0x0]
80003daa:	43 f0       	lddsp	r0,sp[0xfc]

80003dac <prvCopyDataToQueue>:
	vPortFree( pxQueue );
}
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
80003dac:	eb cd 40 80 	pushm	r7,lr
80003db0:	18 97       	mov	r7,r12
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
80003db2:	79 08       	ld.w	r8,r12[0x40]
80003db4:	58 08       	cp.w	r8,0
80003db6:	c0 a1       	brne	80003dca <prvCopyDataToQueue+0x1e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
80003db8:	78 08       	ld.w	r8,r12[0x0]
80003dba:	58 08       	cp.w	r8,0
80003dbc:	c2 b1       	brne	80003e12 <prvCopyDataToQueue+0x66>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
80003dbe:	78 1c       	ld.w	r12,r12[0x4]
80003dc0:	f0 1f 00 17 	mcall	80003e1c <prvCopyDataToQueue+0x70>
				pxQueue->pxMutexHolder = NULL;
80003dc4:	30 08       	mov	r8,0
80003dc6:	8f 18       	st.w	r7[0x4],r8
80003dc8:	c2 58       	rjmp	80003e12 <prvCopyDataToQueue+0x66>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
80003dca:	58 0a       	cp.w	r10,0
80003dcc:	c1 01       	brne	80003dec <prvCopyDataToQueue+0x40>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
80003dce:	10 9a       	mov	r10,r8
80003dd0:	78 2c       	ld.w	r12,r12[0x8]
80003dd2:	f0 1f 00 14 	mcall	80003e20 <prvCopyDataToQueue+0x74>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
80003dd6:	6e 29       	ld.w	r9,r7[0x8]
80003dd8:	6f 08       	ld.w	r8,r7[0x40]
80003dda:	f2 08 00 08 	add	r8,r9,r8
80003dde:	8f 28       	st.w	r7[0x8],r8
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
80003de0:	6e 19       	ld.w	r9,r7[0x4]
80003de2:	12 38       	cp.w	r8,r9
80003de4:	c1 73       	brcs	80003e12 <prvCopyDataToQueue+0x66>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
80003de6:	6e 08       	ld.w	r8,r7[0x0]
80003de8:	8f 28       	st.w	r7[0x8],r8
80003dea:	c1 48       	rjmp	80003e12 <prvCopyDataToQueue+0x66>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
80003dec:	10 9a       	mov	r10,r8
80003dee:	78 3c       	ld.w	r12,r12[0xc]
80003df0:	f0 1f 00 0c 	mcall	80003e20 <prvCopyDataToQueue+0x74>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
80003df4:	6f 08       	ld.w	r8,r7[0x40]
80003df6:	6e 39       	ld.w	r9,r7[0xc]
80003df8:	f2 08 01 08 	sub	r8,r9,r8
80003dfc:	8f 38       	st.w	r7[0xc],r8
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
80003dfe:	6e 09       	ld.w	r9,r7[0x0]
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
80003e00:	12 38       	cp.w	r8,r9
80003e02:	ef f8 30 10 	ld.wcs	r8,r7[0x40]
80003e06:	ef f9 30 01 	ld.wcs	r9,r7[0x4]
80003e0a:	f3 d8 e3 19 	subcs	r9,r9,r8
80003e0e:	ef f9 3a 03 	st.wcs	r7[0xc],r9
		}
	}

	++( pxQueue->uxMessagesWaiting );
80003e12:	6e e8       	ld.w	r8,r7[0x38]
80003e14:	2f f8       	sub	r8,-1
80003e16:	8f e8       	st.w	r7[0x38],r8
}
80003e18:	e3 cd 80 80 	ldm	sp++,r7,pc
80003e1c:	80 00       	ld.sh	r0,r0[0x0]
80003e1e:	41 14       	lddsp	r4,sp[0x44]
80003e20:	80 00       	ld.sh	r0,r0[0x0]
80003e22:	4d c0       	lddpc	r0,80003f90 <xQueueCreate+0x14>

80003e24 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
80003e24:	d4 31       	pushm	r0-r7,lr
80003e26:	20 5d       	sub	sp,20
80003e28:	18 97       	mov	r7,r12
80003e2a:	50 0b       	stdsp	sp[0x0],r11
80003e2c:	50 2a       	stdsp	sp[0x8],r10
80003e2e:	50 19       	stdsp	sp[0x4],r9
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) )
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
80003e30:	f8 c0 ff f0 	sub	r0,r12,-16
80003e34:	30 04       	mov	r4,0
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
80003e36:	fa c3 ff f4 	sub	r3,sp,-12

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
		prvLockQueue( pxQueue );
80003e3a:	08 91       	mov	r1,r4

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
80003e3c:	fa c2 ff f8 	sub	r2,sp,-8
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
80003e40:	f0 1f 00 2f 	mcall	80003efc <xQueueGenericSend+0xd8>
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
80003e44:	6e e9       	ld.w	r9,r7[0x38]
80003e46:	6e f8       	ld.w	r8,r7[0x3c]
80003e48:	10 39       	cp.w	r9,r8
80003e4a:	c1 42       	brcc	80003e72 <xQueueGenericSend+0x4e>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
80003e4c:	40 1a       	lddsp	r10,sp[0x4]
80003e4e:	40 0b       	lddsp	r11,sp[0x0]
80003e50:	0e 9c       	mov	r12,r7
80003e52:	f0 1f 00 2c 	mcall	80003f00 <xQueueGenericSend+0xdc>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
80003e56:	6e 98       	ld.w	r8,r7[0x24]
80003e58:	58 08       	cp.w	r8,0
80003e5a:	c0 80       	breq	80003e6a <xQueueGenericSend+0x46>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
80003e5c:	ee cc ff dc 	sub	r12,r7,-36
80003e60:	f0 1f 00 29 	mcall	80003f04 <xQueueGenericSend+0xe0>
80003e64:	58 1c       	cp.w	r12,1
80003e66:	c0 21       	brne	80003e6a <xQueueGenericSend+0x46>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
80003e68:	d7 33       	scall
					}
				}

				taskEXIT_CRITICAL();
80003e6a:	f0 1f 00 28 	mcall	80003f08 <xQueueGenericSend+0xe4>
80003e6e:	30 1c       	mov	r12,1

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
80003e70:	c4 38       	rjmp	80003ef6 <xQueueGenericSend+0xd2>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
80003e72:	40 28       	lddsp	r8,sp[0x8]
80003e74:	58 08       	cp.w	r8,0
80003e76:	c0 51       	brne	80003e80 <xQueueGenericSend+0x5c>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
80003e78:	f0 1f 00 24 	mcall	80003f08 <xQueueGenericSend+0xe4>
80003e7c:	30 0c       	mov	r12,0

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
80003e7e:	c3 c8       	rjmp	80003ef6 <xQueueGenericSend+0xd2>
				}
				else if( xEntryTimeSet == pdFALSE )
80003e80:	58 04       	cp.w	r4,0
80003e82:	c0 51       	brne	80003e8c <xQueueGenericSend+0x68>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
80003e84:	06 9c       	mov	r12,r3
80003e86:	f0 1f 00 22 	mcall	80003f0c <xQueueGenericSend+0xe8>
80003e8a:	30 14       	mov	r4,1
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
80003e8c:	f0 1f 00 1f 	mcall	80003f08 <xQueueGenericSend+0xe4>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
80003e90:	f0 1f 00 20 	mcall	80003f10 <xQueueGenericSend+0xec>
		prvLockQueue( pxQueue );
80003e94:	f0 1f 00 1a 	mcall	80003efc <xQueueGenericSend+0xd8>
80003e98:	6f 18       	ld.w	r8,r7[0x44]
80003e9a:	5b f8       	cp.w	r8,-1
80003e9c:	ef f1 0a 11 	st.weq	r7[0x44],r1
80003ea0:	6f 28       	ld.w	r8,r7[0x48]
80003ea2:	5b f8       	cp.w	r8,-1
80003ea4:	ef f1 0a 12 	st.weq	r7[0x48],r1
80003ea8:	f0 1f 00 18 	mcall	80003f08 <xQueueGenericSend+0xe4>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
80003eac:	04 9b       	mov	r11,r2
80003eae:	06 9c       	mov	r12,r3
80003eb0:	f0 1f 00 19 	mcall	80003f14 <xQueueGenericSend+0xf0>
80003eb4:	c1 b1       	brne	80003eea <xQueueGenericSend+0xc6>

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
80003eb6:	f0 1f 00 12 	mcall	80003efc <xQueueGenericSend+0xd8>
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
80003eba:	6e e5       	ld.w	r5,r7[0x38]
80003ebc:	6e f6       	ld.w	r6,r7[0x3c]
	taskEXIT_CRITICAL();
80003ebe:	f0 1f 00 13 	mcall	80003f08 <xQueueGenericSend+0xe4>
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) )
80003ec2:	0c 35       	cp.w	r5,r6
80003ec4:	c0 d1       	brne	80003ede <xQueueGenericSend+0xba>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
80003ec6:	40 2b       	lddsp	r11,sp[0x8]
80003ec8:	00 9c       	mov	r12,r0
80003eca:	f0 1f 00 14 	mcall	80003f18 <xQueueGenericSend+0xf4>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
80003ece:	0e 9c       	mov	r12,r7
80003ed0:	f0 1f 00 13 	mcall	80003f1c <xQueueGenericSend+0xf8>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( !xTaskResumeAll() )
80003ed4:	f0 1f 00 13 	mcall	80003f20 <xQueueGenericSend+0xfc>
80003ed8:	cb 41       	brne	80003e40 <xQueueGenericSend+0x1c>
				{
					portYIELD_WITHIN_API();
80003eda:	d7 33       	scall
80003edc:	cb 2b       	rjmp	80003e40 <xQueueGenericSend+0x1c>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
80003ede:	0e 9c       	mov	r12,r7
80003ee0:	f0 1f 00 0f 	mcall	80003f1c <xQueueGenericSend+0xf8>
				( void ) xTaskResumeAll();
80003ee4:	f0 1f 00 0f 	mcall	80003f20 <xQueueGenericSend+0xfc>
80003ee8:	ca cb       	rjmp	80003e40 <xQueueGenericSend+0x1c>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
80003eea:	0e 9c       	mov	r12,r7
80003eec:	f0 1f 00 0c 	mcall	80003f1c <xQueueGenericSend+0xf8>
			( void ) xTaskResumeAll();
80003ef0:	f0 1f 00 0c 	mcall	80003f20 <xQueueGenericSend+0xfc>
80003ef4:	30 0c       	mov	r12,0
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
}
80003ef6:	2f bd       	sub	sp,-20
80003ef8:	d8 32       	popm	r0-r7,pc
80003efa:	00 00       	add	r0,r0
80003efc:	80 00       	ld.sh	r0,r0[0x0]
80003efe:	38 ec       	mov	r12,-114
80003f00:	80 00       	ld.sh	r0,r0[0x0]
80003f02:	3d ac       	mov	r12,-38
80003f04:	80 00       	ld.sh	r0,r0[0x0]
80003f06:	41 f0       	lddsp	r0,sp[0x7c]
80003f08:	80 00       	ld.sh	r0,r0[0x0]
80003f0a:	39 f8       	mov	r8,-97
80003f0c:	80 00       	ld.sh	r0,r0[0x0]
80003f0e:	40 e4       	lddsp	r4,sp[0x38]
80003f10:	80 00       	ld.sh	r0,r0[0x0]
80003f12:	3f f0       	mov	r0,-1
80003f14:	80 00       	ld.sh	r0,r0[0x0]
80003f16:	43 80       	lddsp	r0,sp[0xe0]
80003f18:	80 00       	ld.sh	r0,r0[0x0]
80003f1a:	45 7c       	lddsp	r12,sp[0x15c]
80003f1c:	80 00       	ld.sh	r0,r0[0x0]
80003f1e:	3b c8       	mov	r8,-68
80003f20:	80 00       	ld.sh	r0,r0[0x0]
80003f22:	43 f0       	lddsp	r0,sp[0xfc]

80003f24 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	xQueueHandle xQueueCreateMutex( void )
	{
80003f24:	eb cd 40 c0 	pushm	r6-r7,lr
	xQUEUE *pxNewQueue;

		/* Allocate the new queue structure. */
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
80003f28:	34 cc       	mov	r12,76
80003f2a:	f0 1f 00 12 	mcall	80003f70 <xQueueCreateMutex+0x4c>
80003f2e:	18 97       	mov	r7,r12
		if( pxNewQueue != NULL )
80003f30:	c1 d0       	breq	80003f6a <xQueueCreateMutex+0x46>
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
80003f32:	30 06       	mov	r6,0
80003f34:	99 16       	st.w	r12[0x4],r6
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
80003f36:	99 06       	st.w	r12[0x0],r6

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
80003f38:	99 26       	st.w	r12[0x8],r6
			pxNewQueue->pcReadFrom = NULL;
80003f3a:	99 36       	st.w	r12[0xc],r6

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
80003f3c:	99 e6       	st.w	r12[0x38],r6
			pxNewQueue->uxLength = ( unsigned portBASE_TYPE ) 1U;
80003f3e:	30 18       	mov	r8,1
80003f40:	99 f8       	st.w	r12[0x3c],r8
			pxNewQueue->uxItemSize = ( unsigned portBASE_TYPE ) 0U;
80003f42:	f9 46 00 40 	st.w	r12[64],r6
			pxNewQueue->xRxLock = queueUNLOCKED;
80003f46:	3f f8       	mov	r8,-1
80003f48:	f9 48 00 44 	st.w	r12[68],r8
			pxNewQueue->xTxLock = queueUNLOCKED;
80003f4c:	f9 48 00 48 	st.w	r12[72],r8

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
80003f50:	2f 0c       	sub	r12,-16
80003f52:	f0 1f 00 09 	mcall	80003f74 <xQueueCreateMutex+0x50>
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
80003f56:	ee cc ff dc 	sub	r12,r7,-36
80003f5a:	f0 1f 00 07 	mcall	80003f74 <xQueueCreateMutex+0x50>

			/* Start with the semaphore in the expected state. */
			xQueueGenericSend( pxNewQueue, NULL, ( portTickType ) 0U, queueSEND_TO_BACK );
80003f5e:	0c 99       	mov	r9,r6
80003f60:	0c 9a       	mov	r10,r6
80003f62:	0c 9b       	mov	r11,r6
80003f64:	0e 9c       	mov	r12,r7
80003f66:	f0 1f 00 05 	mcall	80003f78 <xQueueCreateMutex+0x54>
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
		return pxNewQueue;
	}
80003f6a:	0e 9c       	mov	r12,r7
80003f6c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80003f70:	80 00       	ld.sh	r0,r0[0x0]
80003f72:	3b 70       	mov	r0,-73
80003f74:	80 00       	ld.sh	r0,r0[0x0]
80003f76:	37 c8       	mov	r8,124
80003f78:	80 00       	ld.sh	r0,r0[0x0]
80003f7a:	3e 24       	mov	r4,-30

80003f7c <xQueueCreate>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

xQueueHandle xQueueCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize )
{
80003f7c:	d4 21       	pushm	r4-r7,lr
80003f7e:	18 97       	mov	r7,r12
80003f80:	16 96       	mov	r6,r11
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
80003f82:	58 0c       	cp.w	r12,0
80003f84:	c2 f0       	breq	80003fe2 <xQueueCreate+0x66>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
80003f86:	34 cc       	mov	r12,76
80003f88:	f0 1f 00 17 	mcall	80003fe4 <xQueueCreate+0x68>
80003f8c:	18 95       	mov	r5,r12
		if( pxNewQueue != NULL )
80003f8e:	c2 a0       	breq	80003fe2 <xQueueCreate+0x66>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
80003f90:	ec 07 02 44 	mul	r4,r6,r7

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
80003f94:	e8 cc ff ff 	sub	r12,r4,-1
80003f98:	f0 1f 00 13 	mcall	80003fe4 <xQueueCreate+0x68>
80003f9c:	8b 0c       	st.w	r5[0x0],r12
			if( pxNewQueue->pcHead != NULL )
80003f9e:	c1 e0       	breq	80003fda <xQueueCreate+0x5e>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->pcTail = pxNewQueue->pcHead + ( uxQueueLength * uxItemSize );
80003fa0:	f8 04 00 04 	add	r4,r12,r4
80003fa4:	8b 14       	st.w	r5[0x4],r4
				pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
80003fa6:	30 08       	mov	r8,0
80003fa8:	8b e8       	st.w	r5[0x38],r8
				pxNewQueue->pcWriteTo = pxNewQueue->pcHead;
80003faa:	8b 2c       	st.w	r5[0x8],r12
				pxNewQueue->pcReadFrom = pxNewQueue->pcHead + ( ( uxQueueLength - ( unsigned portBASE_TYPE ) 1U ) * uxItemSize );
80003fac:	ee c8 00 01 	sub	r8,r7,1
80003fb0:	ad 38       	mul	r8,r6
80003fb2:	10 0c       	add	r12,r8
80003fb4:	8b 3c       	st.w	r5[0xc],r12
				pxNewQueue->uxLength = uxQueueLength;
80003fb6:	8b f7       	st.w	r5[0x3c],r7
				pxNewQueue->uxItemSize = uxItemSize;
80003fb8:	eb 46 00 40 	st.w	r5[64],r6
				pxNewQueue->xRxLock = queueUNLOCKED;
80003fbc:	3f f8       	mov	r8,-1
80003fbe:	eb 48 00 44 	st.w	r5[68],r8
				pxNewQueue->xTxLock = queueUNLOCKED;
80003fc2:	eb 48 00 48 	st.w	r5[72],r8

				/* Likewise ensure the event queues start with the correct state. */
				vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
80003fc6:	ea cc ff f0 	sub	r12,r5,-16
80003fca:	f0 1f 00 08 	mcall	80003fe8 <xQueueCreate+0x6c>
				vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
80003fce:	ea cc ff dc 	sub	r12,r5,-36
80003fd2:	f0 1f 00 06 	mcall	80003fe8 <xQueueCreate+0x6c>
80003fd6:	0a 9c       	mov	r12,r5
80003fd8:	d8 22       	popm	r4-r7,pc
				xReturn = pxNewQueue;
			}
			else
			{
				traceQUEUE_CREATE_FAILED();
				vPortFree( pxNewQueue );
80003fda:	0a 9c       	mov	r12,r5
80003fdc:	f0 1f 00 04 	mcall	80003fec <xQueueCreate+0x70>
80003fe0:	d8 2a       	popm	r4-r7,pc,r12=0
80003fe2:	d8 2a       	popm	r4-r7,pc,r12=0
80003fe4:	80 00       	ld.sh	r0,r0[0x0]
80003fe6:	3b 70       	mov	r0,-73
80003fe8:	80 00       	ld.sh	r0,r0[0x0]
80003fea:	37 c8       	mov	r8,124
80003fec:	80 00       	ld.sh	r0,r0[0x0]
80003fee:	3b 48       	mov	r8,-76

80003ff0 <vTaskSuspendAll>:

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
80003ff0:	48 38       	lddpc	r8,80003ffc <vTaskSuspendAll+0xc>
80003ff2:	70 09       	ld.w	r9,r8[0x0]
80003ff4:	2f f9       	sub	r9,-1
80003ff6:	91 09       	st.w	r8[0x0],r9
}
80003ff8:	5e fc       	retal	r12
80003ffa:	00 00       	add	r0,r0
80003ffc:	00 00       	add	r0,r0
80003ffe:	07 cc       	ld.ub	r12,r3[0x4]

80004000 <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
80004000:	4a f8       	lddpc	r8,800040bc <vTaskSwitchContext+0xbc>
80004002:	70 08       	ld.w	r8,r8[0x0]
80004004:	58 08       	cp.w	r8,0
80004006:	c0 b1       	brne	8000401c <vTaskSwitchContext+0x1c>

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
80004008:	4a e8       	lddpc	r8,800040c0 <vTaskSwitchContext+0xc0>
8000400a:	70 08       	ld.w	r8,r8[0x0]
8000400c:	f0 08 00 28 	add	r8,r8,r8<<0x2
80004010:	4a d9       	lddpc	r9,800040c4 <vTaskSwitchContext+0xc4>
80004012:	f2 08 03 28 	ld.w	r8,r9[r8<<0x2]
80004016:	58 08       	cp.w	r8,0
80004018:	c0 60       	breq	80004024 <vTaskSwitchContext+0x24>
8000401a:	c1 18       	rjmp	8000403c <vTaskSwitchContext+0x3c>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
8000401c:	30 19       	mov	r9,1
8000401e:	4a b8       	lddpc	r8,800040c8 <vTaskSwitchContext+0xc8>
80004020:	91 09       	st.w	r8[0x0],r9
80004022:	5e fc       	retal	r12

		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
80004024:	4a 78       	lddpc	r8,800040c0 <vTaskSwitchContext+0xc0>

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
80004026:	4a 8a       	lddpc	r10,800040c4 <vTaskSwitchContext+0xc4>
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
80004028:	70 09       	ld.w	r9,r8[0x0]
8000402a:	20 19       	sub	r9,1
8000402c:	91 09       	st.w	r8[0x0],r9

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
8000402e:	70 09       	ld.w	r9,r8[0x0]
80004030:	f2 09 00 29 	add	r9,r9,r9<<0x2
80004034:	f4 09 03 29 	ld.w	r9,r10[r9<<0x2]
80004038:	58 09       	cp.w	r9,0
8000403a:	cf 70       	breq	80004028 <vTaskSwitchContext+0x28>
			--uxTopReadyPriority;
		}

		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
8000403c:	4a 18       	lddpc	r8,800040c0 <vTaskSwitchContext+0xc0>
8000403e:	70 08       	ld.w	r8,r8[0x0]
80004040:	f0 08 00 28 	add	r8,r8,r8<<0x2
80004044:	4a 09       	lddpc	r9,800040c4 <vTaskSwitchContext+0xc4>
80004046:	f2 08 00 28 	add	r8,r9,r8<<0x2
8000404a:	70 19       	ld.w	r9,r8[0x4]
8000404c:	72 19       	ld.w	r9,r9[0x4]
8000404e:	91 19       	st.w	r8[0x4],r9
80004050:	f0 ca ff f8 	sub	r10,r8,-8
80004054:	14 39       	cp.w	r9,r10
80004056:	f3 f9 00 01 	ld.weq	r9,r9[0x4]
8000405a:	f1 f9 0a 01 	st.weq	r8[0x4],r9
8000405e:	70 18       	ld.w	r8,r8[0x4]
80004060:	70 39       	ld.w	r9,r8[0xc]
80004062:	49 b8       	lddpc	r8,800040cc <vTaskSwitchContext+0xcc>
80004064:	91 09       	st.w	r8[0x0],r9

		traceTASK_SWITCHED_IN();
		vWriteTraceToBuffer();
80004066:	49 b8       	lddpc	r8,800040d0 <vTaskSwitchContext+0xd0>
80004068:	70 08       	ld.w	r8,r8[0x0]
8000406a:	58 08       	cp.w	r8,0
8000406c:	5e 0c       	reteq	r12
8000406e:	49 88       	lddpc	r8,800040cc <vTaskSwitchContext+0xcc>
80004070:	70 08       	ld.w	r8,r8[0x0]
80004072:	71 29       	ld.w	r9,r8[0x48]
80004074:	49 88       	lddpc	r8,800040d4 <vTaskSwitchContext+0xd4>
80004076:	70 08       	ld.w	r8,r8[0x0]
80004078:	10 39       	cp.w	r9,r8
8000407a:	5e 0c       	reteq	r12
8000407c:	49 78       	lddpc	r8,800040d8 <vTaskSwitchContext+0xd8>
8000407e:	70 08       	ld.w	r8,r8[0x0]
80004080:	2f 88       	sub	r8,-8
80004082:	49 79       	lddpc	r9,800040dc <vTaskSwitchContext+0xdc>
80004084:	72 09       	ld.w	r9,r9[0x0]
80004086:	10 39       	cp.w	r9,r8
80004088:	e0 88 00 15 	brls	800040b2 <vTaskSwitchContext+0xb2>
8000408c:	49 08       	lddpc	r8,800040cc <vTaskSwitchContext+0xcc>
8000408e:	70 08       	ld.w	r8,r8[0x0]
80004090:	71 29       	ld.w	r9,r8[0x48]
80004092:	49 18       	lddpc	r8,800040d4 <vTaskSwitchContext+0xd4>
80004094:	91 09       	st.w	r8[0x0],r9
80004096:	49 18       	lddpc	r8,800040d8 <vTaskSwitchContext+0xd8>
80004098:	70 0a       	ld.w	r10,r8[0x0]
8000409a:	49 2b       	lddpc	r11,800040e0 <vTaskSwitchContext+0xe0>
8000409c:	76 0b       	ld.w	r11,r11[0x0]
8000409e:	95 0b       	st.w	r10[0x0],r11
800040a0:	70 0a       	ld.w	r10,r8[0x0]
800040a2:	2f ca       	sub	r10,-4
800040a4:	91 0a       	st.w	r8[0x0],r10
800040a6:	70 0a       	ld.w	r10,r8[0x0]
800040a8:	95 09       	st.w	r10[0x0],r9
800040aa:	70 09       	ld.w	r9,r8[0x0]
800040ac:	2f c9       	sub	r9,-4
800040ae:	91 09       	st.w	r8[0x0],r9
800040b0:	5e fc       	retal	r12
800040b2:	30 09       	mov	r9,0
800040b4:	48 78       	lddpc	r8,800040d0 <vTaskSwitchContext+0xd0>
800040b6:	91 09       	st.w	r8[0x0],r9
800040b8:	5e fc       	retal	r12
800040ba:	00 00       	add	r0,r0
800040bc:	00 00       	add	r0,r0
800040be:	07 cc       	ld.ub	r12,r3[0x4]
800040c0:	00 00       	add	r0,r0
800040c2:	06 ac       	st.w	r3++,r12
800040c4:	00 00       	add	r0,r0
800040c6:	06 b8       	st.h	r3++,r8
800040c8:	00 00       	add	r0,r0
800040ca:	07 7c       	ld.ub	r12,--r3
800040cc:	00 00       	add	r0,r0
800040ce:	07 88       	ld.ub	r8,r3[0x0]
800040d0:	00 00       	add	r0,r0
800040d2:	07 70       	ld.ub	r0,--r3
800040d4:	00 00       	add	r0,r0
800040d6:	00 3c       	cp.w	r12,r0
800040d8:	00 00       	add	r0,r0
800040da:	07 84       	ld.ub	r4,r3[0x0]
800040dc:	00 00       	add	r0,r0
800040de:	07 d4       	ld.ub	r4,r3[0x5]
800040e0:	00 00       	add	r0,r0
800040e2:	06 b4       	st.h	r3++,r4

800040e4 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
800040e4:	48 48       	lddpc	r8,800040f4 <vTaskSetTimeOutState+0x10>
800040e6:	70 08       	ld.w	r8,r8[0x0]
800040e8:	99 08       	st.w	r12[0x0],r8
	pxTimeOut->xTimeOnEntering = xTickCount;
800040ea:	48 48       	lddpc	r8,800040f8 <vTaskSetTimeOutState+0x14>
800040ec:	70 08       	ld.w	r8,r8[0x0]
800040ee:	99 18       	st.w	r12[0x4],r8
}
800040f0:	5e fc       	retal	r12
800040f2:	00 00       	add	r0,r0
800040f4:	00 00       	add	r0,r0
800040f6:	07 d8       	ld.ub	r8,r3[0x5]
800040f8:	00 00       	add	r0,r0
800040fa:	06 b4       	st.h	r3++,r4

800040fc <vTaskMissedYield>:
}
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xMissedYield = pdTRUE;
800040fc:	30 19       	mov	r9,1
800040fe:	48 28       	lddpc	r8,80004104 <vTaskMissedYield+0x8>
80004100:	91 09       	st.w	r8[0x0],r9
}
80004102:	5e fc       	retal	r12
80004104:	00 00       	add	r0,r0
80004106:	07 7c       	ld.ub	r12,--r3

80004108 <xTaskGetCurrentTaskHandle>:
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
80004108:	48 28       	lddpc	r8,80004110 <xTaskGetCurrentTaskHandle+0x8>
8000410a:	70 0c       	ld.w	r12,r8[0x0]

		return xReturn;
	}
8000410c:	5e fc       	retal	r12
8000410e:	00 00       	add	r0,r0
80004110:	00 00       	add	r0,r0
80004112:	07 88       	ld.ub	r8,r3[0x0]

80004114 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
80004114:	eb cd 40 c0 	pushm	r6-r7,lr
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
80004118:	58 0c       	cp.w	r12,0
8000411a:	c1 f0       	breq	80004158 <vTaskPriorityDisinherit+0x44>

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
8000411c:	18 97       	mov	r7,r12

		if( pxMutexHolder != NULL )
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
8000411e:	78 b9       	ld.w	r9,r12[0x2c]
80004120:	79 38       	ld.w	r8,r12[0x4c]
80004122:	10 39       	cp.w	r9,r8
80004124:	c1 a0       	breq	80004158 <vTaskPriorityDisinherit+0x44>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				vListRemove( &( pxTCB->xGenericListItem ) );
80004126:	f8 c6 ff fc 	sub	r6,r12,-4
8000412a:	0c 9c       	mov	r12,r6
8000412c:	f0 1f 00 0c 	mcall	8000415c <vTaskPriorityDisinherit+0x48>

				/* Disinherit the priority before adding ourselves into the new
				ready list. */
				pxTCB->uxPriority = pxTCB->uxBasePriority;
80004130:	6f 3c       	ld.w	r12,r7[0x4c]
80004132:	8f bc       	st.w	r7[0x2c],r12
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
80004134:	f8 08 11 08 	rsub	r8,r12,8
80004138:	8f 68       	st.w	r7[0x18],r8
				prvAddTaskToReadyQueue( pxTCB );
8000413a:	48 a8       	lddpc	r8,80004160 <vTaskPriorityDisinherit+0x4c>
8000413c:	70 08       	ld.w	r8,r8[0x0]
8000413e:	10 3c       	cp.w	r12,r8
80004140:	e0 88 00 04 	brls	80004148 <vTaskPriorityDisinherit+0x34>
80004144:	48 78       	lddpc	r8,80004160 <vTaskPriorityDisinherit+0x4c>
80004146:	91 0c       	st.w	r8[0x0],r12
80004148:	f8 0c 00 2c 	add	r12,r12,r12<<0x2
8000414c:	0c 9b       	mov	r11,r6
8000414e:	48 68       	lddpc	r8,80004164 <vTaskPriorityDisinherit+0x50>
80004150:	f0 0c 00 2c 	add	r12,r8,r12<<0x2
80004154:	f0 1f 00 05 	mcall	80004168 <vTaskPriorityDisinherit+0x54>
80004158:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000415c:	80 00       	ld.sh	r0,r0[0x0]
8000415e:	38 32       	mov	r2,-125
80004160:	00 00       	add	r0,r0
80004162:	06 ac       	st.w	r3++,r12
80004164:	00 00       	add	r0,r0
80004166:	06 b8       	st.h	r3++,r8
80004168:	80 00       	ld.sh	r0,r0[0x0]
8000416a:	37 e2       	mov	r2,126

8000416c <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
8000416c:	eb cd 40 c0 	pushm	r6-r7,lr
80004170:	18 97       	mov	r7,r12
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		configASSERT( pxMutexHolder );

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
80004172:	49 b8       	lddpc	r8,800041dc <vTaskPriorityInherit+0x70>
80004174:	70 08       	ld.w	r8,r8[0x0]
80004176:	78 b9       	ld.w	r9,r12[0x2c]
80004178:	70 b8       	ld.w	r8,r8[0x2c]
8000417a:	10 39       	cp.w	r9,r8
8000417c:	c2 d2       	brcc	800041d6 <vTaskPriorityInherit+0x6a>
		{
			/* Adjust the mutex holder state to account for its new priority. */
			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
8000417e:	49 88       	lddpc	r8,800041dc <vTaskPriorityInherit+0x70>
80004180:	70 08       	ld.w	r8,r8[0x0]
80004182:	70 b8       	ld.w	r8,r8[0x2c]
80004184:	f0 08 11 08 	rsub	r8,r8,8
80004188:	99 68       	st.w	r12[0x18],r8

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) )
8000418a:	f2 09 00 28 	add	r8,r9,r9<<0x2
8000418e:	49 59       	lddpc	r9,800041e0 <vTaskPriorityInherit+0x74>
80004190:	f2 08 00 28 	add	r8,r9,r8<<0x2
80004194:	78 59       	ld.w	r9,r12[0x14]
80004196:	10 39       	cp.w	r9,r8
80004198:	c1 b1       	brne	800041ce <vTaskPriorityInherit+0x62>
			{
				vListRemove( &( pxTCB->xGenericListItem ) );
8000419a:	f8 c6 ff fc 	sub	r6,r12,-4
8000419e:	0c 9c       	mov	r12,r6
800041a0:	f0 1f 00 11 	mcall	800041e4 <vTaskPriorityInherit+0x78>

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
800041a4:	48 e8       	lddpc	r8,800041dc <vTaskPriorityInherit+0x70>
800041a6:	70 08       	ld.w	r8,r8[0x0]
800041a8:	70 bc       	ld.w	r12,r8[0x2c]
800041aa:	8f bc       	st.w	r7[0x2c],r12
				prvAddTaskToReadyQueue( pxTCB );
800041ac:	48 f8       	lddpc	r8,800041e8 <vTaskPriorityInherit+0x7c>
800041ae:	70 08       	ld.w	r8,r8[0x0]
800041b0:	10 3c       	cp.w	r12,r8
800041b2:	e0 88 00 04 	brls	800041ba <vTaskPriorityInherit+0x4e>
800041b6:	48 d8       	lddpc	r8,800041e8 <vTaskPriorityInherit+0x7c>
800041b8:	91 0c       	st.w	r8[0x0],r12
800041ba:	f8 0c 00 2c 	add	r12,r12,r12<<0x2
800041be:	0c 9b       	mov	r11,r6
800041c0:	48 88       	lddpc	r8,800041e0 <vTaskPriorityInherit+0x74>
800041c2:	f0 0c 00 2c 	add	r12,r8,r12<<0x2
800041c6:	f0 1f 00 0a 	mcall	800041ec <vTaskPriorityInherit+0x80>
800041ca:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
			}
			else
			{
				/* Just inherit the priority. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
800041ce:	48 48       	lddpc	r8,800041dc <vTaskPriorityInherit+0x70>
800041d0:	70 08       	ld.w	r8,r8[0x0]
800041d2:	70 b8       	ld.w	r8,r8[0x2c]
800041d4:	99 b8       	st.w	r12[0x2c],r8
800041d6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800041da:	00 00       	add	r0,r0
800041dc:	00 00       	add	r0,r0
800041de:	07 88       	ld.ub	r8,r3[0x0]
800041e0:	00 00       	add	r0,r0
800041e2:	06 b8       	st.h	r3++,r8
800041e4:	80 00       	ld.sh	r0,r0[0x0]
800041e6:	38 32       	mov	r2,-125
800041e8:	00 00       	add	r0,r0
800041ea:	06 ac       	st.w	r3++,r12
800041ec:	80 00       	ld.sh	r0,r0[0x0]
800041ee:	37 e2       	mov	r2,126

800041f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
800041f0:	eb cd 40 c0 	pushm	r6-r7,lr
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
800041f4:	78 38       	ld.w	r8,r12[0xc]
800041f6:	70 37       	ld.w	r7,r8[0xc]
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
800041f8:	ee c6 ff e8 	sub	r6,r7,-24
800041fc:	0c 9c       	mov	r12,r6
800041fe:	f0 1f 00 15 	mcall	80004250 <xTaskRemoveFromEventList+0x60>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
80004202:	49 58       	lddpc	r8,80004254 <xTaskRemoveFromEventList+0x64>
80004204:	70 08       	ld.w	r8,r8[0x0]
80004206:	58 08       	cp.w	r8,0
80004208:	c1 71       	brne	80004236 <xTaskRemoveFromEventList+0x46>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
8000420a:	ee c6 ff fc 	sub	r6,r7,-4
8000420e:	0c 9c       	mov	r12,r6
80004210:	f0 1f 00 10 	mcall	80004250 <xTaskRemoveFromEventList+0x60>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
80004214:	6e bc       	ld.w	r12,r7[0x2c]
80004216:	49 18       	lddpc	r8,80004258 <xTaskRemoveFromEventList+0x68>
80004218:	70 08       	ld.w	r8,r8[0x0]
8000421a:	10 3c       	cp.w	r12,r8
8000421c:	e0 88 00 04 	brls	80004224 <xTaskRemoveFromEventList+0x34>
80004220:	48 e8       	lddpc	r8,80004258 <xTaskRemoveFromEventList+0x68>
80004222:	91 0c       	st.w	r8[0x0],r12
80004224:	f8 0c 00 2c 	add	r12,r12,r12<<0x2
80004228:	0c 9b       	mov	r11,r6
8000422a:	48 d8       	lddpc	r8,8000425c <xTaskRemoveFromEventList+0x6c>
8000422c:	f0 0c 00 2c 	add	r12,r8,r12<<0x2
80004230:	f0 1f 00 0c 	mcall	80004260 <xTaskRemoveFromEventList+0x70>
80004234:	c0 58       	rjmp	8000423e <xTaskRemoveFromEventList+0x4e>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
80004236:	0c 9b       	mov	r11,r6
80004238:	48 bc       	lddpc	r12,80004264 <xTaskRemoveFromEventList+0x74>
8000423a:	f0 1f 00 0a 	mcall	80004260 <xTaskRemoveFromEventList+0x70>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
8000423e:	48 b8       	lddpc	r8,80004268 <xTaskRemoveFromEventList+0x78>
80004240:	70 08       	ld.w	r8,r8[0x0]
80004242:	6e b9       	ld.w	r9,r7[0x2c]
80004244:	70 b8       	ld.w	r8,r8[0x2c]
80004246:	10 39       	cp.w	r9,r8
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
80004248:	5f 2c       	srhs	r12
8000424a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000424e:	00 00       	add	r0,r0
80004250:	80 00       	ld.sh	r0,r0[0x0]
80004252:	38 32       	mov	r2,-125
80004254:	00 00       	add	r0,r0
80004256:	07 cc       	ld.ub	r12,r3[0x4]
80004258:	00 00       	add	r0,r0
8000425a:	06 ac       	st.w	r3++,r12
8000425c:	00 00       	add	r0,r0
8000425e:	06 b8       	st.h	r3++,r8
80004260:	80 00       	ld.sh	r0,r0[0x0]
80004262:	37 e2       	mov	r2,126
80004264:	00 00       	add	r0,r0
80004266:	06 98       	mov	r8,r3
80004268:	00 00       	add	r0,r0
8000426a:	07 88       	ld.ub	r8,r3[0x0]

8000426c <vTaskIncrementTick>:
 * documented in task.h
 *----------------------------------------------------------*/


void vTaskIncrementTick( void )
{
8000426c:	eb cd 40 fc 	pushm	r2-r7,lr
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
80004270:	4b 98       	lddpc	r8,80004354 <vTaskIncrementTick+0xe8>
80004272:	70 08       	ld.w	r8,r8[0x0]
80004274:	58 08       	cp.w	r8,0
80004276:	c6 91       	brne	80004348 <vTaskIncrementTick+0xdc>
	{
		++xTickCount;
80004278:	4b 88       	lddpc	r8,80004358 <vTaskIncrementTick+0xec>
8000427a:	70 09       	ld.w	r9,r8[0x0]
8000427c:	2f f9       	sub	r9,-1
8000427e:	91 09       	st.w	r8[0x0],r9
		if( xTickCount == ( portTickType ) 0 )
80004280:	70 08       	ld.w	r8,r8[0x0]
80004282:	58 08       	cp.w	r8,0
80004284:	c1 a1       	brne	800042b8 <vTaskIncrementTick+0x4c>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );

			pxTemp = pxDelayedTaskList;
80004286:	4b 68       	lddpc	r8,8000435c <vTaskIncrementTick+0xf0>
80004288:	70 0a       	ld.w	r10,r8[0x0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
8000428a:	4b 69       	lddpc	r9,80004360 <vTaskIncrementTick+0xf4>
8000428c:	72 0b       	ld.w	r11,r9[0x0]
8000428e:	91 0b       	st.w	r8[0x0],r11
			pxOverflowDelayedTaskList = pxTemp;
80004290:	93 0a       	st.w	r9[0x0],r10
			xNumOfOverflows++;
80004292:	4b 59       	lddpc	r9,80004364 <vTaskIncrementTick+0xf8>
80004294:	72 0a       	ld.w	r10,r9[0x0]
80004296:	2f fa       	sub	r10,-1
80004298:	93 0a       	st.w	r9[0x0],r10

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
8000429a:	70 08       	ld.w	r8,r8[0x0]
8000429c:	70 08       	ld.w	r8,r8[0x0]
8000429e:	58 08       	cp.w	r8,0
800042a0:	c0 51       	brne	800042aa <vTaskIncrementTick+0x3e>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
800042a2:	3f f9       	mov	r9,-1
800042a4:	4b 18       	lddpc	r8,80004368 <vTaskIncrementTick+0xfc>
800042a6:	91 09       	st.w	r8[0x0],r9
800042a8:	c0 88       	rjmp	800042b8 <vTaskIncrementTick+0x4c>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
800042aa:	4a d8       	lddpc	r8,8000435c <vTaskIncrementTick+0xf0>
800042ac:	70 08       	ld.w	r8,r8[0x0]
800042ae:	70 38       	ld.w	r8,r8[0xc]
800042b0:	70 38       	ld.w	r8,r8[0xc]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
800042b2:	70 19       	ld.w	r9,r8[0x4]
800042b4:	4a d8       	lddpc	r8,80004368 <vTaskIncrementTick+0xfc>
800042b6:	91 09       	st.w	r8[0x0],r9
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
800042b8:	4a 88       	lddpc	r8,80004358 <vTaskIncrementTick+0xec>
800042ba:	70 09       	ld.w	r9,r8[0x0]
800042bc:	4a b8       	lddpc	r8,80004368 <vTaskIncrementTick+0xfc>
800042be:	70 08       	ld.w	r8,r8[0x0]
800042c0:	10 39       	cp.w	r9,r8
800042c2:	c4 73       	brcs	80004350 <vTaskIncrementTick+0xe4>
800042c4:	4a 68       	lddpc	r8,8000435c <vTaskIncrementTick+0xf0>
800042c6:	70 08       	ld.w	r8,r8[0x0]
800042c8:	70 08       	ld.w	r8,r8[0x0]
800042ca:	58 08       	cp.w	r8,0
800042cc:	c0 c0       	breq	800042e4 <vTaskIncrementTick+0x78>
800042ce:	4a 48       	lddpc	r8,8000435c <vTaskIncrementTick+0xf0>
800042d0:	70 08       	ld.w	r8,r8[0x0]
800042d2:	70 38       	ld.w	r8,r8[0xc]
800042d4:	70 37       	ld.w	r7,r8[0xc]
800042d6:	6e 18       	ld.w	r8,r7[0x4]
800042d8:	4a 09       	lddpc	r9,80004358 <vTaskIncrementTick+0xec>
800042da:	72 09       	ld.w	r9,r9[0x0]
800042dc:	12 38       	cp.w	r8,r9
800042de:	e0 88 00 14 	brls	80004306 <vTaskIncrementTick+0x9a>
800042e2:	c0 e8       	rjmp	800042fe <vTaskIncrementTick+0x92>
800042e4:	3f f9       	mov	r9,-1
800042e6:	4a 18       	lddpc	r8,80004368 <vTaskIncrementTick+0xfc>
800042e8:	91 09       	st.w	r8[0x0],r9
800042ea:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
800042ee:	6a 08       	ld.w	r8,r5[0x0]
800042f0:	70 38       	ld.w	r8,r8[0xc]
800042f2:	70 37       	ld.w	r7,r8[0xc]
800042f4:	6e 18       	ld.w	r8,r7[0x4]
800042f6:	64 09       	ld.w	r9,r2[0x0]
800042f8:	12 38       	cp.w	r8,r9
800042fa:	e0 88 00 0a 	brls	8000430e <vTaskIncrementTick+0xa2>
800042fe:	49 b9       	lddpc	r9,80004368 <vTaskIncrementTick+0xfc>
80004300:	93 08       	st.w	r9[0x0],r8
80004302:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
80004306:	49 a4       	lddpc	r4,8000436c <vTaskIncrementTick+0x100>
80004308:	49 a3       	lddpc	r3,80004370 <vTaskIncrementTick+0x104>
8000430a:	49 55       	lddpc	r5,8000435c <vTaskIncrementTick+0xf0>
8000430c:	49 32       	lddpc	r2,80004358 <vTaskIncrementTick+0xec>
8000430e:	ee c6 ff fc 	sub	r6,r7,-4
80004312:	0c 9c       	mov	r12,r6
80004314:	f0 1f 00 18 	mcall	80004374 <vTaskIncrementTick+0x108>
80004318:	6e a8       	ld.w	r8,r7[0x28]
8000431a:	58 08       	cp.w	r8,0
8000431c:	c0 50       	breq	80004326 <vTaskIncrementTick+0xba>
8000431e:	ee cc ff e8 	sub	r12,r7,-24
80004322:	f0 1f 00 15 	mcall	80004374 <vTaskIncrementTick+0x108>
80004326:	6e bc       	ld.w	r12,r7[0x2c]
80004328:	68 08       	ld.w	r8,r4[0x0]
8000432a:	10 3c       	cp.w	r12,r8
8000432c:	e9 fc ba 00 	st.whi	r4[0x0],r12
80004330:	f8 0c 00 2c 	add	r12,r12,r12<<0x2
80004334:	0c 9b       	mov	r11,r6
80004336:	e6 0c 00 2c 	add	r12,r3,r12<<0x2
8000433a:	f0 1f 00 10 	mcall	80004378 <vTaskIncrementTick+0x10c>
8000433e:	6a 08       	ld.w	r8,r5[0x0]
80004340:	70 08       	ld.w	r8,r8[0x0]
80004342:	58 08       	cp.w	r8,0
80004344:	cd 51       	brne	800042ee <vTaskIncrementTick+0x82>
80004346:	cc fb       	rjmp	800042e4 <vTaskIncrementTick+0x78>
	}
	else
	{
		++uxMissedTicks;
80004348:	48 d8       	lddpc	r8,8000437c <vTaskIncrementTick+0x110>
8000434a:	70 09       	ld.w	r9,r8[0x0]
8000434c:	2f f9       	sub	r9,-1
8000434e:	91 09       	st.w	r8[0x0],r9
80004350:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
80004354:	00 00       	add	r0,r0
80004356:	07 cc       	ld.ub	r12,r3[0x4]
80004358:	00 00       	add	r0,r0
8000435a:	06 b4       	st.h	r3++,r4
8000435c:	00 00       	add	r0,r0
8000435e:	07 74       	ld.ub	r4,--r3
80004360:	00 00       	add	r0,r0
80004362:	07 58       	ld.sh	r8,--r3
80004364:	00 00       	add	r0,r0
80004366:	07 d8       	ld.ub	r8,r3[0x5]
80004368:	00 00       	add	r0,r0
8000436a:	00 38       	cp.w	r8,r0
8000436c:	00 00       	add	r0,r0
8000436e:	06 ac       	st.w	r3++,r12
80004370:	00 00       	add	r0,r0
80004372:	06 b8       	st.h	r3++,r8
80004374:	80 00       	ld.sh	r0,r0[0x0]
80004376:	38 32       	mov	r2,-125
80004378:	80 00       	ld.sh	r0,r0[0x0]
8000437a:	37 e2       	mov	r2,126
8000437c:	00 00       	add	r0,r0
8000437e:	07 d0       	ld.ub	r0,r3[0x5]

80004380 <xTaskCheckForTimeOut>:
	pxTimeOut->xTimeOnEntering = xTickCount;
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
80004380:	eb cd 40 c0 	pushm	r6-r7,lr
80004384:	18 97       	mov	r7,r12
80004386:	16 96       	mov	r6,r11
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
80004388:	f0 1f 00 15 	mcall	800043dc <xTaskCheckForTimeOut+0x5c>
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
8000438c:	6c 08       	ld.w	r8,r6[0x0]
8000438e:	5b f8       	cp.w	r8,-1
80004390:	c0 31       	brne	80004396 <xTaskCheckForTimeOut+0x16>
80004392:	30 07       	mov	r7,0
80004394:	c1 f8       	rjmp	800043d2 <xTaskCheckForTimeOut+0x52>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
80004396:	49 39       	lddpc	r9,800043e0 <xTaskCheckForTimeOut+0x60>
80004398:	72 09       	ld.w	r9,r9[0x0]
8000439a:	6e 0a       	ld.w	r10,r7[0x0]
8000439c:	12 3a       	cp.w	r10,r9
8000439e:	c0 70       	breq	800043ac <xTaskCheckForTimeOut+0x2c>
800043a0:	49 19       	lddpc	r9,800043e4 <xTaskCheckForTimeOut+0x64>
800043a2:	72 09       	ld.w	r9,r9[0x0]
800043a4:	6e 1a       	ld.w	r10,r7[0x4]
800043a6:	12 3a       	cp.w	r10,r9
800043a8:	e0 88 00 14 	brls	800043d0 <xTaskCheckForTimeOut+0x50>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
800043ac:	48 e9       	lddpc	r9,800043e4 <xTaskCheckForTimeOut+0x64>
800043ae:	72 0a       	ld.w	r10,r9[0x0]
800043b0:	6e 19       	ld.w	r9,r7[0x4]
800043b2:	12 1a       	sub	r10,r9
800043b4:	14 38       	cp.w	r8,r10
800043b6:	e0 88 00 0d 	brls	800043d0 <xTaskCheckForTimeOut+0x50>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
800043ba:	48 ba       	lddpc	r10,800043e4 <xTaskCheckForTimeOut+0x64>
800043bc:	74 0a       	ld.w	r10,r10[0x0]
800043be:	14 19       	sub	r9,r10
800043c0:	f2 08 00 08 	add	r8,r9,r8
800043c4:	8d 08       	st.w	r6[0x0],r8
			vTaskSetTimeOutState( pxTimeOut );
800043c6:	0e 9c       	mov	r12,r7
800043c8:	f0 1f 00 08 	mcall	800043e8 <xTaskCheckForTimeOut+0x68>
800043cc:	30 07       	mov	r7,0
800043ce:	c0 28       	rjmp	800043d2 <xTaskCheckForTimeOut+0x52>
800043d0:	30 17       	mov	r7,1
		else
		{
			xReturn = pdTRUE;
		}
	}
	taskEXIT_CRITICAL();
800043d2:	f0 1f 00 07 	mcall	800043ec <xTaskCheckForTimeOut+0x6c>

	return xReturn;
}
800043d6:	0e 9c       	mov	r12,r7
800043d8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800043dc:	80 00       	ld.sh	r0,r0[0x0]
800043de:	38 ec       	mov	r12,-114
800043e0:	00 00       	add	r0,r0
800043e2:	07 d8       	ld.ub	r8,r3[0x5]
800043e4:	00 00       	add	r0,r0
800043e6:	06 b4       	st.h	r3++,r4
800043e8:	80 00       	ld.sh	r0,r0[0x0]
800043ea:	40 e4       	lddsp	r4,sp[0x38]
800043ec:	80 00       	ld.sh	r0,r0[0x0]
800043ee:	39 f8       	mov	r8,-97

800043f0 <xTaskResumeAll>:
	++uxSchedulerSuspended;
}
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
800043f0:	eb cd 40 fe 	pushm	r1-r7,lr
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
800043f4:	f0 1f 00 2c 	mcall	800044a4 <xTaskResumeAll+0xb4>
	{
		--uxSchedulerSuspended;
800043f8:	4a c8       	lddpc	r8,800044a8 <xTaskResumeAll+0xb8>
800043fa:	70 09       	ld.w	r9,r8[0x0]
800043fc:	20 19       	sub	r9,1
800043fe:	91 09       	st.w	r8[0x0],r9

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
80004400:	70 08       	ld.w	r8,r8[0x0]
80004402:	58 08       	cp.w	r8,0
80004404:	c4 91       	brne	80004496 <xTaskResumeAll+0xa6>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0 )
80004406:	4a a8       	lddpc	r8,800044ac <xTaskResumeAll+0xbc>
80004408:	70 08       	ld.w	r8,r8[0x0]
8000440a:	58 08       	cp.w	r8,0
8000440c:	c4 50       	breq	80004496 <xTaskResumeAll+0xa6>
8000440e:	30 04       	mov	r4,0
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
80004410:	4a 85       	lddpc	r5,800044b0 <xTaskResumeAll+0xc0>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
					vListRemove( &( pxTCB->xEventListItem ) );
					vListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyQueue( pxTCB );
80004412:	4a 93       	lddpc	r3,800044b4 <xTaskResumeAll+0xc4>
80004414:	4a 92       	lddpc	r2,800044b8 <xTaskResumeAll+0xc8>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
80004416:	4a a1       	lddpc	r1,800044bc <xTaskResumeAll+0xcc>
80004418:	c1 e8       	rjmp	80004454 <xTaskResumeAll+0x64>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
8000441a:	6a 38       	ld.w	r8,r5[0xc]
8000441c:	70 37       	ld.w	r7,r8[0xc]
					vListRemove( &( pxTCB->xEventListItem ) );
8000441e:	ee cc ff e8 	sub	r12,r7,-24
80004422:	f0 1f 00 28 	mcall	800044c0 <xTaskResumeAll+0xd0>
					vListRemove( &( pxTCB->xGenericListItem ) );
80004426:	ee c6 ff fc 	sub	r6,r7,-4
8000442a:	0c 9c       	mov	r12,r6
8000442c:	f0 1f 00 25 	mcall	800044c0 <xTaskResumeAll+0xd0>
					prvAddTaskToReadyQueue( pxTCB );
80004430:	6e bc       	ld.w	r12,r7[0x2c]
80004432:	66 08       	ld.w	r8,r3[0x0]
80004434:	10 3c       	cp.w	r12,r8
80004436:	e7 fc ba 00 	st.whi	r3[0x0],r12
8000443a:	f8 0c 00 2c 	add	r12,r12,r12<<0x2
8000443e:	0c 9b       	mov	r11,r6
80004440:	e4 0c 00 2c 	add	r12,r2,r12<<0x2
80004444:	f0 1f 00 20 	mcall	800044c4 <xTaskResumeAll+0xd4>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
80004448:	62 08       	ld.w	r8,r1[0x0]
8000444a:	6e b9       	ld.w	r9,r7[0x2c]
8000444c:	70 b8       	ld.w	r8,r8[0x2c]
8000444e:	10 39       	cp.w	r9,r8
80004450:	f9 b4 02 01 	movhs	r4,1
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
80004454:	6a 08       	ld.w	r8,r5[0x0]
80004456:	58 08       	cp.w	r8,0
80004458:	ce 11       	brne	8000441a <xTaskResumeAll+0x2a>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
8000445a:	49 c8       	lddpc	r8,800044c8 <xTaskResumeAll+0xd8>
8000445c:	70 08       	ld.w	r8,r8[0x0]
8000445e:	58 08       	cp.w	r8,0
80004460:	c0 f0       	breq	8000447e <xTaskResumeAll+0x8e>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
80004462:	49 a8       	lddpc	r8,800044c8 <xTaskResumeAll+0xd8>
80004464:	70 08       	ld.w	r8,r8[0x0]
80004466:	58 08       	cp.w	r8,0
80004468:	c1 10       	breq	8000448a <xTaskResumeAll+0x9a>
					{
						vTaskIncrementTick();
						--uxMissedTicks;
8000446a:	49 87       	lddpc	r7,800044c8 <xTaskResumeAll+0xd8>
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
					{
						vTaskIncrementTick();
8000446c:	f0 1f 00 18 	mcall	800044cc <xTaskResumeAll+0xdc>
						--uxMissedTicks;
80004470:	6e 08       	ld.w	r8,r7[0x0]
80004472:	20 18       	sub	r8,1
80004474:	8f 08       	st.w	r7[0x0],r8
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
80004476:	6e 08       	ld.w	r8,r7[0x0]
80004478:	58 08       	cp.w	r8,0
8000447a:	cf 91       	brne	8000446c <xTaskResumeAll+0x7c>
8000447c:	c0 78       	rjmp	8000448a <xTaskResumeAll+0x9a>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
8000447e:	58 14       	cp.w	r4,1
80004480:	c0 50       	breq	8000448a <xTaskResumeAll+0x9a>
80004482:	49 48       	lddpc	r8,800044d0 <xTaskResumeAll+0xe0>
80004484:	70 08       	ld.w	r8,r8[0x0]
80004486:	58 18       	cp.w	r8,1
80004488:	c0 71       	brne	80004496 <xTaskResumeAll+0xa6>
				{
					xAlreadyYielded = pdTRUE;
					xMissedYield = pdFALSE;
8000448a:	30 09       	mov	r9,0
8000448c:	49 18       	lddpc	r8,800044d0 <xTaskResumeAll+0xe0>
8000448e:	91 09       	st.w	r8[0x0],r9
					portYIELD_WITHIN_API();
80004490:	d7 33       	scall
80004492:	30 17       	mov	r7,1
80004494:	c0 28       	rjmp	80004498 <xTaskResumeAll+0xa8>
80004496:	30 07       	mov	r7,0
				}
			}
		}
	}
	taskEXIT_CRITICAL();
80004498:	f0 1f 00 0f 	mcall	800044d4 <xTaskResumeAll+0xe4>

	return xAlreadyYielded;
}
8000449c:	0e 9c       	mov	r12,r7
8000449e:	e3 cd 80 fe 	ldm	sp++,r1-r7,pc
800044a2:	00 00       	add	r0,r0
800044a4:	80 00       	ld.sh	r0,r0[0x0]
800044a6:	38 ec       	mov	r12,-114
800044a8:	00 00       	add	r0,r0
800044aa:	07 cc       	ld.ub	r12,r3[0x4]
800044ac:	00 00       	add	r0,r0
800044ae:	07 a0       	ld.ub	r0,r3[0x2]
800044b0:	00 00       	add	r0,r0
800044b2:	06 98       	mov	r8,r3
800044b4:	00 00       	add	r0,r0
800044b6:	06 ac       	st.w	r3++,r12
800044b8:	00 00       	add	r0,r0
800044ba:	06 b8       	st.h	r3++,r8
800044bc:	00 00       	add	r0,r0
800044be:	07 88       	ld.ub	r8,r3[0x0]
800044c0:	80 00       	ld.sh	r0,r0[0x0]
800044c2:	38 32       	mov	r2,-125
800044c4:	80 00       	ld.sh	r0,r0[0x0]
800044c6:	37 e2       	mov	r2,126
800044c8:	00 00       	add	r0,r0
800044ca:	07 d0       	ld.ub	r0,r3[0x5]
800044cc:	80 00       	ld.sh	r0,r0[0x0]
800044ce:	42 6c       	lddsp	r12,sp[0x98]
800044d0:	00 00       	add	r0,r0
800044d2:	07 7c       	ld.ub	r12,--r3
800044d4:	80 00       	ld.sh	r0,r0[0x0]
800044d6:	39 f8       	mov	r8,-97

800044d8 <prvAddCurrentTaskToDelayedList>:
	#endif
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
800044d8:	eb cd 40 80 	pushm	r7,lr
800044dc:	18 97       	mov	r7,r12
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
800044de:	49 08       	lddpc	r8,8000451c <prvAddCurrentTaskToDelayedList+0x44>
800044e0:	70 08       	ld.w	r8,r8[0x0]
800044e2:	91 1c       	st.w	r8[0x4],r12

	if( xTimeToWake < xTickCount )
800044e4:	48 f8       	lddpc	r8,80004520 <prvAddCurrentTaskToDelayedList+0x48>
800044e6:	70 08       	ld.w	r8,r8[0x0]
800044e8:	10 3c       	cp.w	r12,r8
800044ea:	c0 a2       	brcc	800044fe <prvAddCurrentTaskToDelayedList+0x26>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
800044ec:	48 c8       	lddpc	r8,8000451c <prvAddCurrentTaskToDelayedList+0x44>
800044ee:	70 0b       	ld.w	r11,r8[0x0]
800044f0:	48 d8       	lddpc	r8,80004524 <prvAddCurrentTaskToDelayedList+0x4c>
800044f2:	70 0c       	ld.w	r12,r8[0x0]
800044f4:	2f cb       	sub	r11,-4
800044f6:	f0 1f 00 0d 	mcall	80004528 <prvAddCurrentTaskToDelayedList+0x50>
800044fa:	e3 cd 80 80 	ldm	sp++,r7,pc
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
800044fe:	48 88       	lddpc	r8,8000451c <prvAddCurrentTaskToDelayedList+0x44>
80004500:	70 0b       	ld.w	r11,r8[0x0]
80004502:	48 b8       	lddpc	r8,8000452c <prvAddCurrentTaskToDelayedList+0x54>
80004504:	70 0c       	ld.w	r12,r8[0x0]
80004506:	2f cb       	sub	r11,-4
80004508:	f0 1f 00 08 	mcall	80004528 <prvAddCurrentTaskToDelayedList+0x50>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
8000450c:	48 98       	lddpc	r8,80004530 <prvAddCurrentTaskToDelayedList+0x58>
8000450e:	70 08       	ld.w	r8,r8[0x0]
80004510:	10 37       	cp.w	r7,r8
80004512:	c0 32       	brcc	80004518 <prvAddCurrentTaskToDelayedList+0x40>
		{
			xNextTaskUnblockTime = xTimeToWake;
80004514:	48 78       	lddpc	r8,80004530 <prvAddCurrentTaskToDelayedList+0x58>
80004516:	91 07       	st.w	r8[0x0],r7
80004518:	e3 cd 80 80 	ldm	sp++,r7,pc
8000451c:	00 00       	add	r0,r0
8000451e:	07 88       	ld.ub	r8,r3[0x0]
80004520:	00 00       	add	r0,r0
80004522:	06 b4       	st.h	r3++,r4
80004524:	00 00       	add	r0,r0
80004526:	07 58       	ld.sh	r8,--r3
80004528:	80 00       	ld.sh	r0,r0[0x0]
8000452a:	37 fe       	mov	lr,127
8000452c:	00 00       	add	r0,r0
8000452e:	07 74       	ld.ub	r4,--r3
80004530:	00 00       	add	r0,r0
80004532:	00 38       	cp.w	r8,r0

80004534 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
80004534:	eb cd 40 c0 	pushm	r6-r7,lr
80004538:	18 97       	mov	r7,r12
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0 )
8000453a:	58 0c       	cp.w	r12,0
8000453c:	c1 10       	breq	8000455e <vTaskDelay+0x2a>
		{
			vTaskSuspendAll();
8000453e:	f0 1f 00 0a 	mcall	80004564 <vTaskDelay+0x30>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
80004542:	48 a8       	lddpc	r8,80004568 <vTaskDelay+0x34>
80004544:	70 06       	ld.w	r6,r8[0x0]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
80004546:	48 a8       	lddpc	r8,8000456c <vTaskDelay+0x38>
80004548:	70 0c       	ld.w	r12,r8[0x0]
8000454a:	2f cc       	sub	r12,-4
8000454c:	f0 1f 00 09 	mcall	80004570 <vTaskDelay+0x3c>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
80004550:	ee 06 00 0c 	add	r12,r7,r6
80004554:	f0 1f 00 08 	mcall	80004574 <vTaskDelay+0x40>
			}
			xAlreadyYielded = xTaskResumeAll();
80004558:	f0 1f 00 08 	mcall	80004578 <vTaskDelay+0x44>
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( !xAlreadyYielded )
8000455c:	c0 21       	brne	80004560 <vTaskDelay+0x2c>
		{
			portYIELD_WITHIN_API();
8000455e:	d7 33       	scall
80004560:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80004564:	80 00       	ld.sh	r0,r0[0x0]
80004566:	3f f0       	mov	r0,-1
80004568:	00 00       	add	r0,r0
8000456a:	06 b4       	st.h	r3++,r4
8000456c:	00 00       	add	r0,r0
8000456e:	07 88       	ld.ub	r8,r3[0x0]
80004570:	80 00       	ld.sh	r0,r0[0x0]
80004572:	38 32       	mov	r2,-125
80004574:	80 00       	ld.sh	r0,r0[0x0]
80004576:	44 d8       	lddsp	r8,sp[0x134]
80004578:	80 00       	ld.sh	r0,r0[0x0]
8000457a:	43 f0       	lddsp	r0,sp[0xfc]

8000457c <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
8000457c:	eb cd 40 c0 	pushm	r6-r7,lr
80004580:	16 96       	mov	r6,r11
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
80004582:	48 e7       	lddpc	r7,800045b8 <vTaskPlaceOnEventList+0x3c>
80004584:	6e 0b       	ld.w	r11,r7[0x0]
80004586:	2e 8b       	sub	r11,-24
80004588:	f0 1f 00 0d 	mcall	800045bc <vTaskPlaceOnEventList+0x40>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
8000458c:	6e 0c       	ld.w	r12,r7[0x0]
8000458e:	2f cc       	sub	r12,-4
80004590:	f0 1f 00 0c 	mcall	800045c0 <vTaskPlaceOnEventList+0x44>


	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
80004594:	5b f6       	cp.w	r6,-1
80004596:	c0 81       	brne	800045a6 <vTaskPlaceOnEventList+0x2a>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
80004598:	6e 0b       	ld.w	r11,r7[0x0]
8000459a:	2f cb       	sub	r11,-4
8000459c:	48 ac       	lddpc	r12,800045c4 <vTaskPlaceOnEventList+0x48>
8000459e:	f0 1f 00 0b 	mcall	800045c8 <vTaskPlaceOnEventList+0x4c>
800045a2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
800045a6:	48 a8       	lddpc	r8,800045cc <vTaskPlaceOnEventList+0x50>
800045a8:	70 0c       	ld.w	r12,r8[0x0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
800045aa:	ec 0c 00 0c 	add	r12,r6,r12
800045ae:	f0 1f 00 09 	mcall	800045d0 <vTaskPlaceOnEventList+0x54>
800045b2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800045b6:	00 00       	add	r0,r0
800045b8:	00 00       	add	r0,r0
800045ba:	07 88       	ld.ub	r8,r3[0x0]
800045bc:	80 00       	ld.sh	r0,r0[0x0]
800045be:	37 fe       	mov	lr,127
800045c0:	80 00       	ld.sh	r0,r0[0x0]
800045c2:	38 32       	mov	r2,-125
800045c4:	00 00       	add	r0,r0
800045c6:	07 8c       	ld.ub	r12,r3[0x0]
800045c8:	80 00       	ld.sh	r0,r0[0x0]
800045ca:	37 e2       	mov	r2,126
800045cc:	00 00       	add	r0,r0
800045ce:	06 b4       	st.h	r3++,r4
800045d0:	80 00       	ld.sh	r0,r0[0x0]
800045d2:	44 d8       	lddsp	r8,sp[0x134]

800045d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
800045d4:	eb cd 40 f8 	pushm	r3-r7,lr
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0 )
800045d8:	49 57       	lddpc	r7,8000462c <prvIdleTask+0x58>
		{
			vTaskSuspendAll();
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
800045da:	49 64       	lddpc	r4,80004630 <prvIdleTask+0x5c>

				taskENTER_CRITICAL();
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
					vListRemove( &( pxTCB->xGenericListItem ) );
					--uxCurrentNumberOfTasks;
800045dc:	49 63       	lddpc	r3,80004634 <prvIdleTask+0x60>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
800045de:	49 75       	lddpc	r5,80004638 <prvIdleTask+0x64>
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0 )
800045e0:	6e 08       	ld.w	r8,r7[0x0]
800045e2:	58 08       	cp.w	r8,0
800045e4:	c1 e0       	breq	80004620 <prvIdleTask+0x4c>
		{
			vTaskSuspendAll();
800045e6:	f0 1f 00 16 	mcall	8000463c <prvIdleTask+0x68>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
800045ea:	68 06       	ld.w	r6,r4[0x0]
			xTaskResumeAll();
800045ec:	f0 1f 00 15 	mcall	80004640 <prvIdleTask+0x6c>

			if( xListIsEmpty == pdFALSE )
800045f0:	58 06       	cp.w	r6,0
800045f2:	c1 70       	breq	80004620 <prvIdleTask+0x4c>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
800045f4:	f0 1f 00 14 	mcall	80004644 <prvIdleTask+0x70>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
800045f8:	68 38       	ld.w	r8,r4[0xc]
800045fa:	70 36       	ld.w	r6,r8[0xc]
					vListRemove( &( pxTCB->xGenericListItem ) );
800045fc:	ec cc ff fc 	sub	r12,r6,-4
80004600:	f0 1f 00 12 	mcall	80004648 <prvIdleTask+0x74>
					--uxCurrentNumberOfTasks;
80004604:	66 08       	ld.w	r8,r3[0x0]
80004606:	20 18       	sub	r8,1
80004608:	87 08       	st.w	r3[0x0],r8
					--uxTasksDeleted;
8000460a:	6e 08       	ld.w	r8,r7[0x0]
8000460c:	20 18       	sub	r8,1
8000460e:	8f 08       	st.w	r7[0x0],r8
				}
				taskEXIT_CRITICAL();
80004610:	f0 1f 00 0f 	mcall	8000464c <prvIdleTask+0x78>

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
80004614:	6c cc       	ld.w	r12,r6[0x30]
80004616:	f0 1f 00 0f 	mcall	80004650 <prvIdleTask+0x7c>
		vPortFree( pxTCB );
8000461a:	0c 9c       	mov	r12,r6
8000461c:	f0 1f 00 0d 	mcall	80004650 <prvIdleTask+0x7c>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
80004620:	6a 08       	ld.w	r8,r5[0x0]
80004622:	58 18       	cp.w	r8,1
80004624:	fe 98 ff de 	brls	800045e0 <prvIdleTask+0xc>
			{
				taskYIELD();
80004628:	d7 33       	scall
8000462a:	cd bb       	rjmp	800045e0 <prvIdleTask+0xc>
8000462c:	00 00       	add	r0,r0
8000462e:	06 b0       	st.h	r3++,r0
80004630:	00 00       	add	r0,r0
80004632:	07 5c       	ld.sh	r12,--r3
80004634:	00 00       	add	r0,r0
80004636:	07 a0       	ld.ub	r0,r3[0x2]
80004638:	00 00       	add	r0,r0
8000463a:	06 b8       	st.h	r3++,r8
8000463c:	80 00       	ld.sh	r0,r0[0x0]
8000463e:	3f f0       	mov	r0,-1
80004640:	80 00       	ld.sh	r0,r0[0x0]
80004642:	43 f0       	lddsp	r0,sp[0xfc]
80004644:	80 00       	ld.sh	r0,r0[0x0]
80004646:	38 ec       	mov	r12,-114
80004648:	80 00       	ld.sh	r0,r0[0x0]
8000464a:	38 32       	mov	r2,-125
8000464c:	80 00       	ld.sh	r0,r0[0x0]
8000464e:	39 f8       	mov	r8,-97
80004650:	80 00       	ld.sh	r0,r0[0x0]
80004652:	3b 48       	mov	r8,-76

80004654 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
80004654:	d4 31       	pushm	r0-r7,lr
80004656:	20 1d       	sub	sp,4
80004658:	fa c4 ff d8 	sub	r4,sp,-40
8000465c:	50 0c       	stdsp	sp[0x0],r12
8000465e:	16 91       	mov	r1,r11
80004660:	14 97       	mov	r7,r10
80004662:	12 90       	mov	r0,r9
80004664:	10 93       	mov	r3,r8
80004666:	68 02       	ld.w	r2,r4[0x0]
80004668:	68 16       	ld.w	r6,r4[0x4]
{
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
8000466a:	35 0c       	mov	r12,80
8000466c:	f0 1f 00 5e 	mcall	800047e4 <xTaskGenericCreate+0x190>
80004670:	18 95       	mov	r5,r12

	if( pxNewTCB != NULL )
80004672:	c0 31       	brne	80004678 <xTaskGenericCreate+0x24>
80004674:	3f fc       	mov	r12,-1
80004676:	cb 28       	rjmp	800047da <xTaskGenericCreate+0x186>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
80004678:	58 06       	cp.w	r6,0
8000467a:	e0 81 00 b2 	brne	800047de <xTaskGenericCreate+0x18a>
8000467e:	0e 9c       	mov	r12,r7
80004680:	5c 7c       	castu.h	r12
80004682:	a3 6c       	lsl	r12,0x2
80004684:	f0 1f 00 58 	mcall	800047e4 <xTaskGenericCreate+0x190>
80004688:	18 96       	mov	r6,r12
8000468a:	8b cc       	st.w	r5[0x30],r12

		if( pxNewTCB->pxStack == NULL )
8000468c:	c0 61       	brne	80004698 <xTaskGenericCreate+0x44>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
8000468e:	0a 9c       	mov	r12,r5
80004690:	f0 1f 00 56 	mcall	800047e8 <xTaskGenericCreate+0x194>
80004694:	3f fc       	mov	r12,-1
80004696:	ca 28       	rjmp	800047da <xTaskGenericCreate+0x186>
			pxNewTCB = NULL;
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, tskSTACK_FILL_BYTE, usStackDepth * sizeof( portSTACK_TYPE ) );
80004698:	5c 77       	castu.h	r7
8000469a:	ee 0a 15 02 	lsl	r10,r7,0x2
8000469e:	e0 6b 00 a5 	mov	r11,165
800046a2:	0c 9c       	mov	r12,r6
800046a4:	f0 1f 00 52 	mcall	800047ec <xTaskGenericCreate+0x198>
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( unsigned long ) pxTopOfStack ) & ( ( unsigned long ) ~portBYTE_ALIGNMENT_MASK  ) );
800046a8:	ee c6 00 01 	sub	r6,r7,1
800046ac:	6a c8       	ld.w	r8,r5[0x30]
800046ae:	f0 06 00 26 	add	r6,r8,r6<<0x2
800046b2:	e0 16 ff fc 	andl	r6,0xfffc
{
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
800046b6:	31 4a       	mov	r10,20
800046b8:	02 9b       	mov	r11,r1
800046ba:	ea cc ff cc 	sub	r12,r5,-52
800046be:	f0 1f 00 4d 	mcall	800047f0 <xTaskGenericCreate+0x19c>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
800046c2:	30 08       	mov	r8,0
800046c4:	eb 68 00 47 	st.b	r5[71],r8
800046c8:	58 73       	cp.w	r3,7
800046ca:	e6 07 17 80 	movls	r7,r3
800046ce:	f9 b7 0b 07 	movhi	r7,7
	if( uxPriority >= configMAX_PRIORITIES )
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
	}

	pxTCB->uxPriority = uxPriority;
800046d2:	8b b7       	st.w	r5[0x2c],r7
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
800046d4:	eb 47 00 4c 	st.w	r5[76],r7
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
800046d8:	ea c4 ff fc 	sub	r4,r5,-4
800046dc:	08 9c       	mov	r12,r4
800046de:	f0 1f 00 46 	mcall	800047f4 <xTaskGenericCreate+0x1a0>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
800046e2:	ea cc ff e8 	sub	r12,r5,-24
800046e6:	f0 1f 00 44 	mcall	800047f4 <xTaskGenericCreate+0x1a0>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
800046ea:	8b 45       	st.w	r5[0x10],r5

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
800046ec:	ee 07 11 08 	rsub	r7,r7,8
800046f0:	8b 67       	st.w	r5[0x18],r7
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
800046f2:	8b 95       	st.w	r5[0x24],r5
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
800046f4:	00 9a       	mov	r10,r0
800046f6:	40 0b       	lddsp	r11,sp[0x0]
800046f8:	0c 9c       	mov	r12,r6
800046fa:	f0 1f 00 40 	mcall	800047f8 <xTaskGenericCreate+0x1a4>
800046fe:	8b 0c       	st.w	r5[0x0],r12
		if( ( void * ) pxCreatedTask != NULL )
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
80004700:	58 02       	cp.w	r2,0
80004702:	e5 f5 1a 00 	st.wne	r2[0x0],r5
		}

		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
80004706:	f0 1f 00 3e 	mcall	800047fc <xTaskGenericCreate+0x1a8>
		{
			uxCurrentNumberOfTasks++;
8000470a:	4b e8       	lddpc	r8,80004800 <xTaskGenericCreate+0x1ac>
8000470c:	70 09       	ld.w	r9,r8[0x0]
8000470e:	2f f9       	sub	r9,-1
80004710:	91 09       	st.w	r8[0x0],r9
			if( pxCurrentTCB == NULL )
80004712:	4b d8       	lddpc	r8,80004804 <xTaskGenericCreate+0x1b0>
80004714:	70 08       	ld.w	r8,r8[0x0]
80004716:	58 08       	cp.w	r8,0
80004718:	c2 61       	brne	80004764 <xTaskGenericCreate+0x110>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
8000471a:	4b b8       	lddpc	r8,80004804 <xTaskGenericCreate+0x1b0>
8000471c:	91 05       	st.w	r8[0x0],r5

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
8000471e:	4b 98       	lddpc	r8,80004800 <xTaskGenericCreate+0x1ac>
80004720:	70 08       	ld.w	r8,r8[0x0]
80004722:	58 18       	cp.w	r8,1
80004724:	c2 b1       	brne	8000477a <xTaskGenericCreate+0x126>
80004726:	4b 97       	lddpc	r7,80004808 <xTaskGenericCreate+0x1b4>

/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
80004728:	ee c6 ff 60 	sub	r6,r7,-160
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
8000472c:	0e 9c       	mov	r12,r7
8000472e:	f0 1f 00 38 	mcall	8000480c <xTaskGenericCreate+0x1b8>
80004732:	2e c7       	sub	r7,-20

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
80004734:	0c 37       	cp.w	r7,r6
80004736:	cf b1       	brne	8000472c <xTaskGenericCreate+0xd8>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
80004738:	4b 67       	lddpc	r7,80004810 <xTaskGenericCreate+0x1bc>
8000473a:	0e 9c       	mov	r12,r7
8000473c:	f0 1f 00 34 	mcall	8000480c <xTaskGenericCreate+0x1b8>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
80004740:	4b 56       	lddpc	r6,80004814 <xTaskGenericCreate+0x1c0>
80004742:	0c 9c       	mov	r12,r6
80004744:	f0 1f 00 32 	mcall	8000480c <xTaskGenericCreate+0x1b8>
	vListInitialise( ( xList * ) &xPendingReadyList );
80004748:	4b 4c       	lddpc	r12,80004818 <xTaskGenericCreate+0x1c4>
8000474a:	f0 1f 00 31 	mcall	8000480c <xTaskGenericCreate+0x1b8>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
8000474e:	4b 4c       	lddpc	r12,8000481c <xTaskGenericCreate+0x1c8>
80004750:	f0 1f 00 2f 	mcall	8000480c <xTaskGenericCreate+0x1b8>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
80004754:	4b 3c       	lddpc	r12,80004820 <xTaskGenericCreate+0x1cc>
80004756:	f0 1f 00 2e 	mcall	8000480c <xTaskGenericCreate+0x1b8>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
8000475a:	4b 38       	lddpc	r8,80004824 <xTaskGenericCreate+0x1d0>
8000475c:	91 07       	st.w	r8[0x0],r7
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
8000475e:	4b 38       	lddpc	r8,80004828 <xTaskGenericCreate+0x1d4>
80004760:	91 06       	st.w	r8[0x0],r6
80004762:	c0 c8       	rjmp	8000477a <xTaskGenericCreate+0x126>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
80004764:	4b 28       	lddpc	r8,8000482c <xTaskGenericCreate+0x1d8>
80004766:	70 08       	ld.w	r8,r8[0x0]
80004768:	58 08       	cp.w	r8,0
8000476a:	c0 81       	brne	8000477a <xTaskGenericCreate+0x126>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
8000476c:	4a 68       	lddpc	r8,80004804 <xTaskGenericCreate+0x1b0>
8000476e:	70 08       	ld.w	r8,r8[0x0]
80004770:	70 b8       	ld.w	r8,r8[0x2c]
80004772:	10 33       	cp.w	r3,r8
80004774:	c0 33       	brcs	8000477a <xTaskGenericCreate+0x126>
					{
						pxCurrentTCB = pxNewTCB;
80004776:	4a 48       	lddpc	r8,80004804 <xTaskGenericCreate+0x1b0>
80004778:	91 05       	st.w	r8[0x0],r5
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
8000477a:	6a b8       	ld.w	r8,r5[0x2c]
8000477c:	4a d9       	lddpc	r9,80004830 <xTaskGenericCreate+0x1dc>
8000477e:	72 09       	ld.w	r9,r9[0x0]
80004780:	12 38       	cp.w	r8,r9
80004782:	e0 88 00 04 	brls	8000478a <xTaskGenericCreate+0x136>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
80004786:	4a b9       	lddpc	r9,80004830 <xTaskGenericCreate+0x1dc>
80004788:	93 08       	st.w	r9[0x0],r8
			}

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
8000478a:	4a b8       	lddpc	r8,80004834 <xTaskGenericCreate+0x1e0>
8000478c:	70 09       	ld.w	r9,r8[0x0]
8000478e:	eb 49 00 48 	st.w	r5[72],r9
			}
			#endif
			uxTaskNumber++;
80004792:	70 09       	ld.w	r9,r8[0x0]
80004794:	2f f9       	sub	r9,-1
80004796:	91 09       	st.w	r8[0x0],r9

			prvAddTaskToReadyQueue( pxNewTCB );
80004798:	6a b8       	ld.w	r8,r5[0x2c]
8000479a:	4a 89       	lddpc	r9,80004838 <xTaskGenericCreate+0x1e4>
8000479c:	72 09       	ld.w	r9,r9[0x0]
8000479e:	12 38       	cp.w	r8,r9
800047a0:	e0 88 00 04 	brls	800047a8 <xTaskGenericCreate+0x154>
800047a4:	4a 59       	lddpc	r9,80004838 <xTaskGenericCreate+0x1e4>
800047a6:	93 08       	st.w	r9[0x0],r8
800047a8:	6a bc       	ld.w	r12,r5[0x2c]
800047aa:	f8 0c 00 2c 	add	r12,r12,r12<<0x2
800047ae:	08 9b       	mov	r11,r4
800047b0:	49 68       	lddpc	r8,80004808 <xTaskGenericCreate+0x1b4>
800047b2:	f0 0c 00 2c 	add	r12,r8,r12<<0x2
800047b6:	f0 1f 00 22 	mcall	8000483c <xTaskGenericCreate+0x1e8>

			xReturn = pdPASS;
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
800047ba:	f0 1f 00 22 	mcall	80004840 <xTaskGenericCreate+0x1ec>
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
800047be:	49 c8       	lddpc	r8,8000482c <xTaskGenericCreate+0x1d8>
800047c0:	70 08       	ld.w	r8,r8[0x0]
800047c2:	58 08       	cp.w	r8,0
800047c4:	c0 a0       	breq	800047d8 <xTaskGenericCreate+0x184>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
800047c6:	49 08       	lddpc	r8,80004804 <xTaskGenericCreate+0x1b0>
800047c8:	70 08       	ld.w	r8,r8[0x0]
800047ca:	70 b8       	ld.w	r8,r8[0x2c]
800047cc:	10 33       	cp.w	r3,r8
800047ce:	e0 88 00 05 	brls	800047d8 <xTaskGenericCreate+0x184>
			{
				portYIELD_WITHIN_API();
800047d2:	d7 33       	scall
800047d4:	30 1c       	mov	r12,1
800047d6:	c0 28       	rjmp	800047da <xTaskGenericCreate+0x186>
800047d8:	30 1c       	mov	r12,1
			}
		}
	}

	return xReturn;
}
800047da:	2f fd       	sub	sp,-4
800047dc:	d8 32       	popm	r0-r7,pc
	if( pxNewTCB != NULL )
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
800047de:	99 c6       	st.w	r12[0x30],r6
800047e0:	c5 cb       	rjmp	80004698 <xTaskGenericCreate+0x44>
800047e2:	00 00       	add	r0,r0
800047e4:	80 00       	ld.sh	r0,r0[0x0]
800047e6:	3b 70       	mov	r0,-73
800047e8:	80 00       	ld.sh	r0,r0[0x0]
800047ea:	3b 48       	mov	r8,-76
800047ec:	80 00       	ld.sh	r0,r0[0x0]
800047ee:	4f 08       	lddpc	r8,800049ac <_malloc_r+0x24>
800047f0:	80 00       	ld.sh	r0,r0[0x0]
800047f2:	52 10       	stdsp	sp[0x84],r0
800047f4:	80 00       	ld.sh	r0,r0[0x0]
800047f6:	37 dc       	mov	r12,125
800047f8:	80 00       	ld.sh	r0,r0[0x0]
800047fa:	38 58       	mov	r8,-123
800047fc:	80 00       	ld.sh	r0,r0[0x0]
800047fe:	38 ec       	mov	r12,-114
80004800:	00 00       	add	r0,r0
80004802:	07 a0       	ld.ub	r0,r3[0x2]
80004804:	00 00       	add	r0,r0
80004806:	07 88       	ld.ub	r8,r3[0x0]
80004808:	00 00       	add	r0,r0
8000480a:	06 b8       	st.h	r3++,r8
8000480c:	80 00       	ld.sh	r0,r0[0x0]
8000480e:	37 c8       	mov	r8,124
80004810:	00 00       	add	r0,r0
80004812:	07 a4       	ld.ub	r4,r3[0x2]
80004814:	00 00       	add	r0,r0
80004816:	07 b8       	ld.ub	r8,r3[0x3]
80004818:	00 00       	add	r0,r0
8000481a:	06 98       	mov	r8,r3
8000481c:	00 00       	add	r0,r0
8000481e:	07 5c       	ld.sh	r12,--r3
80004820:	00 00       	add	r0,r0
80004822:	07 8c       	ld.ub	r12,r3[0x0]
80004824:	00 00       	add	r0,r0
80004826:	07 74       	ld.ub	r4,--r3
80004828:	00 00       	add	r0,r0
8000482a:	07 58       	ld.sh	r8,--r3
8000482c:	00 00       	add	r0,r0
8000482e:	07 78       	ld.ub	r8,--r3
80004830:	00 00       	add	r0,r0
80004832:	07 dc       	ld.ub	r12,r3[0x5]
80004834:	00 00       	add	r0,r0
80004836:	07 80       	ld.ub	r0,r3[0x0]
80004838:	00 00       	add	r0,r0
8000483a:	06 ac       	st.w	r3++,r12
8000483c:	80 00       	ld.sh	r0,r0[0x0]
8000483e:	37 e2       	mov	r2,126
80004840:	80 00       	ld.sh	r0,r0[0x0]
80004842:	39 f8       	mov	r8,-97

80004844 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
80004844:	d4 01       	pushm	lr
portBASE_TYPE xReturn;

	/* Add the idle task at the lowest priority. */
	xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), ( xTaskHandle * ) NULL );
80004846:	30 09       	mov	r9,0
80004848:	1a d9       	st.w	--sp,r9
8000484a:	1a d9       	st.w	--sp,r9
8000484c:	1a d9       	st.w	--sp,r9
8000484e:	12 98       	mov	r8,r9
80004850:	e0 6a 01 00 	mov	r10,256
80004854:	48 9b       	lddpc	r11,80004878 <vTaskStartScheduler+0x34>
80004856:	48 ac       	lddpc	r12,8000487c <vTaskStartScheduler+0x38>
80004858:	f0 1f 00 0a 	mcall	80004880 <vTaskStartScheduler+0x3c>
			xReturn = xTimerCreateTimerTask();
		}
	}
	#endif

	if( xReturn == pdPASS )
8000485c:	2f dd       	sub	sp,-12
8000485e:	58 1c       	cp.w	r12,1
80004860:	c0 a1       	brne	80004874 <vTaskStartScheduler+0x30>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
80004862:	d3 03       	ssrf	0x10

		xSchedulerRunning = pdTRUE;
80004864:	30 19       	mov	r9,1
80004866:	48 88       	lddpc	r8,80004884 <vTaskStartScheduler+0x40>
80004868:	91 09       	st.w	r8[0x0],r9
		xTickCount = ( portTickType ) 0;
8000486a:	30 09       	mov	r9,0
8000486c:	48 78       	lddpc	r8,80004888 <vTaskStartScheduler+0x44>
8000486e:	91 09       	st.w	r8[0x0],r9
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() )
80004870:	f0 1f 00 07 	mcall	8000488c <vTaskStartScheduler+0x48>
80004874:	d8 02       	popm	pc
80004876:	00 00       	add	r0,r0
80004878:	80 00       	ld.sh	r0,r0[0x0]
8000487a:	aa 0c       	st.h	r5[0x0],r12
8000487c:	80 00       	ld.sh	r0,r0[0x0]
8000487e:	45 d4       	lddsp	r4,sp[0x174]
80004880:	80 00       	ld.sh	r0,r0[0x0]
80004882:	46 54       	lddsp	r4,sp[0x194]
80004884:	00 00       	add	r0,r0
80004886:	07 78       	ld.ub	r8,--r3
80004888:	00 00       	add	r0,r0
8000488a:	06 b4       	st.h	r3++,r4
8000488c:	80 00       	ld.sh	r0,r0[0x0]
8000488e:	38 fc       	mov	r12,-113

80004890 <__avr32_f32_cmp_lt>:
80004890:	f8 0a 15 01 	lsl	r10,r12,0x1
80004894:	f6 09 15 01 	lsl	r9,r11,0x1
80004898:	f5 ba 00 00 	subfeq	r10,0
8000489c:	5e 0d       	reteq	0
8000489e:	fc 18 ff 00 	movh	r8,0xff00
800048a2:	10 3a       	cp.w	r10,r8
800048a4:	5e bd       	rethi	0
800048a6:	10 39       	cp.w	r9,r8
800048a8:	5e bd       	rethi	0
800048aa:	f7 ec 20 08 	eor	r8,r11,r12
800048ae:	ed bc 00 1f 	bld	r12,0x1f
800048b2:	5f 38       	srlo	r8
800048b4:	5e 68       	retmi	r8
800048b6:	c0 43       	brcs	800048be <__avr32_f32_cmp_lt+0x2e>
800048b8:	16 3c       	cp.w	r12,r11
800048ba:	5e 2d       	reths	0
800048bc:	5e 3f       	retlo	1
800048be:	18 3b       	cp.w	r11,r12
800048c0:	5e 2d       	reths	0
800048c2:	5e 3f       	retlo	1

800048c4 <__avr32_s32_to_f32>:
800048c4:	58 0c       	cp.w	r12,0
800048c6:	5e 0c       	reteq	r12
800048c8:	18 9b       	mov	r11,r12
800048ca:	5c 4c       	abs	r12
800048cc:	e0 6a 00 9e 	mov	r10,158
800048d0:	f8 09 12 00 	clz	r9,r12
800048d4:	12 1a       	sub	r10,r9
800048d6:	f8 09 09 4c 	lsl	r12,r12,r9
800048da:	58 0a       	cp.w	r10,0
800048dc:	e0 8a 00 15 	brle	80004906 <__avr32_s32_to_f32_subnormal>
800048e0:	37 f9       	mov	r9,127
800048e2:	ed bc 00 08 	bld	r12,0x8
800048e6:	f7 b9 00 ff 	subeq	r9,-1
800048ea:	12 0c       	add	r12,r9
800048ec:	f7 ba 03 fe 	sublo	r10,-2
800048f0:	ed bc 00 1f 	bld	r12,0x1f
800048f4:	f7 ba 01 01 	subne	r10,1
800048f8:	f8 0c 16 07 	lsr	r12,r12,0x7
800048fc:	f9 da d3 08 	bfins	r12,r10,0x18,0x8
80004900:	a1 7b       	lsl	r11,0x1
80004902:	5d 0c       	ror	r12
80004904:	5e fc       	retal	r12

80004906 <__avr32_s32_to_f32_subnormal>:
80004906:	f4 0a 11 01 	rsub	r10,r10,1
8000490a:	59 9a       	cp.w	r10,25
8000490c:	f9 bc 02 00 	movhs	r12,0
80004910:	c1 32       	brcc	80004936 <__avr32_s32_to_f32_subnormal+0x30>
80004912:	f4 09 11 20 	rsub	r9,r10,32
80004916:	f8 09 09 49 	lsl	r9,r12,r9
8000491a:	5f 19       	srne	r9
8000491c:	f8 0a 0a 4c 	lsr	r12,r12,r10
80004920:	12 4c       	or	r12,r9
80004922:	37 f9       	mov	r9,127
80004924:	ed bc 00 08 	bld	r12,0x8
80004928:	f7 b9 00 ff 	subeq	r9,-1
8000492c:	12 0c       	add	r12,r9
8000492e:	f8 0c 16 07 	lsr	r12,r12,0x7
80004932:	a1 7b       	lsl	r11,0x1
80004934:	5d 0c       	ror	r12
80004936:	5e fc       	retal	r12

80004938 <atexit>:
80004938:	d4 01       	pushm	lr
8000493a:	30 09       	mov	r9,0
8000493c:	18 9b       	mov	r11,r12
8000493e:	12 9a       	mov	r10,r9
80004940:	12 9c       	mov	r12,r9
80004942:	e0 a0 05 0d 	rcall	8000535c <__register_exitproc>
80004946:	d8 02       	popm	pc

80004948 <exit>:
80004948:	d4 21       	pushm	r4-r7,lr
8000494a:	30 0b       	mov	r11,0
8000494c:	18 97       	mov	r7,r12
8000494e:	e0 a0 05 59 	rcall	80005400 <__call_exitprocs>
80004952:	fe c8 9f 3a 	sub	r8,pc,-24774
80004956:	70 0c       	ld.w	r12,r8[0x0]
80004958:	78 a8       	ld.w	r8,r12[0x28]
8000495a:	58 08       	cp.w	r8,0
8000495c:	c0 20       	breq	80004960 <exit+0x18>
8000495e:	5d 18       	icall	r8
80004960:	0e 9c       	mov	r12,r7
80004962:	e0 a0 04 6c 	rcall	8000523a <_exit>
80004966:	d7 03       	nop

80004968 <free>:
80004968:	d4 01       	pushm	lr
8000496a:	e0 68 01 30 	mov	r8,304
8000496e:	18 9b       	mov	r11,r12
80004970:	70 0c       	ld.w	r12,r8[0x0]
80004972:	e0 a0 06 9f 	rcall	800056b0 <_free_r>
80004976:	d8 02       	popm	pc

80004978 <malloc>:
80004978:	d4 01       	pushm	lr
8000497a:	e0 68 01 30 	mov	r8,304
8000497e:	18 9b       	mov	r11,r12
80004980:	70 0c       	ld.w	r12,r8[0x0]
80004982:	c0 3c       	rcall	80004988 <_malloc_r>
80004984:	d8 02       	popm	pc
80004986:	d7 03       	nop

80004988 <_malloc_r>:
80004988:	d4 31       	pushm	r0-r7,lr
8000498a:	f6 c8 ff f5 	sub	r8,r11,-11
8000498e:	18 95       	mov	r5,r12
80004990:	10 97       	mov	r7,r8
80004992:	e0 17 ff f8 	andl	r7,0xfff8
80004996:	59 68       	cp.w	r8,22
80004998:	f9 b7 08 10 	movls	r7,16
8000499c:	16 37       	cp.w	r7,r11
8000499e:	5f 38       	srlo	r8
800049a0:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
800049a4:	c0 50       	breq	800049ae <_malloc_r+0x26>
800049a6:	30 c8       	mov	r8,12
800049a8:	99 38       	st.w	r12[0xc],r8
800049aa:	e0 8f 01 fa 	bral	80004d9e <_malloc_r+0x416>
800049ae:	fe b0 f8 77 	rcall	80003a9c <__malloc_lock>
800049b2:	e0 47 01 f7 	cp.w	r7,503
800049b6:	e0 8b 00 1d 	brhi	800049f0 <_malloc_r+0x68>
800049ba:	ee 03 16 03 	lsr	r3,r7,0x3
800049be:	e0 68 01 34 	mov	r8,308
800049c2:	f0 03 00 38 	add	r8,r8,r3<<0x3
800049c6:	70 36       	ld.w	r6,r8[0xc]
800049c8:	10 36       	cp.w	r6,r8
800049ca:	c0 61       	brne	800049d6 <_malloc_r+0x4e>
800049cc:	ec c8 ff f8 	sub	r8,r6,-8
800049d0:	70 36       	ld.w	r6,r8[0xc]
800049d2:	10 36       	cp.w	r6,r8
800049d4:	c0 c0       	breq	800049ec <_malloc_r+0x64>
800049d6:	6c 18       	ld.w	r8,r6[0x4]
800049d8:	e0 18 ff fc 	andl	r8,0xfffc
800049dc:	6c 3a       	ld.w	r10,r6[0xc]
800049de:	ec 08 00 09 	add	r9,r6,r8
800049e2:	0a 9c       	mov	r12,r5
800049e4:	6c 28       	ld.w	r8,r6[0x8]
800049e6:	95 28       	st.w	r10[0x8],r8
800049e8:	91 3a       	st.w	r8[0xc],r10
800049ea:	c4 78       	rjmp	80004a78 <_malloc_r+0xf0>
800049ec:	2f e3       	sub	r3,-2
800049ee:	c4 d8       	rjmp	80004a88 <_malloc_r+0x100>
800049f0:	ee 03 16 09 	lsr	r3,r7,0x9
800049f4:	c0 41       	brne	800049fc <_malloc_r+0x74>
800049f6:	ee 03 16 03 	lsr	r3,r7,0x3
800049fa:	c2 68       	rjmp	80004a46 <_malloc_r+0xbe>
800049fc:	58 43       	cp.w	r3,4
800049fe:	e0 8b 00 06 	brhi	80004a0a <_malloc_r+0x82>
80004a02:	ee 03 16 06 	lsr	r3,r7,0x6
80004a06:	2c 83       	sub	r3,-56
80004a08:	c1 f8       	rjmp	80004a46 <_malloc_r+0xbe>
80004a0a:	59 43       	cp.w	r3,20
80004a0c:	e0 8b 00 04 	brhi	80004a14 <_malloc_r+0x8c>
80004a10:	2a 53       	sub	r3,-91
80004a12:	c1 a8       	rjmp	80004a46 <_malloc_r+0xbe>
80004a14:	e0 43 00 54 	cp.w	r3,84
80004a18:	e0 8b 00 06 	brhi	80004a24 <_malloc_r+0x9c>
80004a1c:	ee 03 16 0c 	lsr	r3,r7,0xc
80004a20:	29 23       	sub	r3,-110
80004a22:	c1 28       	rjmp	80004a46 <_malloc_r+0xbe>
80004a24:	e0 43 01 54 	cp.w	r3,340
80004a28:	e0 8b 00 06 	brhi	80004a34 <_malloc_r+0xac>
80004a2c:	ee 03 16 0f 	lsr	r3,r7,0xf
80004a30:	28 93       	sub	r3,-119
80004a32:	c0 a8       	rjmp	80004a46 <_malloc_r+0xbe>
80004a34:	e0 43 05 54 	cp.w	r3,1364
80004a38:	e0 88 00 04 	brls	80004a40 <_malloc_r+0xb8>
80004a3c:	37 e3       	mov	r3,126
80004a3e:	c0 48       	rjmp	80004a46 <_malloc_r+0xbe>
80004a40:	ee 03 16 12 	lsr	r3,r7,0x12
80004a44:	28 43       	sub	r3,-124
80004a46:	e0 6a 01 34 	mov	r10,308
80004a4a:	f4 03 00 3a 	add	r10,r10,r3<<0x3
80004a4e:	74 36       	ld.w	r6,r10[0xc]
80004a50:	c1 98       	rjmp	80004a82 <_malloc_r+0xfa>
80004a52:	6c 19       	ld.w	r9,r6[0x4]
80004a54:	e0 19 ff fc 	andl	r9,0xfffc
80004a58:	f2 07 01 0b 	sub	r11,r9,r7
80004a5c:	58 fb       	cp.w	r11,15
80004a5e:	e0 8a 00 04 	brle	80004a66 <_malloc_r+0xde>
80004a62:	20 13       	sub	r3,1
80004a64:	c1 18       	rjmp	80004a86 <_malloc_r+0xfe>
80004a66:	6c 38       	ld.w	r8,r6[0xc]
80004a68:	58 0b       	cp.w	r11,0
80004a6a:	c0 b5       	brlt	80004a80 <_malloc_r+0xf8>
80004a6c:	6c 2a       	ld.w	r10,r6[0x8]
80004a6e:	ec 09 00 09 	add	r9,r6,r9
80004a72:	0a 9c       	mov	r12,r5
80004a74:	91 2a       	st.w	r8[0x8],r10
80004a76:	95 38       	st.w	r10[0xc],r8
80004a78:	72 18       	ld.w	r8,r9[0x4]
80004a7a:	a1 a8       	sbr	r8,0x0
80004a7c:	93 18       	st.w	r9[0x4],r8
80004a7e:	cb c8       	rjmp	80004bf6 <_malloc_r+0x26e>
80004a80:	10 96       	mov	r6,r8
80004a82:	14 36       	cp.w	r6,r10
80004a84:	ce 71       	brne	80004a52 <_malloc_r+0xca>
80004a86:	2f f3       	sub	r3,-1
80004a88:	e0 6a 01 34 	mov	r10,308
80004a8c:	f4 cc ff f8 	sub	r12,r10,-8
80004a90:	78 26       	ld.w	r6,r12[0x8]
80004a92:	18 36       	cp.w	r6,r12
80004a94:	c6 c0       	breq	80004b6c <_malloc_r+0x1e4>
80004a96:	6c 19       	ld.w	r9,r6[0x4]
80004a98:	e0 19 ff fc 	andl	r9,0xfffc
80004a9c:	f2 07 01 08 	sub	r8,r9,r7
80004aa0:	58 f8       	cp.w	r8,15
80004aa2:	e0 89 00 8f 	brgt	80004bc0 <_malloc_r+0x238>
80004aa6:	99 3c       	st.w	r12[0xc],r12
80004aa8:	99 2c       	st.w	r12[0x8],r12
80004aaa:	58 08       	cp.w	r8,0
80004aac:	c0 55       	brlt	80004ab6 <_malloc_r+0x12e>
80004aae:	ec 09 00 09 	add	r9,r6,r9
80004ab2:	0a 9c       	mov	r12,r5
80004ab4:	ce 2b       	rjmp	80004a78 <_malloc_r+0xf0>
80004ab6:	e0 49 01 ff 	cp.w	r9,511
80004aba:	e0 8b 00 13 	brhi	80004ae0 <_malloc_r+0x158>
80004abe:	a3 99       	lsr	r9,0x3
80004ac0:	f4 09 00 38 	add	r8,r10,r9<<0x3
80004ac4:	70 2b       	ld.w	r11,r8[0x8]
80004ac6:	8d 38       	st.w	r6[0xc],r8
80004ac8:	8d 2b       	st.w	r6[0x8],r11
80004aca:	97 36       	st.w	r11[0xc],r6
80004acc:	91 26       	st.w	r8[0x8],r6
80004ace:	a3 49       	asr	r9,0x2
80004ad0:	74 18       	ld.w	r8,r10[0x4]
80004ad2:	30 1b       	mov	r11,1
80004ad4:	f6 09 09 49 	lsl	r9,r11,r9
80004ad8:	f1 e9 10 09 	or	r9,r8,r9
80004adc:	95 19       	st.w	r10[0x4],r9
80004ade:	c4 78       	rjmp	80004b6c <_malloc_r+0x1e4>
80004ae0:	f2 0a 16 09 	lsr	r10,r9,0x9
80004ae4:	58 4a       	cp.w	r10,4
80004ae6:	e0 8b 00 07 	brhi	80004af4 <_malloc_r+0x16c>
80004aea:	f2 0a 16 06 	lsr	r10,r9,0x6
80004aee:	2c 8a       	sub	r10,-56
80004af0:	c2 08       	rjmp	80004b30 <_malloc_r+0x1a8>
80004af2:	d7 03       	nop
80004af4:	59 4a       	cp.w	r10,20
80004af6:	e0 8b 00 04 	brhi	80004afe <_malloc_r+0x176>
80004afa:	2a 5a       	sub	r10,-91
80004afc:	c1 a8       	rjmp	80004b30 <_malloc_r+0x1a8>
80004afe:	e0 4a 00 54 	cp.w	r10,84
80004b02:	e0 8b 00 06 	brhi	80004b0e <_malloc_r+0x186>
80004b06:	f2 0a 16 0c 	lsr	r10,r9,0xc
80004b0a:	29 2a       	sub	r10,-110
80004b0c:	c1 28       	rjmp	80004b30 <_malloc_r+0x1a8>
80004b0e:	e0 4a 01 54 	cp.w	r10,340
80004b12:	e0 8b 00 06 	brhi	80004b1e <_malloc_r+0x196>
80004b16:	f2 0a 16 0f 	lsr	r10,r9,0xf
80004b1a:	28 9a       	sub	r10,-119
80004b1c:	c0 a8       	rjmp	80004b30 <_malloc_r+0x1a8>
80004b1e:	e0 4a 05 54 	cp.w	r10,1364
80004b22:	e0 88 00 04 	brls	80004b2a <_malloc_r+0x1a2>
80004b26:	37 ea       	mov	r10,126
80004b28:	c0 48       	rjmp	80004b30 <_malloc_r+0x1a8>
80004b2a:	f2 0a 16 12 	lsr	r10,r9,0x12
80004b2e:	28 4a       	sub	r10,-124
80004b30:	e0 6b 01 34 	mov	r11,308
80004b34:	f6 0a 00 34 	add	r4,r11,r10<<0x3
80004b38:	68 28       	ld.w	r8,r4[0x8]
80004b3a:	08 38       	cp.w	r8,r4
80004b3c:	c0 e1       	brne	80004b58 <_malloc_r+0x1d0>
80004b3e:	76 19       	ld.w	r9,r11[0x4]
80004b40:	a3 4a       	asr	r10,0x2
80004b42:	30 1e       	mov	lr,1
80004b44:	fc 0a 09 4a 	lsl	r10,lr,r10
80004b48:	f3 ea 10 0a 	or	r10,r9,r10
80004b4c:	10 99       	mov	r9,r8
80004b4e:	97 1a       	st.w	r11[0x4],r10
80004b50:	c0 a8       	rjmp	80004b64 <_malloc_r+0x1dc>
80004b52:	70 28       	ld.w	r8,r8[0x8]
80004b54:	08 38       	cp.w	r8,r4
80004b56:	c0 60       	breq	80004b62 <_malloc_r+0x1da>
80004b58:	70 1a       	ld.w	r10,r8[0x4]
80004b5a:	e0 1a ff fc 	andl	r10,0xfffc
80004b5e:	14 39       	cp.w	r9,r10
80004b60:	cf 93       	brcs	80004b52 <_malloc_r+0x1ca>
80004b62:	70 39       	ld.w	r9,r8[0xc]
80004b64:	8d 39       	st.w	r6[0xc],r9
80004b66:	8d 28       	st.w	r6[0x8],r8
80004b68:	91 36       	st.w	r8[0xc],r6
80004b6a:	93 26       	st.w	r9[0x8],r6
80004b6c:	e6 08 14 02 	asr	r8,r3,0x2
80004b70:	30 1b       	mov	r11,1
80004b72:	e0 64 01 34 	mov	r4,308
80004b76:	f6 08 09 4b 	lsl	r11,r11,r8
80004b7a:	68 18       	ld.w	r8,r4[0x4]
80004b7c:	10 3b       	cp.w	r11,r8
80004b7e:	e0 8b 00 6b 	brhi	80004c54 <_malloc_r+0x2cc>
80004b82:	f7 e8 00 09 	and	r9,r11,r8
80004b86:	c0 b1       	brne	80004b9c <_malloc_r+0x214>
80004b88:	e0 13 ff fc 	andl	r3,0xfffc
80004b8c:	a1 7b       	lsl	r11,0x1
80004b8e:	2f c3       	sub	r3,-4
80004b90:	c0 38       	rjmp	80004b96 <_malloc_r+0x20e>
80004b92:	2f c3       	sub	r3,-4
80004b94:	a1 7b       	lsl	r11,0x1
80004b96:	f7 e8 00 09 	and	r9,r11,r8
80004b9a:	cf c0       	breq	80004b92 <_malloc_r+0x20a>
80004b9c:	e8 03 00 3e 	add	lr,r4,r3<<0x3
80004ba0:	06 92       	mov	r2,r3
80004ba2:	1c 91       	mov	r1,lr
80004ba4:	62 36       	ld.w	r6,r1[0xc]
80004ba6:	c2 e8       	rjmp	80004c02 <_malloc_r+0x27a>
80004ba8:	6c 1a       	ld.w	r10,r6[0x4]
80004baa:	e0 1a ff fc 	andl	r10,0xfffc
80004bae:	f4 07 01 08 	sub	r8,r10,r7
80004bb2:	58 f8       	cp.w	r8,15
80004bb4:	e0 8a 00 15 	brle	80004bde <_malloc_r+0x256>
80004bb8:	6c 3a       	ld.w	r10,r6[0xc]
80004bba:	6c 29       	ld.w	r9,r6[0x8]
80004bbc:	95 29       	st.w	r10[0x8],r9
80004bbe:	93 3a       	st.w	r9[0xc],r10
80004bc0:	0e 99       	mov	r9,r7
80004bc2:	ec 07 00 07 	add	r7,r6,r7
80004bc6:	a1 a9       	sbr	r9,0x0
80004bc8:	99 37       	st.w	r12[0xc],r7
80004bca:	99 27       	st.w	r12[0x8],r7
80004bcc:	8d 19       	st.w	r6[0x4],r9
80004bce:	ee 08 09 08 	st.w	r7[r8],r8
80004bd2:	8f 2c       	st.w	r7[0x8],r12
80004bd4:	8f 3c       	st.w	r7[0xc],r12
80004bd6:	a1 a8       	sbr	r8,0x0
80004bd8:	0a 9c       	mov	r12,r5
80004bda:	8f 18       	st.w	r7[0x4],r8
80004bdc:	c0 d8       	rjmp	80004bf6 <_malloc_r+0x26e>
80004bde:	6c 39       	ld.w	r9,r6[0xc]
80004be0:	58 08       	cp.w	r8,0
80004be2:	c0 f5       	brlt	80004c00 <_malloc_r+0x278>
80004be4:	ec 0a 00 0a 	add	r10,r6,r10
80004be8:	74 18       	ld.w	r8,r10[0x4]
80004bea:	a1 a8       	sbr	r8,0x0
80004bec:	0a 9c       	mov	r12,r5
80004bee:	95 18       	st.w	r10[0x4],r8
80004bf0:	6c 28       	ld.w	r8,r6[0x8]
80004bf2:	93 28       	st.w	r9[0x8],r8
80004bf4:	91 39       	st.w	r8[0xc],r9
80004bf6:	fe b0 f7 59 	rcall	80003aa8 <__malloc_unlock>
80004bfa:	ec cc ff f8 	sub	r12,r6,-8
80004bfe:	d8 32       	popm	r0-r7,pc
80004c00:	12 96       	mov	r6,r9
80004c02:	02 36       	cp.w	r6,r1
80004c04:	cd 21       	brne	80004ba8 <_malloc_r+0x220>
80004c06:	2f f2       	sub	r2,-1
80004c08:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
80004c0c:	c0 30       	breq	80004c12 <_malloc_r+0x28a>
80004c0e:	2f 81       	sub	r1,-8
80004c10:	cc ab       	rjmp	80004ba4 <_malloc_r+0x21c>
80004c12:	1c 98       	mov	r8,lr
80004c14:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
80004c18:	c0 81       	brne	80004c28 <_malloc_r+0x2a0>
80004c1a:	68 19       	ld.w	r9,r4[0x4]
80004c1c:	f6 08 11 ff 	rsub	r8,r11,-1
80004c20:	f3 e8 00 08 	and	r8,r9,r8
80004c24:	89 18       	st.w	r4[0x4],r8
80004c26:	c0 78       	rjmp	80004c34 <_malloc_r+0x2ac>
80004c28:	f0 c9 00 08 	sub	r9,r8,8
80004c2c:	20 13       	sub	r3,1
80004c2e:	70 08       	ld.w	r8,r8[0x0]
80004c30:	12 38       	cp.w	r8,r9
80004c32:	cf 10       	breq	80004c14 <_malloc_r+0x28c>
80004c34:	a1 7b       	lsl	r11,0x1
80004c36:	68 18       	ld.w	r8,r4[0x4]
80004c38:	10 3b       	cp.w	r11,r8
80004c3a:	e0 8b 00 0d 	brhi	80004c54 <_malloc_r+0x2cc>
80004c3e:	58 0b       	cp.w	r11,0
80004c40:	c0 a0       	breq	80004c54 <_malloc_r+0x2cc>
80004c42:	04 93       	mov	r3,r2
80004c44:	c0 38       	rjmp	80004c4a <_malloc_r+0x2c2>
80004c46:	2f c3       	sub	r3,-4
80004c48:	a1 7b       	lsl	r11,0x1
80004c4a:	f7 e8 00 09 	and	r9,r11,r8
80004c4e:	ca 71       	brne	80004b9c <_malloc_r+0x214>
80004c50:	cf bb       	rjmp	80004c46 <_malloc_r+0x2be>
80004c52:	d7 03       	nop
80004c54:	68 23       	ld.w	r3,r4[0x8]
80004c56:	66 12       	ld.w	r2,r3[0x4]
80004c58:	e0 12 ff fc 	andl	r2,0xfffc
80004c5c:	0e 32       	cp.w	r2,r7
80004c5e:	5f 39       	srlo	r9
80004c60:	e4 07 01 08 	sub	r8,r2,r7
80004c64:	58 f8       	cp.w	r8,15
80004c66:	5f aa       	srle	r10
80004c68:	f5 e9 10 09 	or	r9,r10,r9
80004c6c:	e0 80 00 9a 	breq	80004da0 <_malloc_r+0x418>
80004c70:	e0 68 07 e8 	mov	r8,2024
80004c74:	70 01       	ld.w	r1,r8[0x0]
80004c76:	e0 68 05 40 	mov	r8,1344
80004c7a:	2f 01       	sub	r1,-16
80004c7c:	70 08       	ld.w	r8,r8[0x0]
80004c7e:	0e 01       	add	r1,r7
80004c80:	5b f8       	cp.w	r8,-1
80004c82:	c0 40       	breq	80004c8a <_malloc_r+0x302>
80004c84:	28 11       	sub	r1,-127
80004c86:	e0 11 ff 80 	andl	r1,0xff80
80004c8a:	02 9b       	mov	r11,r1
80004c8c:	0a 9c       	mov	r12,r5
80004c8e:	e0 a0 02 a5 	rcall	800051d8 <_sbrk_r>
80004c92:	18 96       	mov	r6,r12
80004c94:	5b fc       	cp.w	r12,-1
80004c96:	c7 50       	breq	80004d80 <_malloc_r+0x3f8>
80004c98:	e6 02 00 08 	add	r8,r3,r2
80004c9c:	10 3c       	cp.w	r12,r8
80004c9e:	c0 32       	brcc	80004ca4 <_malloc_r+0x31c>
80004ca0:	08 33       	cp.w	r3,r4
80004ca2:	c6 f1       	brne	80004d80 <_malloc_r+0x3f8>
80004ca4:	e0 6a 07 ec 	mov	r10,2028
80004ca8:	74 09       	ld.w	r9,r10[0x0]
80004caa:	e2 09 00 09 	add	r9,r1,r9
80004cae:	95 09       	st.w	r10[0x0],r9
80004cb0:	10 36       	cp.w	r6,r8
80004cb2:	c0 a1       	brne	80004cc6 <_malloc_r+0x33e>
80004cb4:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
80004cb8:	c0 71       	brne	80004cc6 <_malloc_r+0x33e>
80004cba:	e2 02 00 02 	add	r2,r1,r2
80004cbe:	68 28       	ld.w	r8,r4[0x8]
80004cc0:	a1 a2       	sbr	r2,0x0
80004cc2:	91 12       	st.w	r8[0x4],r2
80004cc4:	c4 f8       	rjmp	80004d62 <_malloc_r+0x3da>
80004cc6:	e0 6a 05 40 	mov	r10,1344
80004cca:	74 0b       	ld.w	r11,r10[0x0]
80004ccc:	5b fb       	cp.w	r11,-1
80004cce:	c0 31       	brne	80004cd4 <_malloc_r+0x34c>
80004cd0:	95 06       	st.w	r10[0x0],r6
80004cd2:	c0 78       	rjmp	80004ce0 <_malloc_r+0x358>
80004cd4:	ec 09 00 09 	add	r9,r6,r9
80004cd8:	e0 6a 07 ec 	mov	r10,2028
80004cdc:	10 19       	sub	r9,r8
80004cde:	95 09       	st.w	r10[0x0],r9
80004ce0:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
80004ce4:	f0 09 11 08 	rsub	r9,r8,8
80004ce8:	58 08       	cp.w	r8,0
80004cea:	f2 08 17 10 	movne	r8,r9
80004cee:	ed d8 e1 06 	addne	r6,r6,r8
80004cf2:	28 08       	sub	r8,-128
80004cf4:	ec 01 00 01 	add	r1,r6,r1
80004cf8:	0a 9c       	mov	r12,r5
80004cfa:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
80004cfe:	f0 01 01 01 	sub	r1,r8,r1
80004d02:	02 9b       	mov	r11,r1
80004d04:	e0 a0 02 6a 	rcall	800051d8 <_sbrk_r>
80004d08:	e0 68 07 ec 	mov	r8,2028
80004d0c:	5b fc       	cp.w	r12,-1
80004d0e:	ec 0c 17 00 	moveq	r12,r6
80004d12:	f9 b1 00 00 	moveq	r1,0
80004d16:	70 09       	ld.w	r9,r8[0x0]
80004d18:	0c 1c       	sub	r12,r6
80004d1a:	89 26       	st.w	r4[0x8],r6
80004d1c:	02 0c       	add	r12,r1
80004d1e:	12 01       	add	r1,r9
80004d20:	a1 ac       	sbr	r12,0x0
80004d22:	91 01       	st.w	r8[0x0],r1
80004d24:	8d 1c       	st.w	r6[0x4],r12
80004d26:	08 33       	cp.w	r3,r4
80004d28:	c1 d0       	breq	80004d62 <_malloc_r+0x3da>
80004d2a:	58 f2       	cp.w	r2,15
80004d2c:	e0 8b 00 05 	brhi	80004d36 <_malloc_r+0x3ae>
80004d30:	30 18       	mov	r8,1
80004d32:	8d 18       	st.w	r6[0x4],r8
80004d34:	c2 68       	rjmp	80004d80 <_malloc_r+0x3f8>
80004d36:	30 59       	mov	r9,5
80004d38:	20 c2       	sub	r2,12
80004d3a:	e0 12 ff f8 	andl	r2,0xfff8
80004d3e:	e6 02 00 08 	add	r8,r3,r2
80004d42:	91 29       	st.w	r8[0x8],r9
80004d44:	91 19       	st.w	r8[0x4],r9
80004d46:	66 18       	ld.w	r8,r3[0x4]
80004d48:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80004d4c:	e5 e8 10 08 	or	r8,r2,r8
80004d50:	87 18       	st.w	r3[0x4],r8
80004d52:	58 f2       	cp.w	r2,15
80004d54:	e0 88 00 07 	brls	80004d62 <_malloc_r+0x3da>
80004d58:	e6 cb ff f8 	sub	r11,r3,-8
80004d5c:	0a 9c       	mov	r12,r5
80004d5e:	e0 a0 04 a9 	rcall	800056b0 <_free_r>
80004d62:	e0 69 07 e4 	mov	r9,2020
80004d66:	72 0a       	ld.w	r10,r9[0x0]
80004d68:	e0 68 07 ec 	mov	r8,2028
80004d6c:	70 08       	ld.w	r8,r8[0x0]
80004d6e:	14 38       	cp.w	r8,r10
80004d70:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80004d74:	e0 69 07 e0 	mov	r9,2016
80004d78:	72 0a       	ld.w	r10,r9[0x0]
80004d7a:	14 38       	cp.w	r8,r10
80004d7c:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80004d80:	68 28       	ld.w	r8,r4[0x8]
80004d82:	70 18       	ld.w	r8,r8[0x4]
80004d84:	e0 18 ff fc 	andl	r8,0xfffc
80004d88:	0e 38       	cp.w	r8,r7
80004d8a:	5f 39       	srlo	r9
80004d8c:	0e 18       	sub	r8,r7
80004d8e:	58 f8       	cp.w	r8,15
80004d90:	5f aa       	srle	r10
80004d92:	f5 e9 10 09 	or	r9,r10,r9
80004d96:	c0 50       	breq	80004da0 <_malloc_r+0x418>
80004d98:	0a 9c       	mov	r12,r5
80004d9a:	fe b0 f6 87 	rcall	80003aa8 <__malloc_unlock>
80004d9e:	d8 3a       	popm	r0-r7,pc,r12=0
80004da0:	68 26       	ld.w	r6,r4[0x8]
80004da2:	a1 a8       	sbr	r8,0x0
80004da4:	0e 99       	mov	r9,r7
80004da6:	a1 a9       	sbr	r9,0x0
80004da8:	8d 19       	st.w	r6[0x4],r9
80004daa:	ec 07 00 07 	add	r7,r6,r7
80004dae:	0a 9c       	mov	r12,r5
80004db0:	89 27       	st.w	r4[0x8],r7
80004db2:	8f 18       	st.w	r7[0x4],r8
80004db4:	fe b0 f6 7a 	rcall	80003aa8 <__malloc_unlock>
80004db8:	ec cc ff f8 	sub	r12,r6,-8
80004dbc:	d8 32       	popm	r0-r7,pc
80004dbe:	d7 03       	nop

80004dc0 <memcpy>:
80004dc0:	58 8a       	cp.w	r10,8
80004dc2:	c2 f5       	brlt	80004e20 <memcpy+0x60>
80004dc4:	f9 eb 10 09 	or	r9,r12,r11
80004dc8:	e2 19 00 03 	andl	r9,0x3,COH
80004dcc:	e0 81 00 97 	brne	80004efa <memcpy+0x13a>
80004dd0:	e0 4a 00 20 	cp.w	r10,32
80004dd4:	c3 b4       	brge	80004e4a <memcpy+0x8a>
80004dd6:	f4 08 14 02 	asr	r8,r10,0x2
80004dda:	f0 09 11 08 	rsub	r9,r8,8
80004dde:	fe 09 00 2f 	add	pc,pc,r9<<0x2
80004de2:	76 69       	ld.w	r9,r11[0x18]
80004de4:	99 69       	st.w	r12[0x18],r9
80004de6:	76 59       	ld.w	r9,r11[0x14]
80004de8:	99 59       	st.w	r12[0x14],r9
80004dea:	76 49       	ld.w	r9,r11[0x10]
80004dec:	99 49       	st.w	r12[0x10],r9
80004dee:	76 39       	ld.w	r9,r11[0xc]
80004df0:	99 39       	st.w	r12[0xc],r9
80004df2:	76 29       	ld.w	r9,r11[0x8]
80004df4:	99 29       	st.w	r12[0x8],r9
80004df6:	76 19       	ld.w	r9,r11[0x4]
80004df8:	99 19       	st.w	r12[0x4],r9
80004dfa:	76 09       	ld.w	r9,r11[0x0]
80004dfc:	99 09       	st.w	r12[0x0],r9
80004dfe:	f6 08 00 2b 	add	r11,r11,r8<<0x2
80004e02:	f8 08 00 28 	add	r8,r12,r8<<0x2
80004e06:	e0 1a 00 03 	andl	r10,0x3
80004e0a:	f4 0a 11 04 	rsub	r10,r10,4
80004e0e:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
80004e12:	17 a9       	ld.ub	r9,r11[0x2]
80004e14:	b0 a9       	st.b	r8[0x2],r9
80004e16:	17 99       	ld.ub	r9,r11[0x1]
80004e18:	b0 99       	st.b	r8[0x1],r9
80004e1a:	17 89       	ld.ub	r9,r11[0x0]
80004e1c:	b0 89       	st.b	r8[0x0],r9
80004e1e:	5e fc       	retal	r12
80004e20:	f4 0a 11 09 	rsub	r10,r10,9
80004e24:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
80004e28:	17 f9       	ld.ub	r9,r11[0x7]
80004e2a:	b8 f9       	st.b	r12[0x7],r9
80004e2c:	17 e9       	ld.ub	r9,r11[0x6]
80004e2e:	b8 e9       	st.b	r12[0x6],r9
80004e30:	17 d9       	ld.ub	r9,r11[0x5]
80004e32:	b8 d9       	st.b	r12[0x5],r9
80004e34:	17 c9       	ld.ub	r9,r11[0x4]
80004e36:	b8 c9       	st.b	r12[0x4],r9
80004e38:	17 b9       	ld.ub	r9,r11[0x3]
80004e3a:	b8 b9       	st.b	r12[0x3],r9
80004e3c:	17 a9       	ld.ub	r9,r11[0x2]
80004e3e:	b8 a9       	st.b	r12[0x2],r9
80004e40:	17 99       	ld.ub	r9,r11[0x1]
80004e42:	b8 99       	st.b	r12[0x1],r9
80004e44:	17 89       	ld.ub	r9,r11[0x0]
80004e46:	b8 89       	st.b	r12[0x0],r9
80004e48:	5e fc       	retal	r12
80004e4a:	eb cd 40 c0 	pushm	r6-r7,lr
80004e4e:	18 99       	mov	r9,r12
80004e50:	22 0a       	sub	r10,32
80004e52:	b7 07       	ld.d	r6,r11++
80004e54:	b3 26       	st.d	r9++,r6
80004e56:	b7 07       	ld.d	r6,r11++
80004e58:	b3 26       	st.d	r9++,r6
80004e5a:	b7 07       	ld.d	r6,r11++
80004e5c:	b3 26       	st.d	r9++,r6
80004e5e:	b7 07       	ld.d	r6,r11++
80004e60:	b3 26       	st.d	r9++,r6
80004e62:	22 0a       	sub	r10,32
80004e64:	cf 74       	brge	80004e52 <memcpy+0x92>
80004e66:	2f 0a       	sub	r10,-16
80004e68:	c0 65       	brlt	80004e74 <memcpy+0xb4>
80004e6a:	b7 07       	ld.d	r6,r11++
80004e6c:	b3 26       	st.d	r9++,r6
80004e6e:	b7 07       	ld.d	r6,r11++
80004e70:	b3 26       	st.d	r9++,r6
80004e72:	21 0a       	sub	r10,16
80004e74:	5c 3a       	neg	r10
80004e76:	fe 0a 00 3f 	add	pc,pc,r10<<0x3
80004e7a:	d7 03       	nop
80004e7c:	d7 03       	nop
80004e7e:	f7 36 00 0e 	ld.ub	r6,r11[14]
80004e82:	f3 66 00 0e 	st.b	r9[14],r6
80004e86:	f7 36 00 0d 	ld.ub	r6,r11[13]
80004e8a:	f3 66 00 0d 	st.b	r9[13],r6
80004e8e:	f7 36 00 0c 	ld.ub	r6,r11[12]
80004e92:	f3 66 00 0c 	st.b	r9[12],r6
80004e96:	f7 36 00 0b 	ld.ub	r6,r11[11]
80004e9a:	f3 66 00 0b 	st.b	r9[11],r6
80004e9e:	f7 36 00 0a 	ld.ub	r6,r11[10]
80004ea2:	f3 66 00 0a 	st.b	r9[10],r6
80004ea6:	f7 36 00 09 	ld.ub	r6,r11[9]
80004eaa:	f3 66 00 09 	st.b	r9[9],r6
80004eae:	f7 36 00 08 	ld.ub	r6,r11[8]
80004eb2:	f3 66 00 08 	st.b	r9[8],r6
80004eb6:	f7 36 00 07 	ld.ub	r6,r11[7]
80004eba:	f3 66 00 07 	st.b	r9[7],r6
80004ebe:	f7 36 00 06 	ld.ub	r6,r11[6]
80004ec2:	f3 66 00 06 	st.b	r9[6],r6
80004ec6:	f7 36 00 05 	ld.ub	r6,r11[5]
80004eca:	f3 66 00 05 	st.b	r9[5],r6
80004ece:	f7 36 00 04 	ld.ub	r6,r11[4]
80004ed2:	f3 66 00 04 	st.b	r9[4],r6
80004ed6:	f7 36 00 03 	ld.ub	r6,r11[3]
80004eda:	f3 66 00 03 	st.b	r9[3],r6
80004ede:	f7 36 00 02 	ld.ub	r6,r11[2]
80004ee2:	f3 66 00 02 	st.b	r9[2],r6
80004ee6:	f7 36 00 01 	ld.ub	r6,r11[1]
80004eea:	f3 66 00 01 	st.b	r9[1],r6
80004eee:	f7 36 00 00 	ld.ub	r6,r11[0]
80004ef2:	f3 66 00 00 	st.b	r9[0],r6
80004ef6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80004efa:	20 1a       	sub	r10,1
80004efc:	f6 0a 07 09 	ld.ub	r9,r11[r10]
80004f00:	f8 0a 0b 09 	st.b	r12[r10],r9
80004f04:	cf b1       	brne	80004efa <memcpy+0x13a>
80004f06:	5e fc       	retal	r12

80004f08 <memset>:
80004f08:	18 98       	mov	r8,r12
80004f0a:	c0 38       	rjmp	80004f10 <memset+0x8>
80004f0c:	10 cb       	st.b	r8++,r11
80004f0e:	20 1a       	sub	r10,1
80004f10:	58 0a       	cp.w	r10,0
80004f12:	cf d1       	brne	80004f0c <memset+0x4>
80004f14:	5e fc       	retal	r12
80004f16:	d7 03       	nop

80004f18 <_realloc_r>:
80004f18:	d4 31       	pushm	r0-r7,lr
80004f1a:	20 1d       	sub	sp,4
80004f1c:	16 94       	mov	r4,r11
80004f1e:	18 92       	mov	r2,r12
80004f20:	14 9b       	mov	r11,r10
80004f22:	58 04       	cp.w	r4,0
80004f24:	c0 51       	brne	80004f2e <_realloc_r+0x16>
80004f26:	fe b0 fd 31 	rcall	80004988 <_malloc_r>
80004f2a:	18 95       	mov	r5,r12
80004f2c:	c5 39       	rjmp	800051d2 <_realloc_r+0x2ba>
80004f2e:	50 0a       	stdsp	sp[0x0],r10
80004f30:	fe b0 f5 b6 	rcall	80003a9c <__malloc_lock>
80004f34:	40 0b       	lddsp	r11,sp[0x0]
80004f36:	f6 c8 ff f5 	sub	r8,r11,-11
80004f3a:	e8 c1 00 08 	sub	r1,r4,8
80004f3e:	10 96       	mov	r6,r8
80004f40:	62 1c       	ld.w	r12,r1[0x4]
80004f42:	e0 16 ff f8 	andl	r6,0xfff8
80004f46:	59 68       	cp.w	r8,22
80004f48:	f9 b6 08 10 	movls	r6,16
80004f4c:	16 36       	cp.w	r6,r11
80004f4e:	5f 38       	srlo	r8
80004f50:	f1 e6 13 f8 	or	r8,r8,r6>>0x1f
80004f54:	c0 50       	breq	80004f5e <_realloc_r+0x46>
80004f56:	30 c8       	mov	r8,12
80004f58:	30 05       	mov	r5,0
80004f5a:	85 38       	st.w	r2[0xc],r8
80004f5c:	c3 b9       	rjmp	800051d2 <_realloc_r+0x2ba>
80004f5e:	18 90       	mov	r0,r12
80004f60:	e0 10 ff fc 	andl	r0,0xfffc
80004f64:	0c 30       	cp.w	r0,r6
80004f66:	e0 84 01 0b 	brge	8000517c <_realloc_r+0x264>
80004f6a:	e0 68 01 34 	mov	r8,308
80004f6e:	e2 00 00 09 	add	r9,r1,r0
80004f72:	70 25       	ld.w	r5,r8[0x8]
80004f74:	0a 39       	cp.w	r9,r5
80004f76:	c0 90       	breq	80004f88 <_realloc_r+0x70>
80004f78:	72 1a       	ld.w	r10,r9[0x4]
80004f7a:	a1 ca       	cbr	r10,0x0
80004f7c:	f2 0a 00 0a 	add	r10,r9,r10
80004f80:	74 1a       	ld.w	r10,r10[0x4]
80004f82:	ed ba 00 00 	bld	r10,0x0
80004f86:	c2 20       	breq	80004fca <_realloc_r+0xb2>
80004f88:	72 1a       	ld.w	r10,r9[0x4]
80004f8a:	e0 1a ff fc 	andl	r10,0xfffc
80004f8e:	f4 00 00 03 	add	r3,r10,r0
80004f92:	0a 39       	cp.w	r9,r5
80004f94:	c1 31       	brne	80004fba <_realloc_r+0xa2>
80004f96:	ec c7 ff f0 	sub	r7,r6,-16
80004f9a:	0e 33       	cp.w	r3,r7
80004f9c:	c1 95       	brlt	80004fce <_realloc_r+0xb6>
80004f9e:	e2 06 00 09 	add	r9,r1,r6
80004fa2:	0c 13       	sub	r3,r6
80004fa4:	a1 a3       	sbr	r3,0x0
80004fa6:	93 13       	st.w	r9[0x4],r3
80004fa8:	91 29       	st.w	r8[0x8],r9
80004faa:	04 9c       	mov	r12,r2
80004fac:	62 18       	ld.w	r8,r1[0x4]
80004fae:	08 95       	mov	r5,r4
80004fb0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80004fb4:	10 46       	or	r6,r8
80004fb6:	83 16       	st.w	r1[0x4],r6
80004fb8:	c0 b9       	rjmp	800051ce <_realloc_r+0x2b6>
80004fba:	0c 33       	cp.w	r3,r6
80004fbc:	c0 95       	brlt	80004fce <_realloc_r+0xb6>
80004fbe:	72 28       	ld.w	r8,r9[0x8]
80004fc0:	02 97       	mov	r7,r1
80004fc2:	72 39       	ld.w	r9,r9[0xc]
80004fc4:	93 28       	st.w	r9[0x8],r8
80004fc6:	91 39       	st.w	r8[0xc],r9
80004fc8:	cd c8       	rjmp	80005180 <_realloc_r+0x268>
80004fca:	30 0a       	mov	r10,0
80004fcc:	14 99       	mov	r9,r10
80004fce:	ed bc 00 00 	bld	r12,0x0
80004fd2:	e0 80 00 95 	breq	800050fc <_realloc_r+0x1e4>
80004fd6:	62 07       	ld.w	r7,r1[0x0]
80004fd8:	e2 07 01 07 	sub	r7,r1,r7
80004fdc:	6e 1c       	ld.w	r12,r7[0x4]
80004fde:	e0 1c ff fc 	andl	r12,0xfffc
80004fe2:	58 09       	cp.w	r9,0
80004fe4:	c5 60       	breq	80005090 <_realloc_r+0x178>
80004fe6:	f8 00 00 03 	add	r3,r12,r0
80004fea:	0a 39       	cp.w	r9,r5
80004fec:	c4 81       	brne	8000507c <_realloc_r+0x164>
80004fee:	14 03       	add	r3,r10
80004ff0:	ec c9 ff f0 	sub	r9,r6,-16
80004ff4:	12 33       	cp.w	r3,r9
80004ff6:	c4 d5       	brlt	80005090 <_realloc_r+0x178>
80004ff8:	6e 3a       	ld.w	r10,r7[0xc]
80004ffa:	6e 29       	ld.w	r9,r7[0x8]
80004ffc:	95 29       	st.w	r10[0x8],r9
80004ffe:	93 3a       	st.w	r9[0xc],r10
80005000:	ee c5 ff f8 	sub	r5,r7,-8
80005004:	e0 ca 00 04 	sub	r10,r0,4
80005008:	e0 4a 00 24 	cp.w	r10,36
8000500c:	e0 8b 00 25 	brhi	80005056 <_realloc_r+0x13e>
80005010:	0a 99       	mov	r9,r5
80005012:	59 3a       	cp.w	r10,19
80005014:	e0 88 00 1a 	brls	80005048 <_realloc_r+0x130>
80005018:	09 09       	ld.w	r9,r4++
8000501a:	8b 09       	st.w	r5[0x0],r9
8000501c:	09 09       	ld.w	r9,r4++
8000501e:	8f 39       	st.w	r7[0xc],r9
80005020:	ee c9 ff f0 	sub	r9,r7,-16
80005024:	59 ba       	cp.w	r10,27
80005026:	e0 88 00 11 	brls	80005048 <_realloc_r+0x130>
8000502a:	09 0b       	ld.w	r11,r4++
8000502c:	93 0b       	st.w	r9[0x0],r11
8000502e:	09 09       	ld.w	r9,r4++
80005030:	8f 59       	st.w	r7[0x14],r9
80005032:	ee c9 ff e8 	sub	r9,r7,-24
80005036:	e0 4a 00 24 	cp.w	r10,36
8000503a:	c0 71       	brne	80005048 <_realloc_r+0x130>
8000503c:	09 0a       	ld.w	r10,r4++
8000503e:	93 0a       	st.w	r9[0x0],r10
80005040:	ee c9 ff e0 	sub	r9,r7,-32
80005044:	09 0a       	ld.w	r10,r4++
80005046:	8f 7a       	st.w	r7[0x1c],r10
80005048:	09 0a       	ld.w	r10,r4++
8000504a:	12 aa       	st.w	r9++,r10
8000504c:	68 0a       	ld.w	r10,r4[0x0]
8000504e:	93 0a       	st.w	r9[0x0],r10
80005050:	68 1a       	ld.w	r10,r4[0x4]
80005052:	93 1a       	st.w	r9[0x4],r10
80005054:	c0 78       	rjmp	80005062 <_realloc_r+0x14a>
80005056:	50 08       	stdsp	sp[0x0],r8
80005058:	08 9b       	mov	r11,r4
8000505a:	0a 9c       	mov	r12,r5
8000505c:	e0 a0 04 14 	rcall	80005884 <memmove>
80005060:	40 08       	lddsp	r8,sp[0x0]
80005062:	ee 06 00 09 	add	r9,r7,r6
80005066:	0c 13       	sub	r3,r6
80005068:	a1 a3       	sbr	r3,0x0
8000506a:	93 13       	st.w	r9[0x4],r3
8000506c:	91 29       	st.w	r8[0x8],r9
8000506e:	04 9c       	mov	r12,r2
80005070:	6e 18       	ld.w	r8,r7[0x4]
80005072:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80005076:	10 46       	or	r6,r8
80005078:	8f 16       	st.w	r7[0x4],r6
8000507a:	ca a8       	rjmp	800051ce <_realloc_r+0x2b6>
8000507c:	14 03       	add	r3,r10
8000507e:	0c 33       	cp.w	r3,r6
80005080:	c0 85       	brlt	80005090 <_realloc_r+0x178>
80005082:	72 28       	ld.w	r8,r9[0x8]
80005084:	72 39       	ld.w	r9,r9[0xc]
80005086:	93 28       	st.w	r9[0x8],r8
80005088:	91 39       	st.w	r8[0xc],r9
8000508a:	6e 28       	ld.w	r8,r7[0x8]
8000508c:	6e 39       	ld.w	r9,r7[0xc]
8000508e:	c0 78       	rjmp	8000509c <_realloc_r+0x184>
80005090:	f8 00 00 03 	add	r3,r12,r0
80005094:	0c 33       	cp.w	r3,r6
80005096:	c3 35       	brlt	800050fc <_realloc_r+0x1e4>
80005098:	6e 39       	ld.w	r9,r7[0xc]
8000509a:	6e 28       	ld.w	r8,r7[0x8]
8000509c:	93 28       	st.w	r9[0x8],r8
8000509e:	91 39       	st.w	r8[0xc],r9
800050a0:	e0 ca 00 04 	sub	r10,r0,4
800050a4:	ee cc ff f8 	sub	r12,r7,-8
800050a8:	e0 4a 00 24 	cp.w	r10,36
800050ac:	e0 8b 00 24 	brhi	800050f4 <_realloc_r+0x1dc>
800050b0:	59 3a       	cp.w	r10,19
800050b2:	e0 88 00 1a 	brls	800050e6 <_realloc_r+0x1ce>
800050b6:	09 08       	ld.w	r8,r4++
800050b8:	99 08       	st.w	r12[0x0],r8
800050ba:	09 08       	ld.w	r8,r4++
800050bc:	8f 38       	st.w	r7[0xc],r8
800050be:	ee cc ff f0 	sub	r12,r7,-16
800050c2:	59 ba       	cp.w	r10,27
800050c4:	e0 88 00 11 	brls	800050e6 <_realloc_r+0x1ce>
800050c8:	09 08       	ld.w	r8,r4++
800050ca:	99 08       	st.w	r12[0x0],r8
800050cc:	09 08       	ld.w	r8,r4++
800050ce:	8f 58       	st.w	r7[0x14],r8
800050d0:	ee cc ff e8 	sub	r12,r7,-24
800050d4:	e0 4a 00 24 	cp.w	r10,36
800050d8:	c0 71       	brne	800050e6 <_realloc_r+0x1ce>
800050da:	09 08       	ld.w	r8,r4++
800050dc:	99 08       	st.w	r12[0x0],r8
800050de:	ee cc ff e0 	sub	r12,r7,-32
800050e2:	09 08       	ld.w	r8,r4++
800050e4:	8f 78       	st.w	r7[0x1c],r8
800050e6:	09 08       	ld.w	r8,r4++
800050e8:	18 a8       	st.w	r12++,r8
800050ea:	68 08       	ld.w	r8,r4[0x0]
800050ec:	99 08       	st.w	r12[0x0],r8
800050ee:	68 18       	ld.w	r8,r4[0x4]
800050f0:	99 18       	st.w	r12[0x4],r8
800050f2:	c4 78       	rjmp	80005180 <_realloc_r+0x268>
800050f4:	08 9b       	mov	r11,r4
800050f6:	e0 a0 03 c7 	rcall	80005884 <memmove>
800050fa:	c4 38       	rjmp	80005180 <_realloc_r+0x268>
800050fc:	04 9c       	mov	r12,r2
800050fe:	fe b0 fc 45 	rcall	80004988 <_malloc_r>
80005102:	18 95       	mov	r5,r12
80005104:	c3 a0       	breq	80005178 <_realloc_r+0x260>
80005106:	62 18       	ld.w	r8,r1[0x4]
80005108:	f8 c9 00 08 	sub	r9,r12,8
8000510c:	a1 c8       	cbr	r8,0x0
8000510e:	e2 08 00 08 	add	r8,r1,r8
80005112:	10 39       	cp.w	r9,r8
80005114:	c0 71       	brne	80005122 <_realloc_r+0x20a>
80005116:	72 13       	ld.w	r3,r9[0x4]
80005118:	02 97       	mov	r7,r1
8000511a:	e0 13 ff fc 	andl	r3,0xfffc
8000511e:	00 03       	add	r3,r0
80005120:	c3 08       	rjmp	80005180 <_realloc_r+0x268>
80005122:	e0 ca 00 04 	sub	r10,r0,4
80005126:	e0 4a 00 24 	cp.w	r10,36
8000512a:	e0 8b 00 20 	brhi	8000516a <_realloc_r+0x252>
8000512e:	08 99       	mov	r9,r4
80005130:	18 98       	mov	r8,r12
80005132:	59 3a       	cp.w	r10,19
80005134:	e0 88 00 14 	brls	8000515c <_realloc_r+0x244>
80005138:	13 0b       	ld.w	r11,r9++
8000513a:	10 ab       	st.w	r8++,r11
8000513c:	13 0b       	ld.w	r11,r9++
8000513e:	10 ab       	st.w	r8++,r11
80005140:	59 ba       	cp.w	r10,27
80005142:	e0 88 00 0d 	brls	8000515c <_realloc_r+0x244>
80005146:	13 0b       	ld.w	r11,r9++
80005148:	10 ab       	st.w	r8++,r11
8000514a:	13 0b       	ld.w	r11,r9++
8000514c:	10 ab       	st.w	r8++,r11
8000514e:	e0 4a 00 24 	cp.w	r10,36
80005152:	c0 51       	brne	8000515c <_realloc_r+0x244>
80005154:	13 0a       	ld.w	r10,r9++
80005156:	10 aa       	st.w	r8++,r10
80005158:	13 0a       	ld.w	r10,r9++
8000515a:	10 aa       	st.w	r8++,r10
8000515c:	13 0a       	ld.w	r10,r9++
8000515e:	10 aa       	st.w	r8++,r10
80005160:	72 0a       	ld.w	r10,r9[0x0]
80005162:	91 0a       	st.w	r8[0x0],r10
80005164:	72 19       	ld.w	r9,r9[0x4]
80005166:	91 19       	st.w	r8[0x4],r9
80005168:	c0 48       	rjmp	80005170 <_realloc_r+0x258>
8000516a:	08 9b       	mov	r11,r4
8000516c:	e0 a0 03 8c 	rcall	80005884 <memmove>
80005170:	08 9b       	mov	r11,r4
80005172:	04 9c       	mov	r12,r2
80005174:	e0 a0 02 9e 	rcall	800056b0 <_free_r>
80005178:	04 9c       	mov	r12,r2
8000517a:	c2 a8       	rjmp	800051ce <_realloc_r+0x2b6>
8000517c:	00 93       	mov	r3,r0
8000517e:	02 97       	mov	r7,r1
80005180:	e6 06 01 09 	sub	r9,r3,r6
80005184:	6e 18       	ld.w	r8,r7[0x4]
80005186:	58 f9       	cp.w	r9,15
80005188:	e0 88 00 16 	brls	800051b4 <_realloc_r+0x29c>
8000518c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80005190:	ed e8 10 08 	or	r8,r6,r8
80005194:	8f 18       	st.w	r7[0x4],r8
80005196:	12 98       	mov	r8,r9
80005198:	a1 a8       	sbr	r8,0x0
8000519a:	ee 06 00 0b 	add	r11,r7,r6
8000519e:	f6 09 00 09 	add	r9,r11,r9
800051a2:	97 18       	st.w	r11[0x4],r8
800051a4:	72 18       	ld.w	r8,r9[0x4]
800051a6:	a1 a8       	sbr	r8,0x0
800051a8:	2f 8b       	sub	r11,-8
800051aa:	93 18       	st.w	r9[0x4],r8
800051ac:	04 9c       	mov	r12,r2
800051ae:	e0 a0 02 81 	rcall	800056b0 <_free_r>
800051b2:	c0 b8       	rjmp	800051c8 <_realloc_r+0x2b0>
800051b4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800051b8:	e7 e8 10 08 	or	r8,r3,r8
800051bc:	8f 18       	st.w	r7[0x4],r8
800051be:	ee 03 00 03 	add	r3,r7,r3
800051c2:	66 18       	ld.w	r8,r3[0x4]
800051c4:	a1 a8       	sbr	r8,0x0
800051c6:	87 18       	st.w	r3[0x4],r8
800051c8:	04 9c       	mov	r12,r2
800051ca:	ee c5 ff f8 	sub	r5,r7,-8
800051ce:	fe b0 f4 6d 	rcall	80003aa8 <__malloc_unlock>
800051d2:	0a 9c       	mov	r12,r5
800051d4:	2f fd       	sub	sp,-4
800051d6:	d8 32       	popm	r0-r7,pc

800051d8 <_sbrk_r>:
800051d8:	d4 21       	pushm	r4-r7,lr
800051da:	30 08       	mov	r8,0
800051dc:	18 97       	mov	r7,r12
800051de:	e0 66 08 34 	mov	r6,2100
800051e2:	16 9c       	mov	r12,r11
800051e4:	8d 08       	st.w	r6[0x0],r8
800051e6:	c7 dc       	rcall	800052e0 <_sbrk>
800051e8:	5b fc       	cp.w	r12,-1
800051ea:	c0 51       	brne	800051f4 <_sbrk_r+0x1c>
800051ec:	6c 08       	ld.w	r8,r6[0x0]
800051ee:	58 08       	cp.w	r8,0
800051f0:	ef f8 1a 03 	st.wne	r7[0xc],r8
800051f4:	d8 22       	popm	r4-r7,pc
800051f6:	d7 03       	nop

800051f8 <strlen>:
800051f8:	30 09       	mov	r9,0
800051fa:	18 98       	mov	r8,r12
800051fc:	c0 28       	rjmp	80005200 <strlen+0x8>
800051fe:	2f f8       	sub	r8,-1
80005200:	11 8a       	ld.ub	r10,r8[0x0]
80005202:	f2 0a 18 00 	cp.b	r10,r9
80005206:	cf c1       	brne	800051fe <strlen+0x6>
80005208:	f0 0c 01 0c 	sub	r12,r8,r12
8000520c:	5e fc       	retal	r12
8000520e:	d7 03       	nop

80005210 <strncpy>:
80005210:	30 08       	mov	r8,0
80005212:	10 3a       	cp.w	r10,r8
80005214:	5e 0c       	reteq	r12
80005216:	f6 08 07 09 	ld.ub	r9,r11[r8]
8000521a:	f8 08 0b 09 	st.b	r12[r8],r9
8000521e:	2f f8       	sub	r8,-1
80005220:	58 09       	cp.w	r9,0
80005222:	cf 81       	brne	80005212 <strncpy+0x2>
80005224:	10 3a       	cp.w	r10,r8
80005226:	5e 0c       	reteq	r12
80005228:	f8 08 0b 09 	st.b	r12[r8],r9
8000522c:	2f f8       	sub	r8,-1
8000522e:	cf bb       	rjmp	80005224 <strncpy+0x14>

80005230 <_init_argv>:
80005230:	30 e8       	mov	r8,14
80005232:	d6 73       	breakpoint
80005234:	3f fc       	mov	r12,-1
80005236:	35 8b       	mov	r11,88
80005238:	5e fc       	retal	r12

8000523a <_exit>:
8000523a:	30 d8       	mov	r8,13
8000523c:	d6 73       	breakpoint
8000523e:	3f fc       	mov	r12,-1
80005240:	35 8b       	mov	r11,88
80005242:	c0 08       	rjmp	80005242 <_exit+0x8>

80005244 <_close>:
80005244:	30 28       	mov	r8,2
80005246:	d6 73       	breakpoint
80005248:	3f fc       	mov	r12,-1
8000524a:	35 8b       	mov	r11,88
8000524c:	58 0c       	cp.w	r12,0
8000524e:	5e 4c       	retge	r12
80005250:	e0 6a 08 34 	mov	r10,2100
80005254:	95 0b       	st.w	r10[0x0],r11
80005256:	5e fc       	retal	r12

80005258 <_lseek>:
80005258:	30 58       	mov	r8,5
8000525a:	d6 73       	breakpoint
8000525c:	3f fc       	mov	r12,-1
8000525e:	35 8b       	mov	r11,88
80005260:	58 0c       	cp.w	r12,0
80005262:	5e 4c       	retge	r12
80005264:	e0 6a 08 34 	mov	r10,2100
80005268:	95 0b       	st.w	r10[0x0],r11
8000526a:	5e fc       	retal	r12

8000526c <isatty>:
8000526c:	30 b8       	mov	r8,11
8000526e:	d6 73       	breakpoint
80005270:	3f fc       	mov	r12,-1
80005272:	35 8b       	mov	r11,88
80005274:	58 0c       	cp.w	r12,0
80005276:	5e 4c       	retge	r12
80005278:	e0 6a 08 34 	mov	r10,2100
8000527c:	95 0b       	st.w	r10[0x0],r11
8000527e:	5e fc       	retal	r12

80005280 <_fstat_host>:
80005280:	30 98       	mov	r8,9
80005282:	d6 73       	breakpoint
80005284:	3f fc       	mov	r12,-1
80005286:	35 8b       	mov	r11,88
80005288:	58 0c       	cp.w	r12,0
8000528a:	5e 4c       	retge	r12
8000528c:	e0 6a 08 34 	mov	r10,2100
80005290:	95 0b       	st.w	r10[0x0],r11
80005292:	5e fc       	retal	r12

80005294 <_fstat>:
80005294:	d4 21       	pushm	r4-r7,lr
80005296:	21 0d       	sub	sp,64
80005298:	16 97       	mov	r7,r11
8000529a:	1a 9b       	mov	r11,sp
8000529c:	cf 2f       	rcall	80005280 <_fstat_host>
8000529e:	c0 34       	brge	800052a4 <_fstat+0x10>
800052a0:	3f fc       	mov	r12,-1
800052a2:	c1 c8       	rjmp	800052da <_fstat+0x46>
800052a4:	40 08       	lddsp	r8,sp[0x0]
800052a6:	ae 08       	st.h	r7[0x0],r8
800052a8:	40 18       	lddsp	r8,sp[0x4]
800052aa:	ae 18       	st.h	r7[0x2],r8
800052ac:	40 28       	lddsp	r8,sp[0x8]
800052ae:	8f 18       	st.w	r7[0x4],r8
800052b0:	40 38       	lddsp	r8,sp[0xc]
800052b2:	ae 48       	st.h	r7[0x8],r8
800052b4:	40 48       	lddsp	r8,sp[0x10]
800052b6:	ae 58       	st.h	r7[0xa],r8
800052b8:	40 58       	lddsp	r8,sp[0x14]
800052ba:	ae 68       	st.h	r7[0xc],r8
800052bc:	40 68       	lddsp	r8,sp[0x18]
800052be:	ae 78       	st.h	r7[0xe],r8
800052c0:	40 88       	lddsp	r8,sp[0x20]
800052c2:	8f 48       	st.w	r7[0x10],r8
800052c4:	40 a8       	lddsp	r8,sp[0x28]
800052c6:	8f b8       	st.w	r7[0x2c],r8
800052c8:	40 c8       	lddsp	r8,sp[0x30]
800052ca:	8f c8       	st.w	r7[0x30],r8
800052cc:	40 d8       	lddsp	r8,sp[0x34]
800052ce:	8f 58       	st.w	r7[0x14],r8
800052d0:	40 e8       	lddsp	r8,sp[0x38]
800052d2:	30 0c       	mov	r12,0
800052d4:	8f 78       	st.w	r7[0x1c],r8
800052d6:	40 f8       	lddsp	r8,sp[0x3c]
800052d8:	8f 98       	st.w	r7[0x24],r8
800052da:	2f 0d       	sub	sp,-64
800052dc:	d8 22       	popm	r4-r7,pc
800052de:	d7 03       	nop

800052e0 <_sbrk>:
800052e0:	d4 01       	pushm	lr
800052e2:	e0 68 08 14 	mov	r8,2068
800052e6:	70 09       	ld.w	r9,r8[0x0]
800052e8:	58 09       	cp.w	r9,0
800052ea:	c0 41       	brne	800052f2 <_sbrk+0x12>
800052ec:	e0 69 08 38 	mov	r9,2104
800052f0:	91 09       	st.w	r8[0x0],r9
800052f2:	e0 69 08 14 	mov	r9,2068
800052f6:	e0 6a f0 00 	mov	r10,61440
800052fa:	72 08       	ld.w	r8,r9[0x0]
800052fc:	f0 0c 00 0c 	add	r12,r8,r12
80005300:	14 3c       	cp.w	r12,r10
80005302:	e0 8b 00 04 	brhi	8000530a <_sbrk+0x2a>
80005306:	93 0c       	st.w	r9[0x0],r12
80005308:	c0 58       	rjmp	80005312 <_sbrk+0x32>
8000530a:	ce 1c       	rcall	800054cc <__errno>
8000530c:	30 c8       	mov	r8,12
8000530e:	99 08       	st.w	r12[0x0],r8
80005310:	3f f8       	mov	r8,-1
80005312:	10 9c       	mov	r12,r8
80005314:	d8 02       	popm	pc
80005316:	d7 03       	nop

80005318 <_vsprintf_r>:
80005318:	d4 01       	pushm	lr
8000531a:	21 7d       	sub	sp,92
8000531c:	e0 68 ff ff 	mov	r8,65535
80005320:	ea 18 7f ff 	orh	r8,0x7fff
80005324:	50 58       	stdsp	sp[0x14],r8
80005326:	50 28       	stdsp	sp[0x8],r8
80005328:	e0 68 02 08 	mov	r8,520
8000532c:	ba 68       	st.h	sp[0xc],r8
8000532e:	3f f8       	mov	r8,-1
80005330:	50 4b       	stdsp	sp[0x10],r11
80005332:	50 0b       	stdsp	sp[0x0],r11
80005334:	ba 78       	st.h	sp[0xe],r8
80005336:	1a 9b       	mov	r11,sp
80005338:	e0 a0 04 9e 	rcall	80005c74 <_vfprintf_r>
8000533c:	30 09       	mov	r9,0
8000533e:	40 08       	lddsp	r8,sp[0x0]
80005340:	b0 89       	st.b	r8[0x0],r9
80005342:	2e 9d       	sub	sp,-92
80005344:	d8 02       	popm	pc
80005346:	d7 03       	nop

80005348 <vsprintf>:
80005348:	d4 01       	pushm	lr
8000534a:	e0 68 01 30 	mov	r8,304
8000534e:	14 99       	mov	r9,r10
80005350:	16 9a       	mov	r10,r11
80005352:	18 9b       	mov	r11,r12
80005354:	70 0c       	ld.w	r12,r8[0x0]
80005356:	ce 1f       	rcall	80005318 <_vsprintf_r>
80005358:	d8 02       	popm	pc
8000535a:	d7 03       	nop

8000535c <__register_exitproc>:
8000535c:	d4 31       	pushm	r0-r7,lr
8000535e:	fe c8 a9 46 	sub	r8,pc,-22202
80005362:	70 03       	ld.w	r3,r8[0x0]
80005364:	67 24       	ld.w	r4,r3[0x48]
80005366:	e6 c8 ff b4 	sub	r8,r3,-76
8000536a:	58 04       	cp.w	r4,0
8000536c:	f0 04 17 00 	moveq	r4,r8
80005370:	e7 f4 0a 12 	st.weq	r3[0x48],r4
80005374:	18 97       	mov	r7,r12
80005376:	16 96       	mov	r6,r11
80005378:	14 95       	mov	r5,r10
8000537a:	12 92       	mov	r2,r9
8000537c:	68 18       	ld.w	r8,r4[0x4]
8000537e:	59 f8       	cp.w	r8,31
80005380:	e0 8a 00 0e 	brle	8000539c <__register_exitproc+0x40>
80005384:	e0 6c 00 8c 	mov	r12,140
80005388:	fe b0 fa f8 	rcall	80004978 <malloc>
8000538c:	18 94       	mov	r4,r12
8000538e:	c3 80       	breq	800053fe <__register_exitproc+0xa2>
80005390:	67 28       	ld.w	r8,r3[0x48]
80005392:	99 08       	st.w	r12[0x0],r8
80005394:	e7 4c 00 48 	st.w	r3[72],r12
80005398:	30 08       	mov	r8,0
8000539a:	99 18       	st.w	r12[0x4],r8
8000539c:	58 07       	cp.w	r7,0
8000539e:	c2 70       	breq	800053ec <__register_exitproc+0x90>
800053a0:	e8 fc 00 88 	ld.w	r12,r4[136]
800053a4:	58 0c       	cp.w	r12,0
800053a6:	c0 d1       	brne	800053c0 <__register_exitproc+0x64>
800053a8:	e0 6c 01 08 	mov	r12,264
800053ac:	fe b0 fa e6 	rcall	80004978 <malloc>
800053b0:	c2 70       	breq	800053fe <__register_exitproc+0xa2>
800053b2:	30 08       	mov	r8,0
800053b4:	e9 4c 00 88 	st.w	r4[136],r12
800053b8:	f9 48 01 04 	st.w	r12[260],r8
800053bc:	f9 48 01 00 	st.w	r12[256],r8
800053c0:	68 18       	ld.w	r8,r4[0x4]
800053c2:	f0 c9 ff e0 	sub	r9,r8,-32
800053c6:	f8 08 09 25 	st.w	r12[r8<<0x2],r5
800053ca:	f8 09 09 22 	st.w	r12[r9<<0x2],r2
800053ce:	30 1a       	mov	r10,1
800053d0:	f8 f9 01 00 	ld.w	r9,r12[256]
800053d4:	f4 08 09 48 	lsl	r8,r10,r8
800053d8:	10 49       	or	r9,r8
800053da:	f9 49 01 00 	st.w	r12[256],r9
800053de:	58 27       	cp.w	r7,2
800053e0:	f9 f9 00 41 	ld.weq	r9,r12[0x104]
800053e4:	f3 d8 e0 38 	oreq	r8,r9,r8
800053e8:	f9 f8 0a 41 	st.weq	r12[0x104],r8
800053ec:	68 18       	ld.w	r8,r4[0x4]
800053ee:	30 0c       	mov	r12,0
800053f0:	f0 c9 ff ff 	sub	r9,r8,-1
800053f4:	2f e8       	sub	r8,-2
800053f6:	89 19       	st.w	r4[0x4],r9
800053f8:	e8 08 09 26 	st.w	r4[r8<<0x2],r6
800053fc:	d8 32       	popm	r0-r7,pc
800053fe:	dc 3a       	popm	r0-r7,pc,r12=-1

80005400 <__call_exitprocs>:
80005400:	d4 31       	pushm	r0-r7,lr
80005402:	20 3d       	sub	sp,12
80005404:	fe c8 a9 ec 	sub	r8,pc,-22036
80005408:	50 2c       	stdsp	sp[0x8],r12
8000540a:	70 08       	ld.w	r8,r8[0x0]
8000540c:	16 91       	mov	r1,r11
8000540e:	50 08       	stdsp	sp[0x0],r8
80005410:	2b 88       	sub	r8,-72
80005412:	50 18       	stdsp	sp[0x4],r8
80005414:	40 0a       	lddsp	r10,sp[0x0]
80005416:	40 14       	lddsp	r4,sp[0x4]
80005418:	75 27       	ld.w	r7,r10[0x48]
8000541a:	c5 58       	rjmp	800054c4 <__call_exitprocs+0xc4>
8000541c:	6e 15       	ld.w	r5,r7[0x4]
8000541e:	ee f6 00 88 	ld.w	r6,r7[136]
80005422:	ea c2 ff ff 	sub	r2,r5,-1
80005426:	20 15       	sub	r5,1
80005428:	ee 02 00 22 	add	r2,r7,r2<<0x2
8000542c:	ec 05 00 23 	add	r3,r6,r5<<0x2
80005430:	c3 58       	rjmp	8000549a <__call_exitprocs+0x9a>
80005432:	58 01       	cp.w	r1,0
80005434:	c0 70       	breq	80005442 <__call_exitprocs+0x42>
80005436:	58 06       	cp.w	r6,0
80005438:	c2 e0       	breq	80005494 <__call_exitprocs+0x94>
8000543a:	e6 f8 00 80 	ld.w	r8,r3[128]
8000543e:	02 38       	cp.w	r8,r1
80005440:	c2 a1       	brne	80005494 <__call_exitprocs+0x94>
80005442:	6e 19       	ld.w	r9,r7[0x4]
80005444:	64 08       	ld.w	r8,r2[0x0]
80005446:	20 19       	sub	r9,1
80005448:	12 35       	cp.w	r5,r9
8000544a:	ef f5 0a 01 	st.weq	r7[0x4],r5
8000544e:	f9 b9 01 00 	movne	r9,0
80005452:	e5 f9 1a 00 	st.wne	r2[0x0],r9
80005456:	58 08       	cp.w	r8,0
80005458:	c1 e0       	breq	80005494 <__call_exitprocs+0x94>
8000545a:	6e 10       	ld.w	r0,r7[0x4]
8000545c:	58 06       	cp.w	r6,0
8000545e:	c0 90       	breq	80005470 <__call_exitprocs+0x70>
80005460:	30 1a       	mov	r10,1
80005462:	f4 05 09 49 	lsl	r9,r10,r5
80005466:	ec fa 01 00 	ld.w	r10,r6[256]
8000546a:	f3 ea 00 0a 	and	r10,r9,r10
8000546e:	c0 31       	brne	80005474 <__call_exitprocs+0x74>
80005470:	5d 18       	icall	r8
80005472:	c0 b8       	rjmp	80005488 <__call_exitprocs+0x88>
80005474:	ec fa 01 04 	ld.w	r10,r6[260]
80005478:	66 0b       	ld.w	r11,r3[0x0]
8000547a:	14 69       	and	r9,r10
8000547c:	c0 41       	brne	80005484 <__call_exitprocs+0x84>
8000547e:	40 2c       	lddsp	r12,sp[0x8]
80005480:	5d 18       	icall	r8
80005482:	c0 38       	rjmp	80005488 <__call_exitprocs+0x88>
80005484:	16 9c       	mov	r12,r11
80005486:	5d 18       	icall	r8
80005488:	6e 18       	ld.w	r8,r7[0x4]
8000548a:	10 30       	cp.w	r0,r8
8000548c:	cc 41       	brne	80005414 <__call_exitprocs+0x14>
8000548e:	68 08       	ld.w	r8,r4[0x0]
80005490:	0e 38       	cp.w	r8,r7
80005492:	cc 11       	brne	80005414 <__call_exitprocs+0x14>
80005494:	20 15       	sub	r5,1
80005496:	20 43       	sub	r3,4
80005498:	20 42       	sub	r2,4
8000549a:	58 05       	cp.w	r5,0
8000549c:	cc b4       	brge	80005432 <__call_exitprocs+0x32>
8000549e:	6e 18       	ld.w	r8,r7[0x4]
800054a0:	58 08       	cp.w	r8,0
800054a2:	c0 f1       	brne	800054c0 <__call_exitprocs+0xc0>
800054a4:	6e 08       	ld.w	r8,r7[0x0]
800054a6:	58 08       	cp.w	r8,0
800054a8:	c0 c0       	breq	800054c0 <__call_exitprocs+0xc0>
800054aa:	89 08       	st.w	r4[0x0],r8
800054ac:	58 06       	cp.w	r6,0
800054ae:	c0 40       	breq	800054b6 <__call_exitprocs+0xb6>
800054b0:	0c 9c       	mov	r12,r6
800054b2:	fe b0 fa 5b 	rcall	80004968 <free>
800054b6:	0e 9c       	mov	r12,r7
800054b8:	fe b0 fa 58 	rcall	80004968 <free>
800054bc:	68 07       	ld.w	r7,r4[0x0]
800054be:	c0 38       	rjmp	800054c4 <__call_exitprocs+0xc4>
800054c0:	0e 94       	mov	r4,r7
800054c2:	6e 07       	ld.w	r7,r7[0x0]
800054c4:	58 07       	cp.w	r7,0
800054c6:	ca b1       	brne	8000541c <__call_exitprocs+0x1c>
800054c8:	2f dd       	sub	sp,-12
800054ca:	d8 32       	popm	r0-r7,pc

800054cc <__errno>:
800054cc:	e0 68 01 30 	mov	r8,304
800054d0:	70 0c       	ld.w	r12,r8[0x0]
800054d2:	2f 4c       	sub	r12,-12
800054d4:	5e fc       	retal	r12
800054d6:	d7 03       	nop

800054d8 <__sfp_lock_acquire>:
800054d8:	5e fc       	retal	r12

800054da <__sfp_lock_release>:
800054da:	5e fc       	retal	r12

800054dc <_cleanup_r>:
800054dc:	d4 01       	pushm	lr
800054de:	fe cb ca 82 	sub	r11,pc,-13694
800054e2:	ca dd       	rcall	8000583c <_fwalk>
800054e4:	d8 02       	popm	pc
800054e6:	d7 03       	nop

800054e8 <__sfmoreglue>:
800054e8:	d4 21       	pushm	r4-r7,lr
800054ea:	16 95       	mov	r5,r11
800054ec:	f6 06 10 5c 	mul	r6,r11,92
800054f0:	ec cb ff f4 	sub	r11,r6,-12
800054f4:	fe b0 fa 4a 	rcall	80004988 <_malloc_r>
800054f8:	18 97       	mov	r7,r12
800054fa:	c0 90       	breq	8000550c <__sfmoreglue+0x24>
800054fc:	99 15       	st.w	r12[0x4],r5
800054fe:	30 0b       	mov	r11,0
80005500:	2f 4c       	sub	r12,-12
80005502:	0c 9a       	mov	r10,r6
80005504:	8f 2c       	st.w	r7[0x8],r12
80005506:	8f 0b       	st.w	r7[0x0],r11
80005508:	fe b0 fd 00 	rcall	80004f08 <memset>
8000550c:	0e 9c       	mov	r12,r7
8000550e:	d8 22       	popm	r4-r7,pc

80005510 <__sfp>:
80005510:	d4 21       	pushm	r4-r7,lr
80005512:	fe c8 aa fa 	sub	r8,pc,-21766
80005516:	18 96       	mov	r6,r12
80005518:	70 07       	ld.w	r7,r8[0x0]
8000551a:	6e 68       	ld.w	r8,r7[0x18]
8000551c:	58 08       	cp.w	r8,0
8000551e:	c0 31       	brne	80005524 <__sfp+0x14>
80005520:	0e 9c       	mov	r12,r7
80005522:	c2 dc       	rcall	8000557c <__sinit>
80005524:	ee c7 ff 28 	sub	r7,r7,-216
80005528:	30 05       	mov	r5,0
8000552a:	6e 2c       	ld.w	r12,r7[0x8]
8000552c:	6e 18       	ld.w	r8,r7[0x4]
8000552e:	c0 68       	rjmp	8000553a <__sfp+0x2a>
80005530:	98 69       	ld.sh	r9,r12[0xc]
80005532:	ea 09 19 00 	cp.h	r9,r5
80005536:	c1 10       	breq	80005558 <__sfp+0x48>
80005538:	2a 4c       	sub	r12,-92
8000553a:	20 18       	sub	r8,1
8000553c:	cf a7       	brpl	80005530 <__sfp+0x20>
8000553e:	6e 08       	ld.w	r8,r7[0x0]
80005540:	58 08       	cp.w	r8,0
80005542:	c0 61       	brne	8000554e <__sfp+0x3e>
80005544:	30 4b       	mov	r11,4
80005546:	0c 9c       	mov	r12,r6
80005548:	cd 0f       	rcall	800054e8 <__sfmoreglue>
8000554a:	8f 0c       	st.w	r7[0x0],r12
8000554c:	c0 30       	breq	80005552 <__sfp+0x42>
8000554e:	6e 07       	ld.w	r7,r7[0x0]
80005550:	ce db       	rjmp	8000552a <__sfp+0x1a>
80005552:	30 c8       	mov	r8,12
80005554:	8d 38       	st.w	r6[0xc],r8
80005556:	d8 22       	popm	r4-r7,pc
80005558:	30 08       	mov	r8,0
8000555a:	f9 48 00 4c 	st.w	r12[76],r8
8000555e:	99 08       	st.w	r12[0x0],r8
80005560:	99 28       	st.w	r12[0x8],r8
80005562:	99 18       	st.w	r12[0x4],r8
80005564:	99 48       	st.w	r12[0x10],r8
80005566:	99 58       	st.w	r12[0x14],r8
80005568:	99 68       	st.w	r12[0x18],r8
8000556a:	99 d8       	st.w	r12[0x34],r8
8000556c:	99 e8       	st.w	r12[0x38],r8
8000556e:	f9 48 00 48 	st.w	r12[72],r8
80005572:	3f f8       	mov	r8,-1
80005574:	b8 78       	st.h	r12[0xe],r8
80005576:	30 18       	mov	r8,1
80005578:	b8 68       	st.h	r12[0xc],r8
8000557a:	d8 22       	popm	r4-r7,pc

8000557c <__sinit>:
8000557c:	d4 21       	pushm	r4-r7,lr
8000557e:	18 96       	mov	r6,r12
80005580:	78 67       	ld.w	r7,r12[0x18]
80005582:	58 07       	cp.w	r7,0
80005584:	c4 91       	brne	80005616 <__sinit+0x9a>
80005586:	fe c8 00 aa 	sub	r8,pc,170
8000558a:	30 15       	mov	r5,1
8000558c:	99 a8       	st.w	r12[0x28],r8
8000558e:	f9 47 00 d8 	st.w	r12[216],r7
80005592:	f9 47 00 dc 	st.w	r12[220],r7
80005596:	f9 47 00 e0 	st.w	r12[224],r7
8000559a:	99 65       	st.w	r12[0x18],r5
8000559c:	cb af       	rcall	80005510 <__sfp>
8000559e:	8d 0c       	st.w	r6[0x0],r12
800055a0:	0c 9c       	mov	r12,r6
800055a2:	cb 7f       	rcall	80005510 <__sfp>
800055a4:	8d 1c       	st.w	r6[0x4],r12
800055a6:	0c 9c       	mov	r12,r6
800055a8:	cb 4f       	rcall	80005510 <__sfp>
800055aa:	6c 09       	ld.w	r9,r6[0x0]
800055ac:	30 48       	mov	r8,4
800055ae:	93 07       	st.w	r9[0x0],r7
800055b0:	b2 68       	st.h	r9[0xc],r8
800055b2:	93 17       	st.w	r9[0x4],r7
800055b4:	93 27       	st.w	r9[0x8],r7
800055b6:	6c 18       	ld.w	r8,r6[0x4]
800055b8:	b2 77       	st.h	r9[0xe],r7
800055ba:	93 47       	st.w	r9[0x10],r7
800055bc:	93 57       	st.w	r9[0x14],r7
800055be:	93 67       	st.w	r9[0x18],r7
800055c0:	93 89       	st.w	r9[0x20],r9
800055c2:	91 07       	st.w	r8[0x0],r7
800055c4:	91 17       	st.w	r8[0x4],r7
800055c6:	91 27       	st.w	r8[0x8],r7
800055c8:	fe ce fc a4 	sub	lr,pc,-860
800055cc:	fe cb fc d8 	sub	r11,pc,-808
800055d0:	93 9e       	st.w	r9[0x24],lr
800055d2:	93 ab       	st.w	r9[0x28],r11
800055d4:	fe ca fd 04 	sub	r10,pc,-764
800055d8:	fe c4 fd 14 	sub	r4,pc,-748
800055dc:	93 ba       	st.w	r9[0x2c],r10
800055de:	93 c4       	st.w	r9[0x30],r4
800055e0:	30 99       	mov	r9,9
800055e2:	b0 69       	st.h	r8[0xc],r9
800055e4:	b0 75       	st.h	r8[0xe],r5
800055e6:	91 c4       	st.w	r8[0x30],r4
800055e8:	91 47       	st.w	r8[0x10],r7
800055ea:	91 57       	st.w	r8[0x14],r7
800055ec:	91 67       	st.w	r8[0x18],r7
800055ee:	91 88       	st.w	r8[0x20],r8
800055f0:	91 9e       	st.w	r8[0x24],lr
800055f2:	91 ab       	st.w	r8[0x28],r11
800055f4:	91 ba       	st.w	r8[0x2c],r10
800055f6:	8d 2c       	st.w	r6[0x8],r12
800055f8:	31 28       	mov	r8,18
800055fa:	99 07       	st.w	r12[0x0],r7
800055fc:	b8 68       	st.h	r12[0xc],r8
800055fe:	99 17       	st.w	r12[0x4],r7
80005600:	99 27       	st.w	r12[0x8],r7
80005602:	30 28       	mov	r8,2
80005604:	b8 78       	st.h	r12[0xe],r8
80005606:	99 c4       	st.w	r12[0x30],r4
80005608:	99 67       	st.w	r12[0x18],r7
8000560a:	99 9e       	st.w	r12[0x24],lr
8000560c:	99 ab       	st.w	r12[0x28],r11
8000560e:	99 ba       	st.w	r12[0x2c],r10
80005610:	99 47       	st.w	r12[0x10],r7
80005612:	99 57       	st.w	r12[0x14],r7
80005614:	99 8c       	st.w	r12[0x20],r12
80005616:	d8 22       	popm	r4-r7,pc

80005618 <_malloc_trim_r>:
80005618:	d4 21       	pushm	r4-r7,lr
8000561a:	16 95       	mov	r5,r11
8000561c:	18 97       	mov	r7,r12
8000561e:	fe b0 f2 3f 	rcall	80003a9c <__malloc_lock>
80005622:	e0 64 01 34 	mov	r4,308
80005626:	68 28       	ld.w	r8,r4[0x8]
80005628:	70 16       	ld.w	r6,r8[0x4]
8000562a:	e0 16 ff fc 	andl	r6,0xfffc
8000562e:	ec c8 ff 91 	sub	r8,r6,-111
80005632:	f0 05 01 05 	sub	r5,r8,r5
80005636:	e0 15 ff 80 	andl	r5,0xff80
8000563a:	ea c5 00 80 	sub	r5,r5,128
8000563e:	e0 45 00 7f 	cp.w	r5,127
80005642:	e0 8a 00 25 	brle	8000568c <_malloc_trim_r+0x74>
80005646:	30 0b       	mov	r11,0
80005648:	0e 9c       	mov	r12,r7
8000564a:	fe b0 fd c7 	rcall	800051d8 <_sbrk_r>
8000564e:	68 28       	ld.w	r8,r4[0x8]
80005650:	0c 08       	add	r8,r6
80005652:	10 3c       	cp.w	r12,r8
80005654:	c1 c1       	brne	8000568c <_malloc_trim_r+0x74>
80005656:	ea 0b 11 00 	rsub	r11,r5,0
8000565a:	0e 9c       	mov	r12,r7
8000565c:	fe b0 fd be 	rcall	800051d8 <_sbrk_r>
80005660:	5b fc       	cp.w	r12,-1
80005662:	c1 91       	brne	80005694 <_malloc_trim_r+0x7c>
80005664:	30 0b       	mov	r11,0
80005666:	0e 9c       	mov	r12,r7
80005668:	fe b0 fd b8 	rcall	800051d8 <_sbrk_r>
8000566c:	68 28       	ld.w	r8,r4[0x8]
8000566e:	f8 08 01 09 	sub	r9,r12,r8
80005672:	58 f9       	cp.w	r9,15
80005674:	e0 8a 00 0c 	brle	8000568c <_malloc_trim_r+0x74>
80005678:	a1 a9       	sbr	r9,0x0
8000567a:	91 19       	st.w	r8[0x4],r9
8000567c:	e0 68 05 40 	mov	r8,1344
80005680:	70 09       	ld.w	r9,r8[0x0]
80005682:	e0 68 07 ec 	mov	r8,2028
80005686:	f8 09 01 09 	sub	r9,r12,r9
8000568a:	91 09       	st.w	r8[0x0],r9
8000568c:	0e 9c       	mov	r12,r7
8000568e:	fe b0 f2 0d 	rcall	80003aa8 <__malloc_unlock>
80005692:	d8 2a       	popm	r4-r7,pc,r12=0
80005694:	68 28       	ld.w	r8,r4[0x8]
80005696:	0a 16       	sub	r6,r5
80005698:	a1 a6       	sbr	r6,0x0
8000569a:	91 16       	st.w	r8[0x4],r6
8000569c:	e0 68 07 ec 	mov	r8,2028
800056a0:	70 09       	ld.w	r9,r8[0x0]
800056a2:	0a 19       	sub	r9,r5
800056a4:	0e 9c       	mov	r12,r7
800056a6:	91 09       	st.w	r8[0x0],r9
800056a8:	fe b0 f2 00 	rcall	80003aa8 <__malloc_unlock>
800056ac:	da 2a       	popm	r4-r7,pc,r12=1
800056ae:	d7 03       	nop

800056b0 <_free_r>:
800056b0:	d4 21       	pushm	r4-r7,lr
800056b2:	16 96       	mov	r6,r11
800056b4:	18 97       	mov	r7,r12
800056b6:	58 0b       	cp.w	r11,0
800056b8:	e0 80 00 c0 	breq	80005838 <_free_r+0x188>
800056bc:	fe b0 f1 f0 	rcall	80003a9c <__malloc_lock>
800056c0:	20 86       	sub	r6,8
800056c2:	e0 6a 01 34 	mov	r10,308
800056c6:	6c 18       	ld.w	r8,r6[0x4]
800056c8:	74 2e       	ld.w	lr,r10[0x8]
800056ca:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
800056ce:	a1 c8       	cbr	r8,0x0
800056d0:	ec 08 00 09 	add	r9,r6,r8
800056d4:	72 1b       	ld.w	r11,r9[0x4]
800056d6:	e0 1b ff fc 	andl	r11,0xfffc
800056da:	1c 39       	cp.w	r9,lr
800056dc:	c1 e1       	brne	80005718 <_free_r+0x68>
800056de:	f6 08 00 08 	add	r8,r11,r8
800056e2:	58 0c       	cp.w	r12,0
800056e4:	c0 81       	brne	800056f4 <_free_r+0x44>
800056e6:	6c 09       	ld.w	r9,r6[0x0]
800056e8:	12 16       	sub	r6,r9
800056ea:	12 08       	add	r8,r9
800056ec:	6c 3b       	ld.w	r11,r6[0xc]
800056ee:	6c 29       	ld.w	r9,r6[0x8]
800056f0:	97 29       	st.w	r11[0x8],r9
800056f2:	93 3b       	st.w	r9[0xc],r11
800056f4:	10 99       	mov	r9,r8
800056f6:	95 26       	st.w	r10[0x8],r6
800056f8:	a1 a9       	sbr	r9,0x0
800056fa:	8d 19       	st.w	r6[0x4],r9
800056fc:	e0 69 05 3c 	mov	r9,1340
80005700:	72 09       	ld.w	r9,r9[0x0]
80005702:	12 38       	cp.w	r8,r9
80005704:	c0 63       	brcs	80005710 <_free_r+0x60>
80005706:	e0 68 07 e8 	mov	r8,2024
8000570a:	0e 9c       	mov	r12,r7
8000570c:	70 0b       	ld.w	r11,r8[0x0]
8000570e:	c8 5f       	rcall	80005618 <_malloc_trim_r>
80005710:	0e 9c       	mov	r12,r7
80005712:	fe b0 f1 cb 	rcall	80003aa8 <__malloc_unlock>
80005716:	d8 22       	popm	r4-r7,pc
80005718:	93 1b       	st.w	r9[0x4],r11
8000571a:	58 0c       	cp.w	r12,0
8000571c:	c0 30       	breq	80005722 <_free_r+0x72>
8000571e:	30 0c       	mov	r12,0
80005720:	c1 08       	rjmp	80005740 <_free_r+0x90>
80005722:	6c 0e       	ld.w	lr,r6[0x0]
80005724:	f4 c5 ff f8 	sub	r5,r10,-8
80005728:	1c 16       	sub	r6,lr
8000572a:	1c 08       	add	r8,lr
8000572c:	6c 2e       	ld.w	lr,r6[0x8]
8000572e:	0a 3e       	cp.w	lr,r5
80005730:	f9 bc 00 01 	moveq	r12,1
80005734:	ed f5 10 03 	ld.wne	r5,r6[0xc]
80005738:	eb fe 1a 02 	st.wne	r5[0x8],lr
8000573c:	fd f5 1a 03 	st.wne	lr[0xc],r5
80005740:	f2 0b 00 0e 	add	lr,r9,r11
80005744:	7c 1e       	ld.w	lr,lr[0x4]
80005746:	ed be 00 00 	bld	lr,0x0
8000574a:	c1 40       	breq	80005772 <_free_r+0xc2>
8000574c:	16 08       	add	r8,r11
8000574e:	58 0c       	cp.w	r12,0
80005750:	c0 d1       	brne	8000576a <_free_r+0xba>
80005752:	e0 6e 01 34 	mov	lr,308
80005756:	72 2b       	ld.w	r11,r9[0x8]
80005758:	2f 8e       	sub	lr,-8
8000575a:	1c 3b       	cp.w	r11,lr
8000575c:	c0 71       	brne	8000576a <_free_r+0xba>
8000575e:	97 36       	st.w	r11[0xc],r6
80005760:	97 26       	st.w	r11[0x8],r6
80005762:	8d 2b       	st.w	r6[0x8],r11
80005764:	8d 3b       	st.w	r6[0xc],r11
80005766:	30 1c       	mov	r12,1
80005768:	c0 58       	rjmp	80005772 <_free_r+0xc2>
8000576a:	72 2b       	ld.w	r11,r9[0x8]
8000576c:	72 39       	ld.w	r9,r9[0xc]
8000576e:	93 2b       	st.w	r9[0x8],r11
80005770:	97 39       	st.w	r11[0xc],r9
80005772:	10 99       	mov	r9,r8
80005774:	ec 08 09 08 	st.w	r6[r8],r8
80005778:	a1 a9       	sbr	r9,0x0
8000577a:	8d 19       	st.w	r6[0x4],r9
8000577c:	58 0c       	cp.w	r12,0
8000577e:	c5 a1       	brne	80005832 <_free_r+0x182>
80005780:	e0 48 01 ff 	cp.w	r8,511
80005784:	e0 8b 00 13 	brhi	800057aa <_free_r+0xfa>
80005788:	a3 98       	lsr	r8,0x3
8000578a:	f4 08 00 39 	add	r9,r10,r8<<0x3
8000578e:	72 2b       	ld.w	r11,r9[0x8]
80005790:	8d 39       	st.w	r6[0xc],r9
80005792:	8d 2b       	st.w	r6[0x8],r11
80005794:	97 36       	st.w	r11[0xc],r6
80005796:	93 26       	st.w	r9[0x8],r6
80005798:	a3 48       	asr	r8,0x2
8000579a:	74 19       	ld.w	r9,r10[0x4]
8000579c:	30 1b       	mov	r11,1
8000579e:	f6 08 09 48 	lsl	r8,r11,r8
800057a2:	f3 e8 10 08 	or	r8,r9,r8
800057a6:	95 18       	st.w	r10[0x4],r8
800057a8:	c4 58       	rjmp	80005832 <_free_r+0x182>
800057aa:	f0 0b 16 09 	lsr	r11,r8,0x9
800057ae:	58 4b       	cp.w	r11,4
800057b0:	e0 8b 00 06 	brhi	800057bc <_free_r+0x10c>
800057b4:	f0 0b 16 06 	lsr	r11,r8,0x6
800057b8:	2c 8b       	sub	r11,-56
800057ba:	c2 08       	rjmp	800057fa <_free_r+0x14a>
800057bc:	59 4b       	cp.w	r11,20
800057be:	e0 8b 00 04 	brhi	800057c6 <_free_r+0x116>
800057c2:	2a 5b       	sub	r11,-91
800057c4:	c1 b8       	rjmp	800057fa <_free_r+0x14a>
800057c6:	e0 4b 00 54 	cp.w	r11,84
800057ca:	e0 8b 00 06 	brhi	800057d6 <_free_r+0x126>
800057ce:	f0 0b 16 0c 	lsr	r11,r8,0xc
800057d2:	29 2b       	sub	r11,-110
800057d4:	c1 38       	rjmp	800057fa <_free_r+0x14a>
800057d6:	e0 4b 01 54 	cp.w	r11,340
800057da:	e0 8b 00 06 	brhi	800057e6 <_free_r+0x136>
800057de:	f0 0b 16 0f 	lsr	r11,r8,0xf
800057e2:	28 9b       	sub	r11,-119
800057e4:	c0 b8       	rjmp	800057fa <_free_r+0x14a>
800057e6:	e0 4b 05 54 	cp.w	r11,1364
800057ea:	e0 88 00 05 	brls	800057f4 <_free_r+0x144>
800057ee:	37 eb       	mov	r11,126
800057f0:	c0 58       	rjmp	800057fa <_free_r+0x14a>
800057f2:	d7 03       	nop
800057f4:	f0 0b 16 12 	lsr	r11,r8,0x12
800057f8:	28 4b       	sub	r11,-124
800057fa:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
800057fe:	78 29       	ld.w	r9,r12[0x8]
80005800:	18 39       	cp.w	r9,r12
80005802:	c0 e1       	brne	8000581e <_free_r+0x16e>
80005804:	74 18       	ld.w	r8,r10[0x4]
80005806:	a3 4b       	asr	r11,0x2
80005808:	30 1c       	mov	r12,1
8000580a:	f8 0b 09 4b 	lsl	r11,r12,r11
8000580e:	f1 eb 10 0b 	or	r11,r8,r11
80005812:	12 98       	mov	r8,r9
80005814:	95 1b       	st.w	r10[0x4],r11
80005816:	c0 a8       	rjmp	8000582a <_free_r+0x17a>
80005818:	72 29       	ld.w	r9,r9[0x8]
8000581a:	18 39       	cp.w	r9,r12
8000581c:	c0 60       	breq	80005828 <_free_r+0x178>
8000581e:	72 1a       	ld.w	r10,r9[0x4]
80005820:	e0 1a ff fc 	andl	r10,0xfffc
80005824:	14 38       	cp.w	r8,r10
80005826:	cf 93       	brcs	80005818 <_free_r+0x168>
80005828:	72 38       	ld.w	r8,r9[0xc]
8000582a:	8d 38       	st.w	r6[0xc],r8
8000582c:	8d 29       	st.w	r6[0x8],r9
8000582e:	93 36       	st.w	r9[0xc],r6
80005830:	91 26       	st.w	r8[0x8],r6
80005832:	0e 9c       	mov	r12,r7
80005834:	fe b0 f1 3a 	rcall	80003aa8 <__malloc_unlock>
80005838:	d8 22       	popm	r4-r7,pc
8000583a:	d7 03       	nop

8000583c <_fwalk>:
8000583c:	d4 31       	pushm	r0-r7,lr
8000583e:	30 05       	mov	r5,0
80005840:	16 91       	mov	r1,r11
80005842:	f8 c7 ff 28 	sub	r7,r12,-216
80005846:	0a 92       	mov	r2,r5
80005848:	c4 8e       	rcall	800054d8 <__sfp_lock_acquire>
8000584a:	3f f3       	mov	r3,-1
8000584c:	c1 68       	rjmp	80005878 <_fwalk+0x3c>
8000584e:	6e 26       	ld.w	r6,r7[0x8]
80005850:	6e 14       	ld.w	r4,r7[0x4]
80005852:	2f 46       	sub	r6,-12
80005854:	c0 c8       	rjmp	8000586c <_fwalk+0x30>
80005856:	8c 08       	ld.sh	r8,r6[0x0]
80005858:	e4 08 19 00 	cp.h	r8,r2
8000585c:	c0 70       	breq	8000586a <_fwalk+0x2e>
8000585e:	8c 18       	ld.sh	r8,r6[0x2]
80005860:	e6 08 19 00 	cp.h	r8,r3
80005864:	c0 30       	breq	8000586a <_fwalk+0x2e>
80005866:	5d 11       	icall	r1
80005868:	18 45       	or	r5,r12
8000586a:	2a 46       	sub	r6,-92
8000586c:	20 14       	sub	r4,1
8000586e:	ec cc 00 0c 	sub	r12,r6,12
80005872:	58 04       	cp.w	r4,0
80005874:	cf 14       	brge	80005856 <_fwalk+0x1a>
80005876:	6e 07       	ld.w	r7,r7[0x0]
80005878:	58 07       	cp.w	r7,0
8000587a:	ce a1       	brne	8000584e <_fwalk+0x12>
8000587c:	c2 fe       	rcall	800054da <__sfp_lock_release>
8000587e:	0a 9c       	mov	r12,r5
80005880:	d8 32       	popm	r0-r7,pc
80005882:	d7 03       	nop

80005884 <memmove>:
80005884:	d4 01       	pushm	lr
80005886:	18 3b       	cp.w	r11,r12
80005888:	c1 92       	brcc	800058ba <memmove+0x36>
8000588a:	f6 0a 00 09 	add	r9,r11,r10
8000588e:	12 3c       	cp.w	r12,r9
80005890:	c1 52       	brcc	800058ba <memmove+0x36>
80005892:	f8 0a 00 0b 	add	r11,r12,r10
80005896:	30 08       	mov	r8,0
80005898:	c0 68       	rjmp	800058a4 <memmove+0x20>
8000589a:	f2 08 07 0e 	ld.ub	lr,r9[r8]
8000589e:	20 1a       	sub	r10,1
800058a0:	f6 08 0b 0e 	st.b	r11[r8],lr
800058a4:	20 18       	sub	r8,1
800058a6:	58 0a       	cp.w	r10,0
800058a8:	cf 91       	brne	8000589a <memmove+0x16>
800058aa:	d8 02       	popm	pc
800058ac:	f6 08 07 09 	ld.ub	r9,r11[r8]
800058b0:	20 1a       	sub	r10,1
800058b2:	f8 08 0b 09 	st.b	r12[r8],r9
800058b6:	2f f8       	sub	r8,-1
800058b8:	c0 28       	rjmp	800058bc <memmove+0x38>
800058ba:	30 08       	mov	r8,0
800058bc:	58 0a       	cp.w	r10,0
800058be:	cf 71       	brne	800058ac <memmove+0x28>
800058c0:	d8 02       	popm	pc
800058c2:	d7 03       	nop

800058c4 <__sclose>:
800058c4:	d4 01       	pushm	lr
800058c6:	96 7b       	ld.sh	r11,r11[0xe]
800058c8:	e0 a0 11 e2 	rcall	80007c8c <_close_r>
800058cc:	d8 02       	popm	pc
800058ce:	d7 03       	nop

800058d0 <__sseek>:
800058d0:	d4 21       	pushm	r4-r7,lr
800058d2:	16 97       	mov	r7,r11
800058d4:	96 7b       	ld.sh	r11,r11[0xe]
800058d6:	e0 a0 1a a5 	rcall	80008e20 <_lseek_r>
800058da:	8e 68       	ld.sh	r8,r7[0xc]
800058dc:	10 99       	mov	r9,r8
800058de:	ad c8       	cbr	r8,0xc
800058e0:	ad a9       	sbr	r9,0xc
800058e2:	5b fc       	cp.w	r12,-1
800058e4:	ef f8 0c 06 	st.heq	r7[0xc],r8
800058e8:	ef f9 1c 06 	st.hne	r7[0xc],r9
800058ec:	ef fc 1a 15 	st.wne	r7[0x54],r12
800058f0:	d8 22       	popm	r4-r7,pc
800058f2:	d7 03       	nop

800058f4 <__swrite>:
800058f4:	d4 21       	pushm	r4-r7,lr
800058f6:	96 68       	ld.sh	r8,r11[0xc]
800058f8:	16 97       	mov	r7,r11
800058fa:	14 95       	mov	r5,r10
800058fc:	12 94       	mov	r4,r9
800058fe:	e2 18 01 00 	andl	r8,0x100,COH
80005902:	18 96       	mov	r6,r12
80005904:	c0 60       	breq	80005910 <__swrite+0x1c>
80005906:	30 29       	mov	r9,2
80005908:	30 0a       	mov	r10,0
8000590a:	96 7b       	ld.sh	r11,r11[0xe]
8000590c:	e0 a0 1a 8a 	rcall	80008e20 <_lseek_r>
80005910:	8e 68       	ld.sh	r8,r7[0xc]
80005912:	ad c8       	cbr	r8,0xc
80005914:	08 99       	mov	r9,r4
80005916:	0a 9a       	mov	r10,r5
80005918:	8e 7b       	ld.sh	r11,r7[0xe]
8000591a:	0c 9c       	mov	r12,r6
8000591c:	ae 68       	st.h	r7[0xc],r8
8000591e:	e0 a0 11 35 	rcall	80007b88 <_write_r>
80005922:	d8 22       	popm	r4-r7,pc

80005924 <__sread>:
80005924:	d4 21       	pushm	r4-r7,lr
80005926:	16 97       	mov	r7,r11
80005928:	96 7b       	ld.sh	r11,r11[0xe]
8000592a:	e0 a0 1d e3 	rcall	800094f0 <_read_r>
8000592e:	c0 65       	brlt	8000593a <__sread+0x16>
80005930:	6f 58       	ld.w	r8,r7[0x54]
80005932:	18 08       	add	r8,r12
80005934:	ef 48 00 54 	st.w	r7[84],r8
80005938:	d8 22       	popm	r4-r7,pc
8000593a:	8e 68       	ld.sh	r8,r7[0xc]
8000593c:	ad c8       	cbr	r8,0xc
8000593e:	ae 68       	st.h	r7[0xc],r8
80005940:	d8 22       	popm	r4-r7,pc
80005942:	d7 03       	nop

80005944 <get_arg>:
80005944:	d4 31       	pushm	r0-r7,lr
80005946:	20 8d       	sub	sp,32
80005948:	fa c4 ff bc 	sub	r4,sp,-68
8000594c:	50 4b       	stdsp	sp[0x10],r11
8000594e:	68 2e       	ld.w	lr,r4[0x8]
80005950:	50 58       	stdsp	sp[0x14],r8
80005952:	12 96       	mov	r6,r9
80005954:	7c 0b       	ld.w	r11,lr[0x0]
80005956:	70 05       	ld.w	r5,r8[0x0]
80005958:	50 6e       	stdsp	sp[0x18],lr
8000595a:	58 0b       	cp.w	r11,0
8000595c:	f4 0b 17 00 	moveq	r11,r10
80005960:	68 03       	ld.w	r3,r4[0x0]
80005962:	68 11       	ld.w	r1,r4[0x4]
80005964:	40 49       	lddsp	r9,sp[0x10]
80005966:	30 08       	mov	r8,0
80005968:	c2 89       	rjmp	80005bb8 <get_arg+0x274>
8000596a:	2f fb       	sub	r11,-1
8000596c:	32 5c       	mov	r12,37
8000596e:	17 8a       	ld.ub	r10,r11[0x0]
80005970:	f8 0a 18 00 	cp.b	r10,r12
80005974:	5f 1e       	srne	lr
80005976:	f0 0a 18 00 	cp.b	r10,r8
8000597a:	5f 1c       	srne	r12
8000597c:	fd ec 00 0c 	and	r12,lr,r12
80005980:	f0 0c 18 00 	cp.b	r12,r8
80005984:	cf 31       	brne	8000596a <get_arg+0x26>
80005986:	58 0a       	cp.w	r10,0
80005988:	e0 80 01 25 	breq	80005bd2 <get_arg+0x28e>
8000598c:	30 0c       	mov	r12,0
8000598e:	3f fa       	mov	r10,-1
80005990:	18 90       	mov	r0,r12
80005992:	50 3a       	stdsp	sp[0xc],r10
80005994:	18 94       	mov	r4,r12
80005996:	18 92       	mov	r2,r12
80005998:	f8 0c 00 3c 	add	r12,r12,r12<<0x3
8000599c:	16 97       	mov	r7,r11
8000599e:	50 7c       	stdsp	sp[0x1c],r12
800059a0:	fe cc ac 50 	sub	r12,pc,-21424
800059a4:	0f 3a       	ld.ub	r10,r7++
800059a6:	f8 0a 07 0e 	ld.ub	lr,r12[r10]
800059aa:	40 7c       	lddsp	r12,sp[0x1c]
800059ac:	1c 0c       	add	r12,lr
800059ae:	fe ce ad 26 	sub	lr,pc,-21210
800059b2:	fc 0c 07 0e 	ld.ub	lr,lr[r12]
800059b6:	20 1e       	sub	lr,1
800059b8:	50 0e       	stdsp	sp[0x0],lr
800059ba:	fe ce ad 9e 	sub	lr,pc,-21090
800059be:	fc 0c 07 0c 	ld.ub	r12,lr[r12]
800059c2:	50 7c       	stdsp	sp[0x1c],r12
800059c4:	40 0c       	lddsp	r12,sp[0x0]
800059c6:	58 7c       	cp.w	r12,7
800059c8:	e0 8b 00 f1 	brhi	80005baa <get_arg+0x266>
800059cc:	fe ce af 50 	sub	lr,pc,-20656
800059d0:	fc 0c 03 2f 	ld.w	pc,lr[r12<<0x2]
800059d4:	36 8b       	mov	r11,104
800059d6:	f6 0a 18 00 	cp.b	r10,r11
800059da:	e0 80 00 e8 	breq	80005baa <get_arg+0x266>
800059de:	37 1b       	mov	r11,113
800059e0:	f6 0a 18 00 	cp.b	r10,r11
800059e4:	c0 70       	breq	800059f2 <get_arg+0xae>
800059e6:	34 cb       	mov	r11,76
800059e8:	f6 0a 18 00 	cp.b	r10,r11
800059ec:	c0 51       	brne	800059f6 <get_arg+0xb2>
800059ee:	a3 b4       	sbr	r4,0x3
800059f0:	cd d8       	rjmp	80005baa <get_arg+0x266>
800059f2:	a5 b4       	sbr	r4,0x5
800059f4:	cd b8       	rjmp	80005baa <get_arg+0x266>
800059f6:	08 9a       	mov	r10,r4
800059f8:	0e 9b       	mov	r11,r7
800059fa:	a5 aa       	sbr	r10,0x4
800059fc:	17 3c       	ld.ub	r12,r11++
800059fe:	a5 b4       	sbr	r4,0x5
80005a00:	36 ce       	mov	lr,108
80005a02:	fc 0c 18 00 	cp.b	r12,lr
80005a06:	e0 80 00 d3 	breq	80005bac <get_arg+0x268>
80005a0a:	14 94       	mov	r4,r10
80005a0c:	cc f8       	rjmp	80005baa <get_arg+0x266>
80005a0e:	eb d5 c0 05 	bfextu	r5,r5,0x0,0x5
80005a12:	36 7c       	mov	r12,103
80005a14:	f8 0a 18 00 	cp.b	r10,r12
80005a18:	e0 8b 00 27 	brhi	80005a66 <get_arg+0x122>
80005a1c:	36 5b       	mov	r11,101
80005a1e:	f6 0a 18 00 	cp.b	r10,r11
80005a22:	c4 82       	brcc	80005ab2 <get_arg+0x16e>
80005a24:	34 fb       	mov	r11,79
80005a26:	f6 0a 18 00 	cp.b	r10,r11
80005a2a:	c4 80       	breq	80005aba <get_arg+0x176>
80005a2c:	e0 8b 00 0c 	brhi	80005a44 <get_arg+0x100>
80005a30:	34 5b       	mov	r11,69
80005a32:	f6 0a 18 00 	cp.b	r10,r11
80005a36:	c3 e0       	breq	80005ab2 <get_arg+0x16e>
80005a38:	34 7b       	mov	r11,71
80005a3a:	f6 0a 18 00 	cp.b	r10,r11
80005a3e:	c3 a0       	breq	80005ab2 <get_arg+0x16e>
80005a40:	34 4b       	mov	r11,68
80005a42:	c0 88       	rjmp	80005a52 <get_arg+0x10e>
80005a44:	35 8b       	mov	r11,88
80005a46:	f6 0a 18 00 	cp.b	r10,r11
80005a4a:	c2 c0       	breq	80005aa2 <get_arg+0x15e>
80005a4c:	e0 8b 00 07 	brhi	80005a5a <get_arg+0x116>
80005a50:	35 5b       	mov	r11,85
80005a52:	f6 0a 18 00 	cp.b	r10,r11
80005a56:	c3 51       	brne	80005ac0 <get_arg+0x17c>
80005a58:	c3 18       	rjmp	80005aba <get_arg+0x176>
80005a5a:	36 3b       	mov	r11,99
80005a5c:	f6 0a 18 00 	cp.b	r10,r11
80005a60:	c2 f0       	breq	80005abe <get_arg+0x17a>
80005a62:	36 4b       	mov	r11,100
80005a64:	c0 e8       	rjmp	80005a80 <get_arg+0x13c>
80005a66:	37 0b       	mov	r11,112
80005a68:	f6 0a 18 00 	cp.b	r10,r11
80005a6c:	c2 50       	breq	80005ab6 <get_arg+0x172>
80005a6e:	e0 8b 00 0d 	brhi	80005a88 <get_arg+0x144>
80005a72:	36 eb       	mov	r11,110
80005a74:	f6 0a 18 00 	cp.b	r10,r11
80005a78:	c1 f0       	breq	80005ab6 <get_arg+0x172>
80005a7a:	e0 8b 00 14 	brhi	80005aa2 <get_arg+0x15e>
80005a7e:	36 9b       	mov	r11,105
80005a80:	f6 0a 18 00 	cp.b	r10,r11
80005a84:	c1 e1       	brne	80005ac0 <get_arg+0x17c>
80005a86:	c0 e8       	rjmp	80005aa2 <get_arg+0x15e>
80005a88:	37 5b       	mov	r11,117
80005a8a:	f6 0a 18 00 	cp.b	r10,r11
80005a8e:	c0 a0       	breq	80005aa2 <get_arg+0x15e>
80005a90:	37 8b       	mov	r11,120
80005a92:	f6 0a 18 00 	cp.b	r10,r11
80005a96:	c0 60       	breq	80005aa2 <get_arg+0x15e>
80005a98:	37 3b       	mov	r11,115
80005a9a:	f6 0a 18 00 	cp.b	r10,r11
80005a9e:	c1 11       	brne	80005ac0 <get_arg+0x17c>
80005aa0:	c0 b8       	rjmp	80005ab6 <get_arg+0x172>
80005aa2:	ed b4 00 04 	bld	r4,0x4
80005aa6:	c0 a0       	breq	80005aba <get_arg+0x176>
80005aa8:	ed b4 00 05 	bld	r4,0x5
80005aac:	c0 91       	brne	80005abe <get_arg+0x17a>
80005aae:	30 20       	mov	r0,2
80005ab0:	c0 88       	rjmp	80005ac0 <get_arg+0x17c>
80005ab2:	30 40       	mov	r0,4
80005ab4:	c0 68       	rjmp	80005ac0 <get_arg+0x17c>
80005ab6:	30 30       	mov	r0,3
80005ab8:	c0 48       	rjmp	80005ac0 <get_arg+0x17c>
80005aba:	30 10       	mov	r0,1
80005abc:	c0 28       	rjmp	80005ac0 <get_arg+0x17c>
80005abe:	30 00       	mov	r0,0
80005ac0:	40 3b       	lddsp	r11,sp[0xc]
80005ac2:	5b fb       	cp.w	r11,-1
80005ac4:	c0 40       	breq	80005acc <get_arg+0x188>
80005ac6:	e2 0b 09 20 	st.w	r1[r11<<0x2],r0
80005aca:	c7 08       	rjmp	80005baa <get_arg+0x266>
80005acc:	58 60       	cp.w	r0,6
80005ace:	e0 8b 00 6e 	brhi	80005baa <get_arg+0x266>
80005ad2:	6c 0a       	ld.w	r10,r6[0x0]
80005ad4:	ea cc ff ff 	sub	r12,r5,-1
80005ad8:	fe ce b0 3c 	sub	lr,pc,-20420
80005adc:	fc 00 03 2f 	ld.w	pc,lr[r0<<0x2]
80005ae0:	f4 cb ff f8 	sub	r11,r10,-8
80005ae4:	8d 0b       	st.w	r6[0x0],r11
80005ae6:	f4 ea 00 00 	ld.d	r10,r10[0]
80005aea:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
80005aee:	c0 f8       	rjmp	80005b0c <get_arg+0x1c8>
80005af0:	f4 cb ff fc 	sub	r11,r10,-4
80005af4:	8d 0b       	st.w	r6[0x0],r11
80005af6:	74 0a       	ld.w	r10,r10[0x0]
80005af8:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
80005afc:	c0 88       	rjmp	80005b0c <get_arg+0x1c8>
80005afe:	f4 cb ff f8 	sub	r11,r10,-8
80005b02:	8d 0b       	st.w	r6[0x0],r11
80005b04:	f4 ea 00 00 	ld.d	r10,r10[0]
80005b08:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
80005b0c:	0e 9b       	mov	r11,r7
80005b0e:	18 95       	mov	r5,r12
80005b10:	c4 e8       	rjmp	80005bac <get_arg+0x268>
80005b12:	62 0a       	ld.w	r10,r1[0x0]
80005b14:	5b fa       	cp.w	r10,-1
80005b16:	c0 b1       	brne	80005b2c <get_arg+0x1e8>
80005b18:	50 19       	stdsp	sp[0x4],r9
80005b1a:	50 28       	stdsp	sp[0x8],r8
80005b1c:	e0 6a 00 80 	mov	r10,128
80005b20:	30 0b       	mov	r11,0
80005b22:	02 9c       	mov	r12,r1
80005b24:	fe b0 f9 f2 	rcall	80004f08 <memset>
80005b28:	40 28       	lddsp	r8,sp[0x8]
80005b2a:	40 19       	lddsp	r9,sp[0x4]
80005b2c:	e4 cc 00 01 	sub	r12,r2,1
80005b30:	0e 9b       	mov	r11,r7
80005b32:	50 3c       	stdsp	sp[0xc],r12
80005b34:	f2 0c 0c 49 	max	r9,r9,r12
80005b38:	c3 a8       	rjmp	80005bac <get_arg+0x268>
80005b3a:	62 0a       	ld.w	r10,r1[0x0]
80005b3c:	5b fa       	cp.w	r10,-1
80005b3e:	c0 b1       	brne	80005b54 <get_arg+0x210>
80005b40:	50 19       	stdsp	sp[0x4],r9
80005b42:	50 28       	stdsp	sp[0x8],r8
80005b44:	e0 6a 00 80 	mov	r10,128
80005b48:	30 0b       	mov	r11,0
80005b4a:	02 9c       	mov	r12,r1
80005b4c:	fe b0 f9 de 	rcall	80004f08 <memset>
80005b50:	40 28       	lddsp	r8,sp[0x8]
80005b52:	40 19       	lddsp	r9,sp[0x4]
80005b54:	20 12       	sub	r2,1
80005b56:	30 0a       	mov	r10,0
80005b58:	0e 9b       	mov	r11,r7
80005b5a:	e2 02 09 2a 	st.w	r1[r2<<0x2],r10
80005b5e:	f2 02 0c 49 	max	r9,r9,r2
80005b62:	c2 58       	rjmp	80005bac <get_arg+0x268>
80005b64:	16 97       	mov	r7,r11
80005b66:	6c 0a       	ld.w	r10,r6[0x0]
80005b68:	f4 cb ff fc 	sub	r11,r10,-4
80005b6c:	8d 0b       	st.w	r6[0x0],r11
80005b6e:	74 0a       	ld.w	r10,r10[0x0]
80005b70:	0e 9b       	mov	r11,r7
80005b72:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
80005b76:	2f f5       	sub	r5,-1
80005b78:	c1 a8       	rjmp	80005bac <get_arg+0x268>
80005b7a:	f4 c2 00 30 	sub	r2,r10,48
80005b7e:	c0 68       	rjmp	80005b8a <get_arg+0x246>
80005b80:	e4 02 00 22 	add	r2,r2,r2<<0x2
80005b84:	2f f7       	sub	r7,-1
80005b86:	f4 02 00 12 	add	r2,r10,r2<<0x1
80005b8a:	0f 8a       	ld.ub	r10,r7[0x0]
80005b8c:	58 0a       	cp.w	r10,0
80005b8e:	c0 e0       	breq	80005baa <get_arg+0x266>
80005b90:	23 0a       	sub	r10,48
80005b92:	58 9a       	cp.w	r10,9
80005b94:	fe 98 ff f6 	brls	80005b80 <get_arg+0x23c>
80005b98:	c0 98       	rjmp	80005baa <get_arg+0x266>
80005b9a:	2f f7       	sub	r7,-1
80005b9c:	0f 8a       	ld.ub	r10,r7[0x0]
80005b9e:	58 0a       	cp.w	r10,0
80005ba0:	c0 50       	breq	80005baa <get_arg+0x266>
80005ba2:	23 0a       	sub	r10,48
80005ba4:	58 9a       	cp.w	r10,9
80005ba6:	fe 98 ff fa 	brls	80005b9a <get_arg+0x256>
80005baa:	0e 9b       	mov	r11,r7
80005bac:	40 7c       	lddsp	r12,sp[0x1c]
80005bae:	30 ba       	mov	r10,11
80005bb0:	f4 0c 18 00 	cp.b	r12,r10
80005bb4:	fe 91 fe f2 	brne	80005998 <get_arg+0x54>
80005bb8:	40 42       	lddsp	r2,sp[0x10]
80005bba:	17 8c       	ld.ub	r12,r11[0x0]
80005bbc:	0a 32       	cp.w	r2,r5
80005bbe:	5f 4a       	srge	r10
80005bc0:	f0 0c 18 00 	cp.b	r12,r8
80005bc4:	5f 1c       	srne	r12
80005bc6:	f9 ea 00 0a 	and	r10,r12,r10
80005bca:	f0 0a 18 00 	cp.b	r10,r8
80005bce:	fe 91 fe cf 	brne	8000596c <get_arg+0x28>
80005bd2:	30 08       	mov	r8,0
80005bd4:	40 4e       	lddsp	lr,sp[0x10]
80005bd6:	17 8a       	ld.ub	r10,r11[0x0]
80005bd8:	e2 05 00 21 	add	r1,r1,r5<<0x2
80005bdc:	f0 0a 18 00 	cp.b	r10,r8
80005be0:	fc 09 17 10 	movne	r9,lr
80005be4:	e6 05 00 38 	add	r8,r3,r5<<0x3
80005be8:	06 9e       	mov	lr,r3
80005bea:	c2 a8       	rjmp	80005c3e <get_arg+0x2fa>
80005bec:	62 0a       	ld.w	r10,r1[0x0]
80005bee:	58 3a       	cp.w	r10,3
80005bf0:	c1 e0       	breq	80005c2c <get_arg+0x2e8>
80005bf2:	e0 89 00 07 	brgt	80005c00 <get_arg+0x2bc>
80005bf6:	58 1a       	cp.w	r10,1
80005bf8:	c1 a0       	breq	80005c2c <get_arg+0x2e8>
80005bfa:	58 2a       	cp.w	r10,2
80005bfc:	c1 81       	brne	80005c2c <get_arg+0x2e8>
80005bfe:	c0 58       	rjmp	80005c08 <get_arg+0x2c4>
80005c00:	58 5a       	cp.w	r10,5
80005c02:	c0 c0       	breq	80005c1a <get_arg+0x2d6>
80005c04:	c0 b5       	brlt	80005c1a <get_arg+0x2d6>
80005c06:	c1 38       	rjmp	80005c2c <get_arg+0x2e8>
80005c08:	6c 0a       	ld.w	r10,r6[0x0]
80005c0a:	f4 cc ff f8 	sub	r12,r10,-8
80005c0e:	8d 0c       	st.w	r6[0x0],r12
80005c10:	f4 e2 00 00 	ld.d	r2,r10[0]
80005c14:	f0 e3 00 00 	st.d	r8[0],r2
80005c18:	c1 08       	rjmp	80005c38 <get_arg+0x2f4>
80005c1a:	6c 0a       	ld.w	r10,r6[0x0]
80005c1c:	f4 cc ff f8 	sub	r12,r10,-8
80005c20:	8d 0c       	st.w	r6[0x0],r12
80005c22:	f4 e2 00 00 	ld.d	r2,r10[0]
80005c26:	f0 e3 00 00 	st.d	r8[0],r2
80005c2a:	c0 78       	rjmp	80005c38 <get_arg+0x2f4>
80005c2c:	6c 0a       	ld.w	r10,r6[0x0]
80005c2e:	f4 cc ff fc 	sub	r12,r10,-4
80005c32:	8d 0c       	st.w	r6[0x0],r12
80005c34:	74 0a       	ld.w	r10,r10[0x0]
80005c36:	91 0a       	st.w	r8[0x0],r10
80005c38:	2f f5       	sub	r5,-1
80005c3a:	2f 88       	sub	r8,-8
80005c3c:	2f c1       	sub	r1,-4
80005c3e:	12 35       	cp.w	r5,r9
80005c40:	fe 9a ff d6 	brle	80005bec <get_arg+0x2a8>
80005c44:	1c 93       	mov	r3,lr
80005c46:	40 52       	lddsp	r2,sp[0x14]
80005c48:	40 6e       	lddsp	lr,sp[0x18]
80005c4a:	85 05       	st.w	r2[0x0],r5
80005c4c:	9d 0b       	st.w	lr[0x0],r11
80005c4e:	40 4b       	lddsp	r11,sp[0x10]
80005c50:	e6 0b 00 3c 	add	r12,r3,r11<<0x3
80005c54:	2f 8d       	sub	sp,-32
80005c56:	d8 32       	popm	r0-r7,pc

80005c58 <__sprint_r>:
80005c58:	d4 21       	pushm	r4-r7,lr
80005c5a:	14 97       	mov	r7,r10
80005c5c:	74 28       	ld.w	r8,r10[0x8]
80005c5e:	58 08       	cp.w	r8,0
80005c60:	c0 41       	brne	80005c68 <__sprint_r+0x10>
80005c62:	95 18       	st.w	r10[0x4],r8
80005c64:	10 9c       	mov	r12,r8
80005c66:	d8 22       	popm	r4-r7,pc
80005c68:	e0 a0 17 8a 	rcall	80008b7c <__sfvwrite_r>
80005c6c:	30 08       	mov	r8,0
80005c6e:	8f 18       	st.w	r7[0x4],r8
80005c70:	8f 28       	st.w	r7[0x8],r8
80005c72:	d8 22       	popm	r4-r7,pc

80005c74 <_vfprintf_r>:
80005c74:	d4 31       	pushm	r0-r7,lr
80005c76:	fa cd 06 bc 	sub	sp,sp,1724
80005c7a:	51 09       	stdsp	sp[0x40],r9
80005c7c:	16 91       	mov	r1,r11
80005c7e:	14 97       	mov	r7,r10
80005c80:	18 95       	mov	r5,r12
80005c82:	e0 a0 18 cb 	rcall	80008e18 <_localeconv_r>
80005c86:	78 0c       	ld.w	r12,r12[0x0]
80005c88:	50 cc       	stdsp	sp[0x30],r12
80005c8a:	58 05       	cp.w	r5,0
80005c8c:	c0 70       	breq	80005c9a <_vfprintf_r+0x26>
80005c8e:	6a 68       	ld.w	r8,r5[0x18]
80005c90:	58 08       	cp.w	r8,0
80005c92:	c0 41       	brne	80005c9a <_vfprintf_r+0x26>
80005c94:	0a 9c       	mov	r12,r5
80005c96:	fe b0 fc 73 	rcall	8000557c <__sinit>
80005c9a:	fe c8 b2 7e 	sub	r8,pc,-19842
80005c9e:	10 31       	cp.w	r1,r8
80005ca0:	c0 31       	brne	80005ca6 <_vfprintf_r+0x32>
80005ca2:	6a 01       	ld.w	r1,r5[0x0]
80005ca4:	c0 c8       	rjmp	80005cbc <_vfprintf_r+0x48>
80005ca6:	fe c8 b2 6a 	sub	r8,pc,-19862
80005caa:	10 31       	cp.w	r1,r8
80005cac:	c0 31       	brne	80005cb2 <_vfprintf_r+0x3e>
80005cae:	6a 11       	ld.w	r1,r5[0x4]
80005cb0:	c0 68       	rjmp	80005cbc <_vfprintf_r+0x48>
80005cb2:	fe c8 b2 56 	sub	r8,pc,-19882
80005cb6:	10 31       	cp.w	r1,r8
80005cb8:	eb f1 00 02 	ld.weq	r1,r5[0x8]
80005cbc:	82 68       	ld.sh	r8,r1[0xc]
80005cbe:	ed b8 00 03 	bld	r8,0x3
80005cc2:	c0 41       	brne	80005cca <_vfprintf_r+0x56>
80005cc4:	62 48       	ld.w	r8,r1[0x10]
80005cc6:	58 08       	cp.w	r8,0
80005cc8:	c0 71       	brne	80005cd6 <_vfprintf_r+0x62>
80005cca:	02 9b       	mov	r11,r1
80005ccc:	0a 9c       	mov	r12,r5
80005cce:	e0 a0 0f 71 	rcall	80007bb0 <__swsetup_r>
80005cd2:	e0 81 0f 54 	brne	80007b7a <_vfprintf_r+0x1f06>
80005cd6:	82 68       	ld.sh	r8,r1[0xc]
80005cd8:	10 99       	mov	r9,r8
80005cda:	e2 19 00 1a 	andl	r9,0x1a,COH
80005cde:	58 a9       	cp.w	r9,10
80005ce0:	c3 c1       	brne	80005d58 <_vfprintf_r+0xe4>
80005ce2:	82 79       	ld.sh	r9,r1[0xe]
80005ce4:	30 0a       	mov	r10,0
80005ce6:	f4 09 19 00 	cp.h	r9,r10
80005cea:	c3 75       	brlt	80005d58 <_vfprintf_r+0xe4>
80005cec:	a1 d8       	cbr	r8,0x1
80005cee:	fb 58 05 d0 	st.h	sp[1488],r8
80005cf2:	62 88       	ld.w	r8,r1[0x20]
80005cf4:	fb 48 05 e4 	st.w	sp[1508],r8
80005cf8:	62 a8       	ld.w	r8,r1[0x28]
80005cfa:	fb 48 05 ec 	st.w	sp[1516],r8
80005cfe:	fa c8 ff bc 	sub	r8,sp,-68
80005d02:	fb 48 05 d4 	st.w	sp[1492],r8
80005d06:	fb 48 05 c4 	st.w	sp[1476],r8
80005d0a:	e0 68 04 00 	mov	r8,1024
80005d0e:	fb 48 05 d8 	st.w	sp[1496],r8
80005d12:	fb 48 05 cc 	st.w	sp[1484],r8
80005d16:	30 08       	mov	r8,0
80005d18:	fb 59 05 d2 	st.h	sp[1490],r9
80005d1c:	0e 9a       	mov	r10,r7
80005d1e:	41 09       	lddsp	r9,sp[0x40]
80005d20:	fa c7 fa 3c 	sub	r7,sp,-1476
80005d24:	fb 48 05 dc 	st.w	sp[1500],r8
80005d28:	0a 9c       	mov	r12,r5
80005d2a:	0e 9b       	mov	r11,r7
80005d2c:	ca 4f       	rcall	80005c74 <_vfprintf_r>
80005d2e:	50 bc       	stdsp	sp[0x2c],r12
80005d30:	c0 95       	brlt	80005d42 <_vfprintf_r+0xce>
80005d32:	0e 9b       	mov	r11,r7
80005d34:	0a 9c       	mov	r12,r5
80005d36:	e0 a0 16 9b 	rcall	80008a6c <_fflush_r>
80005d3a:	40 be       	lddsp	lr,sp[0x2c]
80005d3c:	f9 be 01 ff 	movne	lr,-1
80005d40:	50 be       	stdsp	sp[0x2c],lr
80005d42:	fb 08 05 d0 	ld.sh	r8,sp[1488]
80005d46:	ed b8 00 06 	bld	r8,0x6
80005d4a:	e0 81 0f 1a 	brne	80007b7e <_vfprintf_r+0x1f0a>
80005d4e:	82 68       	ld.sh	r8,r1[0xc]
80005d50:	a7 a8       	sbr	r8,0x6
80005d52:	a2 68       	st.h	r1[0xc],r8
80005d54:	e0 8f 0f 15 	bral	80007b7e <_vfprintf_r+0x1f0a>
80005d58:	30 08       	mov	r8,0
80005d5a:	fb 48 06 b4 	st.w	sp[1716],r8
80005d5e:	fb 48 06 90 	st.w	sp[1680],r8
80005d62:	fb 48 06 8c 	st.w	sp[1676],r8
80005d66:	fb 48 06 b0 	st.w	sp[1712],r8
80005d6a:	30 08       	mov	r8,0
80005d6c:	30 09       	mov	r9,0
80005d6e:	50 a7       	stdsp	sp[0x28],r7
80005d70:	50 78       	stdsp	sp[0x1c],r8
80005d72:	fa c3 f9 e0 	sub	r3,sp,-1568
80005d76:	3f f8       	mov	r8,-1
80005d78:	50 59       	stdsp	sp[0x14],r9
80005d7a:	fb 43 06 88 	st.w	sp[1672],r3
80005d7e:	fb 48 05 44 	st.w	sp[1348],r8
80005d82:	12 9c       	mov	r12,r9
80005d84:	50 69       	stdsp	sp[0x18],r9
80005d86:	50 d9       	stdsp	sp[0x34],r9
80005d88:	50 e9       	stdsp	sp[0x38],r9
80005d8a:	50 b9       	stdsp	sp[0x2c],r9
80005d8c:	12 97       	mov	r7,r9
80005d8e:	0a 94       	mov	r4,r5
80005d90:	40 a2       	lddsp	r2,sp[0x28]
80005d92:	32 5a       	mov	r10,37
80005d94:	30 08       	mov	r8,0
80005d96:	c0 28       	rjmp	80005d9a <_vfprintf_r+0x126>
80005d98:	2f f2       	sub	r2,-1
80005d9a:	05 89       	ld.ub	r9,r2[0x0]
80005d9c:	f0 09 18 00 	cp.b	r9,r8
80005da0:	5f 1b       	srne	r11
80005da2:	f4 09 18 00 	cp.b	r9,r10
80005da6:	5f 19       	srne	r9
80005da8:	f3 eb 00 0b 	and	r11,r9,r11
80005dac:	f0 0b 18 00 	cp.b	r11,r8
80005db0:	cf 41       	brne	80005d98 <_vfprintf_r+0x124>
80005db2:	40 ab       	lddsp	r11,sp[0x28]
80005db4:	e4 0b 01 06 	sub	r6,r2,r11
80005db8:	c1 e0       	breq	80005df4 <_vfprintf_r+0x180>
80005dba:	fa f8 06 90 	ld.w	r8,sp[1680]
80005dbe:	0c 08       	add	r8,r6
80005dc0:	87 0b       	st.w	r3[0x0],r11
80005dc2:	fb 48 06 90 	st.w	sp[1680],r8
80005dc6:	87 16       	st.w	r3[0x4],r6
80005dc8:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005dcc:	2f f8       	sub	r8,-1
80005dce:	fb 48 06 8c 	st.w	sp[1676],r8
80005dd2:	58 78       	cp.w	r8,7
80005dd4:	e0 89 00 04 	brgt	80005ddc <_vfprintf_r+0x168>
80005dd8:	2f 83       	sub	r3,-8
80005dda:	c0 a8       	rjmp	80005dee <_vfprintf_r+0x17a>
80005ddc:	fa ca f9 78 	sub	r10,sp,-1672
80005de0:	02 9b       	mov	r11,r1
80005de2:	08 9c       	mov	r12,r4
80005de4:	c3 af       	rcall	80005c58 <__sprint_r>
80005de6:	e0 81 0e c6 	brne	80007b72 <_vfprintf_r+0x1efe>
80005dea:	fa c3 f9 e0 	sub	r3,sp,-1568
80005dee:	40 ba       	lddsp	r10,sp[0x2c]
80005df0:	0c 0a       	add	r10,r6
80005df2:	50 ba       	stdsp	sp[0x2c],r10
80005df4:	05 89       	ld.ub	r9,r2[0x0]
80005df6:	30 08       	mov	r8,0
80005df8:	f0 09 18 00 	cp.b	r9,r8
80005dfc:	e0 80 0e aa 	breq	80007b50 <_vfprintf_r+0x1edc>
80005e00:	30 09       	mov	r9,0
80005e02:	fb 68 06 bb 	st.b	sp[1723],r8
80005e06:	0e 96       	mov	r6,r7
80005e08:	e4 c8 ff ff 	sub	r8,r2,-1
80005e0c:	3f fe       	mov	lr,-1
80005e0e:	50 93       	stdsp	sp[0x24],r3
80005e10:	50 41       	stdsp	sp[0x10],r1
80005e12:	0e 93       	mov	r3,r7
80005e14:	04 91       	mov	r1,r2
80005e16:	50 89       	stdsp	sp[0x20],r9
80005e18:	50 a8       	stdsp	sp[0x28],r8
80005e1a:	50 2e       	stdsp	sp[0x8],lr
80005e1c:	50 39       	stdsp	sp[0xc],r9
80005e1e:	12 95       	mov	r5,r9
80005e20:	12 90       	mov	r0,r9
80005e22:	10 97       	mov	r7,r8
80005e24:	08 92       	mov	r2,r4
80005e26:	c0 78       	rjmp	80005e34 <_vfprintf_r+0x1c0>
80005e28:	3f fc       	mov	r12,-1
80005e2a:	08 97       	mov	r7,r4
80005e2c:	50 2c       	stdsp	sp[0x8],r12
80005e2e:	c0 38       	rjmp	80005e34 <_vfprintf_r+0x1c0>
80005e30:	30 0b       	mov	r11,0
80005e32:	50 3b       	stdsp	sp[0xc],r11
80005e34:	0f 38       	ld.ub	r8,r7++
80005e36:	c0 28       	rjmp	80005e3a <_vfprintf_r+0x1c6>
80005e38:	12 90       	mov	r0,r9
80005e3a:	f0 c9 00 20 	sub	r9,r8,32
80005e3e:	e0 49 00 58 	cp.w	r9,88
80005e42:	e0 8b 0a 30 	brhi	800072a2 <_vfprintf_r+0x162e>
80005e46:	fe ca b3 8e 	sub	r10,pc,-19570
80005e4a:	f4 09 03 2f 	ld.w	pc,r10[r9<<0x2]
80005e4e:	50 a7       	stdsp	sp[0x28],r7
80005e50:	50 80       	stdsp	sp[0x20],r0
80005e52:	0c 97       	mov	r7,r6
80005e54:	04 94       	mov	r4,r2
80005e56:	06 96       	mov	r6,r3
80005e58:	02 92       	mov	r2,r1
80005e5a:	fe c9 b1 66 	sub	r9,pc,-20122
80005e5e:	40 93       	lddsp	r3,sp[0x24]
80005e60:	10 90       	mov	r0,r8
80005e62:	40 41       	lddsp	r1,sp[0x10]
80005e64:	50 d9       	stdsp	sp[0x34],r9
80005e66:	e0 8f 08 8e 	bral	80006f82 <_vfprintf_r+0x130e>
80005e6a:	30 08       	mov	r8,0
80005e6c:	fb 39 06 bb 	ld.ub	r9,sp[1723]
80005e70:	f0 09 18 00 	cp.b	r9,r8
80005e74:	ce 01       	brne	80005e34 <_vfprintf_r+0x1c0>
80005e76:	32 08       	mov	r8,32
80005e78:	c6 e8       	rjmp	80005f54 <_vfprintf_r+0x2e0>
80005e7a:	a1 a5       	sbr	r5,0x0
80005e7c:	cd cb       	rjmp	80005e34 <_vfprintf_r+0x1c0>
80005e7e:	0f 89       	ld.ub	r9,r7[0x0]
80005e80:	f2 c8 00 30 	sub	r8,r9,48
80005e84:	58 98       	cp.w	r8,9
80005e86:	e0 8b 00 1d 	brhi	80005ec0 <_vfprintf_r+0x24c>
80005e8a:	ee c8 ff ff 	sub	r8,r7,-1
80005e8e:	30 0b       	mov	r11,0
80005e90:	23 09       	sub	r9,48
80005e92:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
80005e96:	f2 0b 00 1b 	add	r11,r9,r11<<0x1
80005e9a:	11 39       	ld.ub	r9,r8++
80005e9c:	f2 ca 00 30 	sub	r10,r9,48
80005ea0:	58 9a       	cp.w	r10,9
80005ea2:	fe 98 ff f7 	brls	80005e90 <_vfprintf_r+0x21c>
80005ea6:	e0 49 00 24 	cp.w	r9,36
80005eaa:	cc 31       	brne	80005e30 <_vfprintf_r+0x1bc>
80005eac:	e0 4b 00 20 	cp.w	r11,32
80005eb0:	e0 89 0e 60 	brgt	80007b70 <_vfprintf_r+0x1efc>
80005eb4:	20 1b       	sub	r11,1
80005eb6:	fa f9 06 b4 	ld.w	r9,sp[1716]
80005eba:	12 3b       	cp.w	r11,r9
80005ebc:	c0 95       	brlt	80005ece <_vfprintf_r+0x25a>
80005ebe:	c1 08       	rjmp	80005ede <_vfprintf_r+0x26a>
80005ec0:	fa f9 06 b4 	ld.w	r9,sp[1716]
80005ec4:	ec ca ff ff 	sub	r10,r6,-1
80005ec8:	12 36       	cp.w	r6,r9
80005eca:	c1 f5       	brlt	80005f08 <_vfprintf_r+0x294>
80005ecc:	c2 68       	rjmp	80005f18 <_vfprintf_r+0x2a4>
80005ece:	fa ce f9 44 	sub	lr,sp,-1724
80005ed2:	10 97       	mov	r7,r8
80005ed4:	fc 0b 00 3b 	add	r11,lr,r11<<0x3
80005ed8:	f6 f0 fd 88 	ld.w	r0,r11[-632]
80005edc:	c3 58       	rjmp	80005f46 <_vfprintf_r+0x2d2>
80005ede:	10 97       	mov	r7,r8
80005ee0:	fa c8 f9 50 	sub	r8,sp,-1712
80005ee4:	1a d8       	st.w	--sp,r8
80005ee6:	fa c8 fa b8 	sub	r8,sp,-1352
80005eea:	1a d8       	st.w	--sp,r8
80005eec:	fa c8 fb b4 	sub	r8,sp,-1100
80005ef0:	02 9a       	mov	r10,r1
80005ef2:	1a d8       	st.w	--sp,r8
80005ef4:	04 9c       	mov	r12,r2
80005ef6:	fa c8 f9 40 	sub	r8,sp,-1728
80005efa:	fa c9 ff b4 	sub	r9,sp,-76
80005efe:	fe b0 fd 23 	rcall	80005944 <get_arg>
80005f02:	2f dd       	sub	sp,-12
80005f04:	78 00       	ld.w	r0,r12[0x0]
80005f06:	c2 08       	rjmp	80005f46 <_vfprintf_r+0x2d2>
80005f08:	fa cc f9 44 	sub	r12,sp,-1724
80005f0c:	14 96       	mov	r6,r10
80005f0e:	f8 03 00 38 	add	r8,r12,r3<<0x3
80005f12:	f0 f0 fd 88 	ld.w	r0,r8[-632]
80005f16:	c1 88       	rjmp	80005f46 <_vfprintf_r+0x2d2>
80005f18:	41 08       	lddsp	r8,sp[0x40]
80005f1a:	59 f9       	cp.w	r9,31
80005f1c:	e0 89 00 11 	brgt	80005f3e <_vfprintf_r+0x2ca>
80005f20:	f0 cb ff fc 	sub	r11,r8,-4
80005f24:	51 0b       	stdsp	sp[0x40],r11
80005f26:	70 00       	ld.w	r0,r8[0x0]
80005f28:	fa cb f9 44 	sub	r11,sp,-1724
80005f2c:	f6 09 00 38 	add	r8,r11,r9<<0x3
80005f30:	f1 40 fd 88 	st.w	r8[-632],r0
80005f34:	2f f9       	sub	r9,-1
80005f36:	14 96       	mov	r6,r10
80005f38:	fb 49 06 b4 	st.w	sp[1716],r9
80005f3c:	c0 58       	rjmp	80005f46 <_vfprintf_r+0x2d2>
80005f3e:	70 00       	ld.w	r0,r8[0x0]
80005f40:	14 96       	mov	r6,r10
80005f42:	2f c8       	sub	r8,-4
80005f44:	51 08       	stdsp	sp[0x40],r8
80005f46:	58 00       	cp.w	r0,0
80005f48:	fe 94 ff 76 	brge	80005e34 <_vfprintf_r+0x1c0>
80005f4c:	5c 30       	neg	r0
80005f4e:	a3 a5       	sbr	r5,0x2
80005f50:	c7 2b       	rjmp	80005e34 <_vfprintf_r+0x1c0>
80005f52:	32 b8       	mov	r8,43
80005f54:	fb 68 06 bb 	st.b	sp[1723],r8
80005f58:	c6 eb       	rjmp	80005e34 <_vfprintf_r+0x1c0>
80005f5a:	0f 38       	ld.ub	r8,r7++
80005f5c:	e0 48 00 2a 	cp.w	r8,42
80005f60:	c0 30       	breq	80005f66 <_vfprintf_r+0x2f2>
80005f62:	30 09       	mov	r9,0
80005f64:	c7 98       	rjmp	80006056 <_vfprintf_r+0x3e2>
80005f66:	0f 88       	ld.ub	r8,r7[0x0]
80005f68:	f0 c9 00 30 	sub	r9,r8,48
80005f6c:	58 99       	cp.w	r9,9
80005f6e:	e0 8b 00 1f 	brhi	80005fac <_vfprintf_r+0x338>
80005f72:	ee c4 ff ff 	sub	r4,r7,-1
80005f76:	30 0b       	mov	r11,0
80005f78:	23 08       	sub	r8,48
80005f7a:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
80005f7e:	f0 0b 00 1b 	add	r11,r8,r11<<0x1
80005f82:	09 38       	ld.ub	r8,r4++
80005f84:	f0 c9 00 30 	sub	r9,r8,48
80005f88:	58 99       	cp.w	r9,9
80005f8a:	fe 98 ff f7 	brls	80005f78 <_vfprintf_r+0x304>
80005f8e:	e0 48 00 24 	cp.w	r8,36
80005f92:	fe 91 ff 4f 	brne	80005e30 <_vfprintf_r+0x1bc>
80005f96:	e0 4b 00 20 	cp.w	r11,32
80005f9a:	e0 89 0d eb 	brgt	80007b70 <_vfprintf_r+0x1efc>
80005f9e:	20 1b       	sub	r11,1
80005fa0:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005fa4:	10 3b       	cp.w	r11,r8
80005fa6:	c0 a5       	brlt	80005fba <_vfprintf_r+0x346>
80005fa8:	c1 18       	rjmp	80005fca <_vfprintf_r+0x356>
80005faa:	d7 03       	nop
80005fac:	fa fa 06 b4 	ld.w	r10,sp[1716]
80005fb0:	ec c9 ff ff 	sub	r9,r6,-1
80005fb4:	14 36       	cp.w	r6,r10
80005fb6:	c1 f5       	brlt	80005ff4 <_vfprintf_r+0x380>
80005fb8:	c2 88       	rjmp	80006008 <_vfprintf_r+0x394>
80005fba:	fa ca f9 44 	sub	r10,sp,-1724
80005fbe:	f4 0b 00 3b 	add	r11,r10,r11<<0x3
80005fc2:	f6 fb fd 88 	ld.w	r11,r11[-632]
80005fc6:	50 2b       	stdsp	sp[0x8],r11
80005fc8:	c3 c8       	rjmp	80006040 <_vfprintf_r+0x3cc>
80005fca:	fa c8 f9 50 	sub	r8,sp,-1712
80005fce:	1a d8       	st.w	--sp,r8
80005fd0:	fa c8 fa b8 	sub	r8,sp,-1352
80005fd4:	1a d8       	st.w	--sp,r8
80005fd6:	fa c8 fb b4 	sub	r8,sp,-1100
80005fda:	02 9a       	mov	r10,r1
80005fdc:	1a d8       	st.w	--sp,r8
80005fde:	04 9c       	mov	r12,r2
80005fe0:	fa c8 f9 40 	sub	r8,sp,-1728
80005fe4:	fa c9 ff b4 	sub	r9,sp,-76
80005fe8:	fe b0 fc ae 	rcall	80005944 <get_arg>
80005fec:	2f dd       	sub	sp,-12
80005fee:	78 0c       	ld.w	r12,r12[0x0]
80005ff0:	50 2c       	stdsp	sp[0x8],r12
80005ff2:	c2 78       	rjmp	80006040 <_vfprintf_r+0x3cc>
80005ff4:	12 96       	mov	r6,r9
80005ff6:	0e 94       	mov	r4,r7
80005ff8:	fa c9 f9 44 	sub	r9,sp,-1724
80005ffc:	f2 03 00 38 	add	r8,r9,r3<<0x3
80006000:	f0 f8 fd 88 	ld.w	r8,r8[-632]
80006004:	50 28       	stdsp	sp[0x8],r8
80006006:	c1 d8       	rjmp	80006040 <_vfprintf_r+0x3cc>
80006008:	41 08       	lddsp	r8,sp[0x40]
8000600a:	59 fa       	cp.w	r10,31
8000600c:	e0 89 00 14 	brgt	80006034 <_vfprintf_r+0x3c0>
80006010:	f0 cb ff fc 	sub	r11,r8,-4
80006014:	70 08       	ld.w	r8,r8[0x0]
80006016:	51 0b       	stdsp	sp[0x40],r11
80006018:	50 28       	stdsp	sp[0x8],r8
8000601a:	fa c6 f9 44 	sub	r6,sp,-1724
8000601e:	40 2e       	lddsp	lr,sp[0x8]
80006020:	ec 0a 00 38 	add	r8,r6,r10<<0x3
80006024:	f1 4e fd 88 	st.w	r8[-632],lr
80006028:	2f fa       	sub	r10,-1
8000602a:	0e 94       	mov	r4,r7
8000602c:	fb 4a 06 b4 	st.w	sp[1716],r10
80006030:	12 96       	mov	r6,r9
80006032:	c0 78       	rjmp	80006040 <_vfprintf_r+0x3cc>
80006034:	70 0c       	ld.w	r12,r8[0x0]
80006036:	0e 94       	mov	r4,r7
80006038:	2f c8       	sub	r8,-4
8000603a:	50 2c       	stdsp	sp[0x8],r12
8000603c:	12 96       	mov	r6,r9
8000603e:	51 08       	stdsp	sp[0x40],r8
80006040:	40 2b       	lddsp	r11,sp[0x8]
80006042:	58 0b       	cp.w	r11,0
80006044:	fe 95 fe f2 	brlt	80005e28 <_vfprintf_r+0x1b4>
80006048:	08 97       	mov	r7,r4
8000604a:	cf 5a       	rjmp	80005e34 <_vfprintf_r+0x1c0>
8000604c:	f2 09 00 29 	add	r9,r9,r9<<0x2
80006050:	0f 38       	ld.ub	r8,r7++
80006052:	f4 09 00 19 	add	r9,r10,r9<<0x1
80006056:	f0 ca 00 30 	sub	r10,r8,48
8000605a:	58 9a       	cp.w	r10,9
8000605c:	fe 98 ff f8 	brls	8000604c <_vfprintf_r+0x3d8>
80006060:	3f fa       	mov	r10,-1
80006062:	f2 0a 0c 49 	max	r9,r9,r10
80006066:	50 29       	stdsp	sp[0x8],r9
80006068:	ce 9a       	rjmp	80005e3a <_vfprintf_r+0x1c6>
8000606a:	a7 b5       	sbr	r5,0x7
8000606c:	ce 4a       	rjmp	80005e34 <_vfprintf_r+0x1c0>
8000606e:	30 09       	mov	r9,0
80006070:	23 08       	sub	r8,48
80006072:	f2 09 00 29 	add	r9,r9,r9<<0x2
80006076:	f0 09 00 19 	add	r9,r8,r9<<0x1
8000607a:	0f 38       	ld.ub	r8,r7++
8000607c:	f0 ca 00 30 	sub	r10,r8,48
80006080:	58 9a       	cp.w	r10,9
80006082:	fe 98 ff f7 	brls	80006070 <_vfprintf_r+0x3fc>
80006086:	e0 48 00 24 	cp.w	r8,36
8000608a:	fe 91 fe d7 	brne	80005e38 <_vfprintf_r+0x1c4>
8000608e:	e0 49 00 20 	cp.w	r9,32
80006092:	e0 89 0d 6f 	brgt	80007b70 <_vfprintf_r+0x1efc>
80006096:	f2 c3 00 01 	sub	r3,r9,1
8000609a:	30 19       	mov	r9,1
8000609c:	50 39       	stdsp	sp[0xc],r9
8000609e:	cc ba       	rjmp	80005e34 <_vfprintf_r+0x1c0>
800060a0:	a3 b5       	sbr	r5,0x3
800060a2:	cc 9a       	rjmp	80005e34 <_vfprintf_r+0x1c0>
800060a4:	a7 a5       	sbr	r5,0x6
800060a6:	cc 7a       	rjmp	80005e34 <_vfprintf_r+0x1c0>
800060a8:	0a 98       	mov	r8,r5
800060aa:	a5 b5       	sbr	r5,0x5
800060ac:	a5 a8       	sbr	r8,0x4
800060ae:	0f 89       	ld.ub	r9,r7[0x0]
800060b0:	36 ce       	mov	lr,108
800060b2:	fc 09 18 00 	cp.b	r9,lr
800060b6:	f7 b7 00 ff 	subeq	r7,-1
800060ba:	f0 05 17 10 	movne	r5,r8
800060be:	cb ba       	rjmp	80005e34 <_vfprintf_r+0x1c0>
800060c0:	a5 b5       	sbr	r5,0x5
800060c2:	cb 9a       	rjmp	80005e34 <_vfprintf_r+0x1c0>
800060c4:	50 a7       	stdsp	sp[0x28],r7
800060c6:	50 80       	stdsp	sp[0x20],r0
800060c8:	0c 97       	mov	r7,r6
800060ca:	10 90       	mov	r0,r8
800060cc:	06 96       	mov	r6,r3
800060ce:	04 94       	mov	r4,r2
800060d0:	40 93       	lddsp	r3,sp[0x24]
800060d2:	02 92       	mov	r2,r1
800060d4:	0e 99       	mov	r9,r7
800060d6:	40 41       	lddsp	r1,sp[0x10]
800060d8:	fa f8 06 b4 	ld.w	r8,sp[1716]
800060dc:	40 3c       	lddsp	r12,sp[0xc]
800060de:	58 0c       	cp.w	r12,0
800060e0:	c1 d0       	breq	8000611a <_vfprintf_r+0x4a6>
800060e2:	10 36       	cp.w	r6,r8
800060e4:	c0 64       	brge	800060f0 <_vfprintf_r+0x47c>
800060e6:	fa cb f9 44 	sub	r11,sp,-1724
800060ea:	f6 06 00 36 	add	r6,r11,r6<<0x3
800060ee:	c1 d8       	rjmp	80006128 <_vfprintf_r+0x4b4>
800060f0:	fa c8 f9 50 	sub	r8,sp,-1712
800060f4:	1a d8       	st.w	--sp,r8
800060f6:	fa c8 fa b8 	sub	r8,sp,-1352
800060fa:	1a d8       	st.w	--sp,r8
800060fc:	fa c8 fb b4 	sub	r8,sp,-1100
80006100:	1a d8       	st.w	--sp,r8
80006102:	fa c8 f9 40 	sub	r8,sp,-1728
80006106:	fa c9 ff b4 	sub	r9,sp,-76
8000610a:	04 9a       	mov	r10,r2
8000610c:	0c 9b       	mov	r11,r6
8000610e:	08 9c       	mov	r12,r4
80006110:	fe b0 fc 1a 	rcall	80005944 <get_arg>
80006114:	2f dd       	sub	sp,-12
80006116:	19 b8       	ld.ub	r8,r12[0x3]
80006118:	c2 28       	rjmp	8000615c <_vfprintf_r+0x4e8>
8000611a:	2f f7       	sub	r7,-1
8000611c:	10 39       	cp.w	r9,r8
8000611e:	c0 84       	brge	8000612e <_vfprintf_r+0x4ba>
80006120:	fa ca f9 44 	sub	r10,sp,-1724
80006124:	f4 06 00 36 	add	r6,r10,r6<<0x3
80006128:	ed 38 fd 8b 	ld.ub	r8,r6[-629]
8000612c:	c1 88       	rjmp	8000615c <_vfprintf_r+0x4e8>
8000612e:	41 09       	lddsp	r9,sp[0x40]
80006130:	59 f8       	cp.w	r8,31
80006132:	e0 89 00 12 	brgt	80006156 <_vfprintf_r+0x4e2>
80006136:	f2 ca ff fc 	sub	r10,r9,-4
8000613a:	51 0a       	stdsp	sp[0x40],r10
8000613c:	72 09       	ld.w	r9,r9[0x0]
8000613e:	fa c6 f9 44 	sub	r6,sp,-1724
80006142:	ec 08 00 3a 	add	r10,r6,r8<<0x3
80006146:	2f f8       	sub	r8,-1
80006148:	f5 49 fd 88 	st.w	r10[-632],r9
8000614c:	fb 48 06 b4 	st.w	sp[1716],r8
80006150:	f1 d9 c0 08 	bfextu	r8,r9,0x0,0x8
80006154:	c0 48       	rjmp	8000615c <_vfprintf_r+0x4e8>
80006156:	13 b8       	ld.ub	r8,r9[0x3]
80006158:	2f c9       	sub	r9,-4
8000615a:	51 09       	stdsp	sp[0x40],r9
8000615c:	fb 68 06 60 	st.b	sp[1632],r8
80006160:	30 0e       	mov	lr,0
80006162:	30 08       	mov	r8,0
80006164:	30 12       	mov	r2,1
80006166:	fb 68 06 bb 	st.b	sp[1723],r8
8000616a:	50 2e       	stdsp	sp[0x8],lr
8000616c:	e0 8f 08 ad 	bral	800072c6 <_vfprintf_r+0x1652>
80006170:	50 a7       	stdsp	sp[0x28],r7
80006172:	50 80       	stdsp	sp[0x20],r0
80006174:	0c 97       	mov	r7,r6
80006176:	04 94       	mov	r4,r2
80006178:	06 96       	mov	r6,r3
8000617a:	02 92       	mov	r2,r1
8000617c:	40 93       	lddsp	r3,sp[0x24]
8000617e:	10 90       	mov	r0,r8
80006180:	40 41       	lddsp	r1,sp[0x10]
80006182:	a5 a5       	sbr	r5,0x4
80006184:	c0 a8       	rjmp	80006198 <_vfprintf_r+0x524>
80006186:	50 a7       	stdsp	sp[0x28],r7
80006188:	50 80       	stdsp	sp[0x20],r0
8000618a:	0c 97       	mov	r7,r6
8000618c:	04 94       	mov	r4,r2
8000618e:	06 96       	mov	r6,r3
80006190:	02 92       	mov	r2,r1
80006192:	40 93       	lddsp	r3,sp[0x24]
80006194:	10 90       	mov	r0,r8
80006196:	40 41       	lddsp	r1,sp[0x10]
80006198:	ed b5 00 05 	bld	r5,0x5
8000619c:	c5 11       	brne	8000623e <_vfprintf_r+0x5ca>
8000619e:	fa f8 06 b4 	ld.w	r8,sp[1716]
800061a2:	40 3c       	lddsp	r12,sp[0xc]
800061a4:	58 0c       	cp.w	r12,0
800061a6:	c1 e0       	breq	800061e2 <_vfprintf_r+0x56e>
800061a8:	10 36       	cp.w	r6,r8
800061aa:	c0 64       	brge	800061b6 <_vfprintf_r+0x542>
800061ac:	fa cb f9 44 	sub	r11,sp,-1724
800061b0:	f6 06 00 36 	add	r6,r11,r6<<0x3
800061b4:	c2 08       	rjmp	800061f4 <_vfprintf_r+0x580>
800061b6:	fa c8 f9 50 	sub	r8,sp,-1712
800061ba:	1a d8       	st.w	--sp,r8
800061bc:	fa c8 fa b8 	sub	r8,sp,-1352
800061c0:	0c 9b       	mov	r11,r6
800061c2:	1a d8       	st.w	--sp,r8
800061c4:	fa c8 fb b4 	sub	r8,sp,-1100
800061c8:	1a d8       	st.w	--sp,r8
800061ca:	fa c9 ff b4 	sub	r9,sp,-76
800061ce:	fa c8 f9 40 	sub	r8,sp,-1728
800061d2:	04 9a       	mov	r10,r2
800061d4:	08 9c       	mov	r12,r4
800061d6:	fe b0 fb b7 	rcall	80005944 <get_arg>
800061da:	2f dd       	sub	sp,-12
800061dc:	78 1b       	ld.w	r11,r12[0x4]
800061de:	78 09       	ld.w	r9,r12[0x0]
800061e0:	c2 b8       	rjmp	80006236 <_vfprintf_r+0x5c2>
800061e2:	ee ca ff ff 	sub	r10,r7,-1
800061e6:	10 37       	cp.w	r7,r8
800061e8:	c0 b4       	brge	800061fe <_vfprintf_r+0x58a>
800061ea:	fa c9 f9 44 	sub	r9,sp,-1724
800061ee:	14 97       	mov	r7,r10
800061f0:	f2 06 00 36 	add	r6,r9,r6<<0x3
800061f4:	ec fb fd 8c 	ld.w	r11,r6[-628]
800061f8:	ec f9 fd 88 	ld.w	r9,r6[-632]
800061fc:	c1 d8       	rjmp	80006236 <_vfprintf_r+0x5c2>
800061fe:	41 09       	lddsp	r9,sp[0x40]
80006200:	59 f8       	cp.w	r8,31
80006202:	e0 89 00 14 	brgt	8000622a <_vfprintf_r+0x5b6>
80006206:	f2 cb ff f8 	sub	r11,r9,-8
8000620a:	51 0b       	stdsp	sp[0x40],r11
8000620c:	fa c6 f9 44 	sub	r6,sp,-1724
80006210:	72 1b       	ld.w	r11,r9[0x4]
80006212:	ec 08 00 3c 	add	r12,r6,r8<<0x3
80006216:	72 09       	ld.w	r9,r9[0x0]
80006218:	f9 4b fd 8c 	st.w	r12[-628],r11
8000621c:	f9 49 fd 88 	st.w	r12[-632],r9
80006220:	2f f8       	sub	r8,-1
80006222:	14 97       	mov	r7,r10
80006224:	fb 48 06 b4 	st.w	sp[1716],r8
80006228:	c0 78       	rjmp	80006236 <_vfprintf_r+0x5c2>
8000622a:	f2 c8 ff f8 	sub	r8,r9,-8
8000622e:	72 1b       	ld.w	r11,r9[0x4]
80006230:	14 97       	mov	r7,r10
80006232:	51 08       	stdsp	sp[0x40],r8
80006234:	72 09       	ld.w	r9,r9[0x0]
80006236:	16 98       	mov	r8,r11
80006238:	fa e9 00 00 	st.d	sp[0],r8
8000623c:	ca e8       	rjmp	80006398 <_vfprintf_r+0x724>
8000623e:	ed b5 00 04 	bld	r5,0x4
80006242:	c1 71       	brne	80006270 <_vfprintf_r+0x5fc>
80006244:	fa f8 06 b4 	ld.w	r8,sp[1716]
80006248:	40 3e       	lddsp	lr,sp[0xc]
8000624a:	58 0e       	cp.w	lr,0
8000624c:	c0 80       	breq	8000625c <_vfprintf_r+0x5e8>
8000624e:	10 36       	cp.w	r6,r8
80006250:	c6 94       	brge	80006322 <_vfprintf_r+0x6ae>
80006252:	fa cc f9 44 	sub	r12,sp,-1724
80006256:	f8 06 00 36 	add	r6,r12,r6<<0x3
8000625a:	c8 28       	rjmp	8000635e <_vfprintf_r+0x6ea>
8000625c:	ee ca ff ff 	sub	r10,r7,-1
80006260:	10 37       	cp.w	r7,r8
80006262:	e0 84 00 81 	brge	80006364 <_vfprintf_r+0x6f0>
80006266:	fa cb f9 44 	sub	r11,sp,-1724
8000626a:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000626e:	c7 78       	rjmp	8000635c <_vfprintf_r+0x6e8>
80006270:	ed b5 00 06 	bld	r5,0x6
80006274:	c4 b1       	brne	8000630a <_vfprintf_r+0x696>
80006276:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000627a:	40 3c       	lddsp	r12,sp[0xc]
8000627c:	58 0c       	cp.w	r12,0
8000627e:	c1 d0       	breq	800062b8 <_vfprintf_r+0x644>
80006280:	10 36       	cp.w	r6,r8
80006282:	c0 64       	brge	8000628e <_vfprintf_r+0x61a>
80006284:	fa cb f9 44 	sub	r11,sp,-1724
80006288:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000628c:	c1 f8       	rjmp	800062ca <_vfprintf_r+0x656>
8000628e:	fa c8 f9 50 	sub	r8,sp,-1712
80006292:	1a d8       	st.w	--sp,r8
80006294:	fa c8 fa b8 	sub	r8,sp,-1352
80006298:	1a d8       	st.w	--sp,r8
8000629a:	fa c8 fb b4 	sub	r8,sp,-1100
8000629e:	1a d8       	st.w	--sp,r8
800062a0:	fa c8 f9 40 	sub	r8,sp,-1728
800062a4:	fa c9 ff b4 	sub	r9,sp,-76
800062a8:	04 9a       	mov	r10,r2
800062aa:	0c 9b       	mov	r11,r6
800062ac:	08 9c       	mov	r12,r4
800062ae:	fe b0 fb 4b 	rcall	80005944 <get_arg>
800062b2:	2f dd       	sub	sp,-12
800062b4:	98 18       	ld.sh	r8,r12[0x2]
800062b6:	c2 68       	rjmp	80006302 <_vfprintf_r+0x68e>
800062b8:	ee ca ff ff 	sub	r10,r7,-1
800062bc:	10 37       	cp.w	r7,r8
800062be:	c0 94       	brge	800062d0 <_vfprintf_r+0x65c>
800062c0:	fa c9 f9 44 	sub	r9,sp,-1724
800062c4:	14 97       	mov	r7,r10
800062c6:	f2 06 00 36 	add	r6,r9,r6<<0x3
800062ca:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
800062ce:	c1 a8       	rjmp	80006302 <_vfprintf_r+0x68e>
800062d0:	41 09       	lddsp	r9,sp[0x40]
800062d2:	59 f8       	cp.w	r8,31
800062d4:	e0 89 00 13 	brgt	800062fa <_vfprintf_r+0x686>
800062d8:	f2 cb ff fc 	sub	r11,r9,-4
800062dc:	51 0b       	stdsp	sp[0x40],r11
800062de:	72 09       	ld.w	r9,r9[0x0]
800062e0:	fa c6 f9 44 	sub	r6,sp,-1724
800062e4:	ec 08 00 3b 	add	r11,r6,r8<<0x3
800062e8:	2f f8       	sub	r8,-1
800062ea:	f7 49 fd 88 	st.w	r11[-632],r9
800062ee:	fb 48 06 b4 	st.w	sp[1716],r8
800062f2:	14 97       	mov	r7,r10
800062f4:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
800062f8:	c0 58       	rjmp	80006302 <_vfprintf_r+0x68e>
800062fa:	92 18       	ld.sh	r8,r9[0x2]
800062fc:	14 97       	mov	r7,r10
800062fe:	2f c9       	sub	r9,-4
80006300:	51 09       	stdsp	sp[0x40],r9
80006302:	50 18       	stdsp	sp[0x4],r8
80006304:	bf 58       	asr	r8,0x1f
80006306:	50 08       	stdsp	sp[0x0],r8
80006308:	c4 88       	rjmp	80006398 <_vfprintf_r+0x724>
8000630a:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000630e:	40 3c       	lddsp	r12,sp[0xc]
80006310:	58 0c       	cp.w	r12,0
80006312:	c1 d0       	breq	8000634c <_vfprintf_r+0x6d8>
80006314:	10 36       	cp.w	r6,r8
80006316:	c0 64       	brge	80006322 <_vfprintf_r+0x6ae>
80006318:	fa cb f9 44 	sub	r11,sp,-1724
8000631c:	f6 06 00 36 	add	r6,r11,r6<<0x3
80006320:	c1 f8       	rjmp	8000635e <_vfprintf_r+0x6ea>
80006322:	fa c8 f9 50 	sub	r8,sp,-1712
80006326:	1a d8       	st.w	--sp,r8
80006328:	fa c8 fa b8 	sub	r8,sp,-1352
8000632c:	0c 9b       	mov	r11,r6
8000632e:	1a d8       	st.w	--sp,r8
80006330:	fa c8 fb b4 	sub	r8,sp,-1100
80006334:	04 9a       	mov	r10,r2
80006336:	1a d8       	st.w	--sp,r8
80006338:	08 9c       	mov	r12,r4
8000633a:	fa c8 f9 40 	sub	r8,sp,-1728
8000633e:	fa c9 ff b4 	sub	r9,sp,-76
80006342:	fe b0 fb 01 	rcall	80005944 <get_arg>
80006346:	2f dd       	sub	sp,-12
80006348:	78 0b       	ld.w	r11,r12[0x0]
8000634a:	c2 48       	rjmp	80006392 <_vfprintf_r+0x71e>
8000634c:	ee ca ff ff 	sub	r10,r7,-1
80006350:	10 37       	cp.w	r7,r8
80006352:	c0 94       	brge	80006364 <_vfprintf_r+0x6f0>
80006354:	fa c9 f9 44 	sub	r9,sp,-1724
80006358:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000635c:	14 97       	mov	r7,r10
8000635e:	ec fb fd 88 	ld.w	r11,r6[-632]
80006362:	c1 88       	rjmp	80006392 <_vfprintf_r+0x71e>
80006364:	41 09       	lddsp	r9,sp[0x40]
80006366:	59 f8       	cp.w	r8,31
80006368:	e0 89 00 11 	brgt	8000638a <_vfprintf_r+0x716>
8000636c:	f2 cb ff fc 	sub	r11,r9,-4
80006370:	51 0b       	stdsp	sp[0x40],r11
80006372:	fa c6 f9 44 	sub	r6,sp,-1724
80006376:	72 0b       	ld.w	r11,r9[0x0]
80006378:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000637c:	f3 4b fd 88 	st.w	r9[-632],r11
80006380:	2f f8       	sub	r8,-1
80006382:	14 97       	mov	r7,r10
80006384:	fb 48 06 b4 	st.w	sp[1716],r8
80006388:	c0 58       	rjmp	80006392 <_vfprintf_r+0x71e>
8000638a:	72 0b       	ld.w	r11,r9[0x0]
8000638c:	14 97       	mov	r7,r10
8000638e:	2f c9       	sub	r9,-4
80006390:	51 09       	stdsp	sp[0x40],r9
80006392:	50 1b       	stdsp	sp[0x4],r11
80006394:	bf 5b       	asr	r11,0x1f
80006396:	50 0b       	stdsp	sp[0x0],r11
80006398:	fa ea 00 00 	ld.d	r10,sp[0]
8000639c:	58 0a       	cp.w	r10,0
8000639e:	5c 2b       	cpc	r11
800063a0:	c0 e4       	brge	800063bc <_vfprintf_r+0x748>
800063a2:	30 08       	mov	r8,0
800063a4:	fa ea 00 00 	ld.d	r10,sp[0]
800063a8:	30 09       	mov	r9,0
800063aa:	f0 0a 01 0a 	sub	r10,r8,r10
800063ae:	f2 0b 01 4b 	sbc	r11,r9,r11
800063b2:	32 d8       	mov	r8,45
800063b4:	fa eb 00 00 	st.d	sp[0],r10
800063b8:	fb 68 06 bb 	st.b	sp[1723],r8
800063bc:	30 18       	mov	r8,1
800063be:	e0 8f 06 fa 	bral	800071b2 <_vfprintf_r+0x153e>
800063c2:	50 a7       	stdsp	sp[0x28],r7
800063c4:	50 80       	stdsp	sp[0x20],r0
800063c6:	0c 97       	mov	r7,r6
800063c8:	04 94       	mov	r4,r2
800063ca:	06 96       	mov	r6,r3
800063cc:	02 92       	mov	r2,r1
800063ce:	40 93       	lddsp	r3,sp[0x24]
800063d0:	10 90       	mov	r0,r8
800063d2:	40 41       	lddsp	r1,sp[0x10]
800063d4:	0e 99       	mov	r9,r7
800063d6:	ed b5 00 03 	bld	r5,0x3
800063da:	c4 11       	brne	8000645c <_vfprintf_r+0x7e8>
800063dc:	fa f8 06 b4 	ld.w	r8,sp[1716]
800063e0:	40 3a       	lddsp	r10,sp[0xc]
800063e2:	58 0a       	cp.w	r10,0
800063e4:	c1 90       	breq	80006416 <_vfprintf_r+0x7a2>
800063e6:	10 36       	cp.w	r6,r8
800063e8:	c6 45       	brlt	800064b0 <_vfprintf_r+0x83c>
800063ea:	fa c8 f9 50 	sub	r8,sp,-1712
800063ee:	1a d8       	st.w	--sp,r8
800063f0:	fa c8 fa b8 	sub	r8,sp,-1352
800063f4:	1a d8       	st.w	--sp,r8
800063f6:	fa c8 fb b4 	sub	r8,sp,-1100
800063fa:	0c 9b       	mov	r11,r6
800063fc:	1a d8       	st.w	--sp,r8
800063fe:	04 9a       	mov	r10,r2
80006400:	fa c8 f9 40 	sub	r8,sp,-1728
80006404:	fa c9 ff b4 	sub	r9,sp,-76
80006408:	08 9c       	mov	r12,r4
8000640a:	fe b0 fa 9d 	rcall	80005944 <get_arg>
8000640e:	2f dd       	sub	sp,-12
80006410:	78 16       	ld.w	r6,r12[0x4]
80006412:	50 76       	stdsp	sp[0x1c],r6
80006414:	c4 88       	rjmp	800064a4 <_vfprintf_r+0x830>
80006416:	2f f7       	sub	r7,-1
80006418:	10 39       	cp.w	r9,r8
8000641a:	c0 c4       	brge	80006432 <_vfprintf_r+0x7be>
8000641c:	fa ce f9 44 	sub	lr,sp,-1724
80006420:	fc 06 00 36 	add	r6,lr,r6<<0x3
80006424:	ec fc fd 8c 	ld.w	r12,r6[-628]
80006428:	50 7c       	stdsp	sp[0x1c],r12
8000642a:	ec f6 fd 88 	ld.w	r6,r6[-632]
8000642e:	50 56       	stdsp	sp[0x14],r6
80006430:	c6 68       	rjmp	800064fc <_vfprintf_r+0x888>
80006432:	41 09       	lddsp	r9,sp[0x40]
80006434:	59 f8       	cp.w	r8,31
80006436:	e0 89 00 10 	brgt	80006456 <_vfprintf_r+0x7e2>
8000643a:	f2 ca ff f8 	sub	r10,r9,-8
8000643e:	72 1b       	ld.w	r11,r9[0x4]
80006440:	51 0a       	stdsp	sp[0x40],r10
80006442:	72 09       	ld.w	r9,r9[0x0]
80006444:	fa ca f9 44 	sub	r10,sp,-1724
80006448:	50 7b       	stdsp	sp[0x1c],r11
8000644a:	50 59       	stdsp	sp[0x14],r9
8000644c:	f4 08 00 39 	add	r9,r10,r8<<0x3
80006450:	40 5b       	lddsp	r11,sp[0x14]
80006452:	40 7a       	lddsp	r10,sp[0x1c]
80006454:	c4 78       	rjmp	800064e2 <_vfprintf_r+0x86e>
80006456:	72 18       	ld.w	r8,r9[0x4]
80006458:	50 78       	stdsp	sp[0x1c],r8
8000645a:	c4 c8       	rjmp	800064f2 <_vfprintf_r+0x87e>
8000645c:	fa f8 06 b4 	ld.w	r8,sp[1716]
80006460:	40 3e       	lddsp	lr,sp[0xc]
80006462:	58 0e       	cp.w	lr,0
80006464:	c2 30       	breq	800064aa <_vfprintf_r+0x836>
80006466:	10 36       	cp.w	r6,r8
80006468:	c0 94       	brge	8000647a <_vfprintf_r+0x806>
8000646a:	fa cc f9 44 	sub	r12,sp,-1724
8000646e:	f8 06 00 36 	add	r6,r12,r6<<0x3
80006472:	ec fb fd 8c 	ld.w	r11,r6[-628]
80006476:	50 7b       	stdsp	sp[0x1c],r11
80006478:	cd 9b       	rjmp	8000642a <_vfprintf_r+0x7b6>
8000647a:	fa c8 f9 50 	sub	r8,sp,-1712
8000647e:	1a d8       	st.w	--sp,r8
80006480:	fa c8 fa b8 	sub	r8,sp,-1352
80006484:	04 9a       	mov	r10,r2
80006486:	1a d8       	st.w	--sp,r8
80006488:	fa c8 fb b4 	sub	r8,sp,-1100
8000648c:	0c 9b       	mov	r11,r6
8000648e:	1a d8       	st.w	--sp,r8
80006490:	08 9c       	mov	r12,r4
80006492:	fa c8 f9 40 	sub	r8,sp,-1728
80006496:	fa c9 ff b4 	sub	r9,sp,-76
8000649a:	fe b0 fa 55 	rcall	80005944 <get_arg>
8000649e:	2f dd       	sub	sp,-12
800064a0:	78 1a       	ld.w	r10,r12[0x4]
800064a2:	50 7a       	stdsp	sp[0x1c],r10
800064a4:	78 0c       	ld.w	r12,r12[0x0]
800064a6:	50 5c       	stdsp	sp[0x14],r12
800064a8:	c2 a8       	rjmp	800064fc <_vfprintf_r+0x888>
800064aa:	2f f7       	sub	r7,-1
800064ac:	10 39       	cp.w	r9,r8
800064ae:	c0 94       	brge	800064c0 <_vfprintf_r+0x84c>
800064b0:	fa c9 f9 44 	sub	r9,sp,-1724
800064b4:	f2 06 00 36 	add	r6,r9,r6<<0x3
800064b8:	ec f8 fd 8c 	ld.w	r8,r6[-628]
800064bc:	50 78       	stdsp	sp[0x1c],r8
800064be:	cb 6b       	rjmp	8000642a <_vfprintf_r+0x7b6>
800064c0:	41 09       	lddsp	r9,sp[0x40]
800064c2:	59 f8       	cp.w	r8,31
800064c4:	e0 89 00 15 	brgt	800064ee <_vfprintf_r+0x87a>
800064c8:	f2 ca ff f8 	sub	r10,r9,-8
800064cc:	72 16       	ld.w	r6,r9[0x4]
800064ce:	72 09       	ld.w	r9,r9[0x0]
800064d0:	51 0a       	stdsp	sp[0x40],r10
800064d2:	50 59       	stdsp	sp[0x14],r9
800064d4:	fa ce f9 44 	sub	lr,sp,-1724
800064d8:	50 76       	stdsp	sp[0x1c],r6
800064da:	fc 08 00 39 	add	r9,lr,r8<<0x3
800064de:	40 5b       	lddsp	r11,sp[0x14]
800064e0:	0c 9a       	mov	r10,r6
800064e2:	f2 eb fd 88 	st.d	r9[-632],r10
800064e6:	2f f8       	sub	r8,-1
800064e8:	fb 48 06 b4 	st.w	sp[1716],r8
800064ec:	c0 88       	rjmp	800064fc <_vfprintf_r+0x888>
800064ee:	72 1c       	ld.w	r12,r9[0x4]
800064f0:	50 7c       	stdsp	sp[0x1c],r12
800064f2:	f2 c8 ff f8 	sub	r8,r9,-8
800064f6:	51 08       	stdsp	sp[0x40],r8
800064f8:	72 09       	ld.w	r9,r9[0x0]
800064fa:	50 59       	stdsp	sp[0x14],r9
800064fc:	40 5b       	lddsp	r11,sp[0x14]
800064fe:	40 7a       	lddsp	r10,sp[0x1c]
80006500:	e0 a0 18 0c 	rcall	80009518 <__isinfd>
80006504:	18 96       	mov	r6,r12
80006506:	c1 70       	breq	80006534 <_vfprintf_r+0x8c0>
80006508:	30 08       	mov	r8,0
8000650a:	30 09       	mov	r9,0
8000650c:	40 5b       	lddsp	r11,sp[0x14]
8000650e:	40 7a       	lddsp	r10,sp[0x1c]
80006510:	e0 a0 1b 78 	rcall	80009c00 <__avr32_f64_cmp_lt>
80006514:	c0 40       	breq	8000651c <_vfprintf_r+0x8a8>
80006516:	32 d8       	mov	r8,45
80006518:	fb 68 06 bb 	st.b	sp[1723],r8
8000651c:	fe c8 b8 14 	sub	r8,pc,-18412
80006520:	fe c6 b8 14 	sub	r6,pc,-18412
80006524:	a7 d5       	cbr	r5,0x7
80006526:	e0 40 00 47 	cp.w	r0,71
8000652a:	f0 06 17 a0 	movle	r6,r8
8000652e:	30 32       	mov	r2,3
80006530:	e0 8f 06 ce 	bral	800072cc <_vfprintf_r+0x1658>
80006534:	40 5b       	lddsp	r11,sp[0x14]
80006536:	40 7a       	lddsp	r10,sp[0x1c]
80006538:	e0 a0 18 05 	rcall	80009542 <__isnand>
8000653c:	c0 e0       	breq	80006558 <_vfprintf_r+0x8e4>
8000653e:	50 26       	stdsp	sp[0x8],r6
80006540:	fe c8 b8 30 	sub	r8,pc,-18384
80006544:	fe c6 b8 30 	sub	r6,pc,-18384
80006548:	a7 d5       	cbr	r5,0x7
8000654a:	e0 40 00 47 	cp.w	r0,71
8000654e:	f0 06 17 a0 	movle	r6,r8
80006552:	30 32       	mov	r2,3
80006554:	e0 8f 06 c2 	bral	800072d8 <_vfprintf_r+0x1664>
80006558:	40 2a       	lddsp	r10,sp[0x8]
8000655a:	5b fa       	cp.w	r10,-1
8000655c:	c0 41       	brne	80006564 <_vfprintf_r+0x8f0>
8000655e:	30 69       	mov	r9,6
80006560:	50 29       	stdsp	sp[0x8],r9
80006562:	c1 18       	rjmp	80006584 <_vfprintf_r+0x910>
80006564:	e0 40 00 47 	cp.w	r0,71
80006568:	5f 09       	sreq	r9
8000656a:	e0 40 00 67 	cp.w	r0,103
8000656e:	5f 08       	sreq	r8
80006570:	f3 e8 10 08 	or	r8,r9,r8
80006574:	f8 08 18 00 	cp.b	r8,r12
80006578:	c0 60       	breq	80006584 <_vfprintf_r+0x910>
8000657a:	40 28       	lddsp	r8,sp[0x8]
8000657c:	58 08       	cp.w	r8,0
8000657e:	f9 b8 00 01 	moveq	r8,1
80006582:	50 28       	stdsp	sp[0x8],r8
80006584:	40 78       	lddsp	r8,sp[0x1c]
80006586:	40 59       	lddsp	r9,sp[0x14]
80006588:	fa e9 06 94 	st.d	sp[1684],r8
8000658c:	a9 a5       	sbr	r5,0x8
8000658e:	fa f8 06 94 	ld.w	r8,sp[1684]
80006592:	58 08       	cp.w	r8,0
80006594:	c0 65       	brlt	800065a0 <_vfprintf_r+0x92c>
80006596:	40 5e       	lddsp	lr,sp[0x14]
80006598:	30 0c       	mov	r12,0
8000659a:	50 6e       	stdsp	sp[0x18],lr
8000659c:	50 9c       	stdsp	sp[0x24],r12
8000659e:	c0 78       	rjmp	800065ac <_vfprintf_r+0x938>
800065a0:	40 5b       	lddsp	r11,sp[0x14]
800065a2:	32 da       	mov	r10,45
800065a4:	ee 1b 80 00 	eorh	r11,0x8000
800065a8:	50 9a       	stdsp	sp[0x24],r10
800065aa:	50 6b       	stdsp	sp[0x18],r11
800065ac:	e0 40 00 46 	cp.w	r0,70
800065b0:	5f 09       	sreq	r9
800065b2:	e0 40 00 66 	cp.w	r0,102
800065b6:	5f 08       	sreq	r8
800065b8:	f3 e8 10 08 	or	r8,r9,r8
800065bc:	50 48       	stdsp	sp[0x10],r8
800065be:	c0 40       	breq	800065c6 <_vfprintf_r+0x952>
800065c0:	40 22       	lddsp	r2,sp[0x8]
800065c2:	30 39       	mov	r9,3
800065c4:	c1 08       	rjmp	800065e4 <_vfprintf_r+0x970>
800065c6:	e0 40 00 45 	cp.w	r0,69
800065ca:	5f 09       	sreq	r9
800065cc:	e0 40 00 65 	cp.w	r0,101
800065d0:	5f 08       	sreq	r8
800065d2:	40 22       	lddsp	r2,sp[0x8]
800065d4:	10 49       	or	r9,r8
800065d6:	2f f2       	sub	r2,-1
800065d8:	40 46       	lddsp	r6,sp[0x10]
800065da:	ec 09 18 00 	cp.b	r9,r6
800065de:	fb f2 00 02 	ld.weq	r2,sp[0x8]
800065e2:	30 29       	mov	r9,2
800065e4:	fa c8 f9 5c 	sub	r8,sp,-1700
800065e8:	1a d8       	st.w	--sp,r8
800065ea:	fa c8 f9 54 	sub	r8,sp,-1708
800065ee:	1a d8       	st.w	--sp,r8
800065f0:	fa c8 f9 4c 	sub	r8,sp,-1716
800065f4:	08 9c       	mov	r12,r4
800065f6:	1a d8       	st.w	--sp,r8
800065f8:	04 98       	mov	r8,r2
800065fa:	40 9b       	lddsp	r11,sp[0x24]
800065fc:	40 aa       	lddsp	r10,sp[0x28]
800065fe:	e0 a0 0b e7 	rcall	80007dcc <_dtoa_r>
80006602:	e0 40 00 47 	cp.w	r0,71
80006606:	5f 19       	srne	r9
80006608:	e0 40 00 67 	cp.w	r0,103
8000660c:	5f 18       	srne	r8
8000660e:	18 96       	mov	r6,r12
80006610:	2f dd       	sub	sp,-12
80006612:	f3 e8 00 08 	and	r8,r9,r8
80006616:	c0 41       	brne	8000661e <_vfprintf_r+0x9aa>
80006618:	ed b5 00 00 	bld	r5,0x0
8000661c:	c3 01       	brne	8000667c <_vfprintf_r+0xa08>
8000661e:	ec 02 00 0e 	add	lr,r6,r2
80006622:	50 3e       	stdsp	sp[0xc],lr
80006624:	40 4c       	lddsp	r12,sp[0x10]
80006626:	58 0c       	cp.w	r12,0
80006628:	c1 50       	breq	80006652 <_vfprintf_r+0x9de>
8000662a:	0d 89       	ld.ub	r9,r6[0x0]
8000662c:	33 08       	mov	r8,48
8000662e:	f0 09 18 00 	cp.b	r9,r8
80006632:	c0 b1       	brne	80006648 <_vfprintf_r+0x9d4>
80006634:	30 08       	mov	r8,0
80006636:	30 09       	mov	r9,0
80006638:	40 6b       	lddsp	r11,sp[0x18]
8000663a:	40 7a       	lddsp	r10,sp[0x1c]
8000663c:	e0 a0 1a 9b 	rcall	80009b72 <__avr32_f64_cmp_eq>
80006640:	fb b2 00 01 	rsubeq	r2,1
80006644:	fb f2 0b ab 	st.weq	sp[0x6ac],r2
80006648:	40 3b       	lddsp	r11,sp[0xc]
8000664a:	fa f8 06 ac 	ld.w	r8,sp[1708]
8000664e:	10 0b       	add	r11,r8
80006650:	50 3b       	stdsp	sp[0xc],r11
80006652:	40 6b       	lddsp	r11,sp[0x18]
80006654:	30 08       	mov	r8,0
80006656:	30 09       	mov	r9,0
80006658:	40 7a       	lddsp	r10,sp[0x1c]
8000665a:	e0 a0 1a 8c 	rcall	80009b72 <__avr32_f64_cmp_eq>
8000665e:	c0 90       	breq	80006670 <_vfprintf_r+0x9fc>
80006660:	40 3a       	lddsp	r10,sp[0xc]
80006662:	fb 4a 06 a4 	st.w	sp[1700],r10
80006666:	c0 58       	rjmp	80006670 <_vfprintf_r+0x9fc>
80006668:	10 c9       	st.b	r8++,r9
8000666a:	fb 48 06 a4 	st.w	sp[1700],r8
8000666e:	c0 28       	rjmp	80006672 <_vfprintf_r+0x9fe>
80006670:	33 09       	mov	r9,48
80006672:	fa f8 06 a4 	ld.w	r8,sp[1700]
80006676:	40 3e       	lddsp	lr,sp[0xc]
80006678:	1c 38       	cp.w	r8,lr
8000667a:	cf 73       	brcs	80006668 <_vfprintf_r+0x9f4>
8000667c:	e0 40 00 47 	cp.w	r0,71
80006680:	5f 09       	sreq	r9
80006682:	e0 40 00 67 	cp.w	r0,103
80006686:	5f 08       	sreq	r8
80006688:	f3 e8 10 08 	or	r8,r9,r8
8000668c:	fa f9 06 a4 	ld.w	r9,sp[1700]
80006690:	0c 19       	sub	r9,r6
80006692:	50 69       	stdsp	sp[0x18],r9
80006694:	58 08       	cp.w	r8,0
80006696:	c0 b0       	breq	800066ac <_vfprintf_r+0xa38>
80006698:	fa f8 06 ac 	ld.w	r8,sp[1708]
8000669c:	5b d8       	cp.w	r8,-3
8000669e:	c0 55       	brlt	800066a8 <_vfprintf_r+0xa34>
800066a0:	40 2c       	lddsp	r12,sp[0x8]
800066a2:	18 38       	cp.w	r8,r12
800066a4:	e0 8a 00 6a 	brle	80006778 <_vfprintf_r+0xb04>
800066a8:	20 20       	sub	r0,2
800066aa:	c0 58       	rjmp	800066b4 <_vfprintf_r+0xa40>
800066ac:	e0 40 00 65 	cp.w	r0,101
800066b0:	e0 89 00 46 	brgt	8000673c <_vfprintf_r+0xac8>
800066b4:	fa fb 06 ac 	ld.w	r11,sp[1708]
800066b8:	fb 60 06 9c 	st.b	sp[1692],r0
800066bc:	20 1b       	sub	r11,1
800066be:	fb 4b 06 ac 	st.w	sp[1708],r11
800066c2:	c0 47       	brpl	800066ca <_vfprintf_r+0xa56>
800066c4:	5c 3b       	neg	r11
800066c6:	32 d8       	mov	r8,45
800066c8:	c0 28       	rjmp	800066cc <_vfprintf_r+0xa58>
800066ca:	32 b8       	mov	r8,43
800066cc:	fb 68 06 9d 	st.b	sp[1693],r8
800066d0:	58 9b       	cp.w	r11,9
800066d2:	e0 8a 00 1d 	brle	8000670c <_vfprintf_r+0xa98>
800066d6:	fa c9 fa 35 	sub	r9,sp,-1483
800066da:	30 aa       	mov	r10,10
800066dc:	12 98       	mov	r8,r9
800066de:	0e 9c       	mov	r12,r7
800066e0:	0c 92       	mov	r2,r6
800066e2:	f6 0a 0c 06 	divs	r6,r11,r10
800066e6:	0e 9b       	mov	r11,r7
800066e8:	2d 0b       	sub	r11,-48
800066ea:	10 fb       	st.b	--r8,r11
800066ec:	0c 9b       	mov	r11,r6
800066ee:	58 96       	cp.w	r6,9
800066f0:	fe 99 ff f9 	brgt	800066e2 <_vfprintf_r+0xa6e>
800066f4:	2d 0b       	sub	r11,-48
800066f6:	18 97       	mov	r7,r12
800066f8:	04 96       	mov	r6,r2
800066fa:	10 fb       	st.b	--r8,r11
800066fc:	fa ca f9 62 	sub	r10,sp,-1694
80006700:	c0 38       	rjmp	80006706 <_vfprintf_r+0xa92>
80006702:	11 3b       	ld.ub	r11,r8++
80006704:	14 cb       	st.b	r10++,r11
80006706:	12 38       	cp.w	r8,r9
80006708:	cf d3       	brcs	80006702 <_vfprintf_r+0xa8e>
8000670a:	c0 98       	rjmp	8000671c <_vfprintf_r+0xaa8>
8000670c:	2d 0b       	sub	r11,-48
8000670e:	33 08       	mov	r8,48
80006710:	fb 6b 06 9f 	st.b	sp[1695],r11
80006714:	fb 68 06 9e 	st.b	sp[1694],r8
80006718:	fa ca f9 60 	sub	r10,sp,-1696
8000671c:	fa c8 f9 64 	sub	r8,sp,-1692
80006720:	f4 08 01 08 	sub	r8,r10,r8
80006724:	50 e8       	stdsp	sp[0x38],r8
80006726:	10 92       	mov	r2,r8
80006728:	40 6b       	lddsp	r11,sp[0x18]
8000672a:	16 02       	add	r2,r11
8000672c:	58 1b       	cp.w	r11,1
8000672e:	e0 89 00 05 	brgt	80006738 <_vfprintf_r+0xac4>
80006732:	ed b5 00 00 	bld	r5,0x0
80006736:	c3 51       	brne	800067a0 <_vfprintf_r+0xb2c>
80006738:	2f f2       	sub	r2,-1
8000673a:	c3 38       	rjmp	800067a0 <_vfprintf_r+0xb2c>
8000673c:	e0 40 00 66 	cp.w	r0,102
80006740:	c1 c1       	brne	80006778 <_vfprintf_r+0xb04>
80006742:	fa f2 06 ac 	ld.w	r2,sp[1708]
80006746:	58 02       	cp.w	r2,0
80006748:	e0 8a 00 0c 	brle	80006760 <_vfprintf_r+0xaec>
8000674c:	40 2a       	lddsp	r10,sp[0x8]
8000674e:	58 0a       	cp.w	r10,0
80006750:	c0 41       	brne	80006758 <_vfprintf_r+0xae4>
80006752:	ed b5 00 00 	bld	r5,0x0
80006756:	c2 51       	brne	800067a0 <_vfprintf_r+0xb2c>
80006758:	2f f2       	sub	r2,-1
8000675a:	40 29       	lddsp	r9,sp[0x8]
8000675c:	12 02       	add	r2,r9
8000675e:	c0 b8       	rjmp	80006774 <_vfprintf_r+0xb00>
80006760:	40 28       	lddsp	r8,sp[0x8]
80006762:	58 08       	cp.w	r8,0
80006764:	c0 61       	brne	80006770 <_vfprintf_r+0xafc>
80006766:	ed b5 00 00 	bld	r5,0x0
8000676a:	c0 30       	breq	80006770 <_vfprintf_r+0xafc>
8000676c:	30 12       	mov	r2,1
8000676e:	c1 98       	rjmp	800067a0 <_vfprintf_r+0xb2c>
80006770:	40 22       	lddsp	r2,sp[0x8]
80006772:	2f e2       	sub	r2,-2
80006774:	36 60       	mov	r0,102
80006776:	c1 58       	rjmp	800067a0 <_vfprintf_r+0xb2c>
80006778:	fa f2 06 ac 	ld.w	r2,sp[1708]
8000677c:	40 6e       	lddsp	lr,sp[0x18]
8000677e:	1c 32       	cp.w	r2,lr
80006780:	c0 65       	brlt	8000678c <_vfprintf_r+0xb18>
80006782:	ed b5 00 00 	bld	r5,0x0
80006786:	f7 b2 00 ff 	subeq	r2,-1
8000678a:	c0 a8       	rjmp	8000679e <_vfprintf_r+0xb2a>
8000678c:	e4 08 11 02 	rsub	r8,r2,2
80006790:	40 6c       	lddsp	r12,sp[0x18]
80006792:	58 02       	cp.w	r2,0
80006794:	f0 02 17 a0 	movle	r2,r8
80006798:	f9 b2 09 01 	movgt	r2,1
8000679c:	18 02       	add	r2,r12
8000679e:	36 70       	mov	r0,103
800067a0:	40 9b       	lddsp	r11,sp[0x24]
800067a2:	58 0b       	cp.w	r11,0
800067a4:	e0 80 05 94 	breq	800072cc <_vfprintf_r+0x1658>
800067a8:	32 d8       	mov	r8,45
800067aa:	fb 68 06 bb 	st.b	sp[1723],r8
800067ae:	e0 8f 05 93 	bral	800072d4 <_vfprintf_r+0x1660>
800067b2:	50 a7       	stdsp	sp[0x28],r7
800067b4:	04 94       	mov	r4,r2
800067b6:	0c 97       	mov	r7,r6
800067b8:	02 92       	mov	r2,r1
800067ba:	06 96       	mov	r6,r3
800067bc:	40 41       	lddsp	r1,sp[0x10]
800067be:	40 93       	lddsp	r3,sp[0x24]
800067c0:	0e 99       	mov	r9,r7
800067c2:	ed b5 00 05 	bld	r5,0x5
800067c6:	c4 81       	brne	80006856 <_vfprintf_r+0xbe2>
800067c8:	fa f8 06 b4 	ld.w	r8,sp[1716]
800067cc:	40 3e       	lddsp	lr,sp[0xc]
800067ce:	58 0e       	cp.w	lr,0
800067d0:	c1 d0       	breq	8000680a <_vfprintf_r+0xb96>
800067d2:	10 36       	cp.w	r6,r8
800067d4:	c0 64       	brge	800067e0 <_vfprintf_r+0xb6c>
800067d6:	fa cc f9 44 	sub	r12,sp,-1724
800067da:	f8 06 00 36 	add	r6,r12,r6<<0x3
800067de:	c1 d8       	rjmp	80006818 <_vfprintf_r+0xba4>
800067e0:	fa c8 f9 50 	sub	r8,sp,-1712
800067e4:	1a d8       	st.w	--sp,r8
800067e6:	fa c8 fa b8 	sub	r8,sp,-1352
800067ea:	04 9a       	mov	r10,r2
800067ec:	1a d8       	st.w	--sp,r8
800067ee:	fa c8 fb b4 	sub	r8,sp,-1100
800067f2:	0c 9b       	mov	r11,r6
800067f4:	1a d8       	st.w	--sp,r8
800067f6:	08 9c       	mov	r12,r4
800067f8:	fa c8 f9 40 	sub	r8,sp,-1728
800067fc:	fa c9 ff b4 	sub	r9,sp,-76
80006800:	fe b0 f8 a2 	rcall	80005944 <get_arg>
80006804:	2f dd       	sub	sp,-12
80006806:	78 0a       	ld.w	r10,r12[0x0]
80006808:	c2 08       	rjmp	80006848 <_vfprintf_r+0xbd4>
8000680a:	2f f7       	sub	r7,-1
8000680c:	10 39       	cp.w	r9,r8
8000680e:	c0 84       	brge	8000681e <_vfprintf_r+0xbaa>
80006810:	fa cb f9 44 	sub	r11,sp,-1724
80006814:	f6 06 00 36 	add	r6,r11,r6<<0x3
80006818:	ec fa fd 88 	ld.w	r10,r6[-632]
8000681c:	c1 68       	rjmp	80006848 <_vfprintf_r+0xbd4>
8000681e:	41 09       	lddsp	r9,sp[0x40]
80006820:	59 f8       	cp.w	r8,31
80006822:	e0 89 00 10 	brgt	80006842 <_vfprintf_r+0xbce>
80006826:	f2 ca ff fc 	sub	r10,r9,-4
8000682a:	51 0a       	stdsp	sp[0x40],r10
8000682c:	fa c6 f9 44 	sub	r6,sp,-1724
80006830:	72 0a       	ld.w	r10,r9[0x0]
80006832:	ec 08 00 39 	add	r9,r6,r8<<0x3
80006836:	f3 4a fd 88 	st.w	r9[-632],r10
8000683a:	2f f8       	sub	r8,-1
8000683c:	fb 48 06 b4 	st.w	sp[1716],r8
80006840:	c0 48       	rjmp	80006848 <_vfprintf_r+0xbd4>
80006842:	72 0a       	ld.w	r10,r9[0x0]
80006844:	2f c9       	sub	r9,-4
80006846:	51 09       	stdsp	sp[0x40],r9
80006848:	40 be       	lddsp	lr,sp[0x2c]
8000684a:	1c 98       	mov	r8,lr
8000684c:	95 1e       	st.w	r10[0x4],lr
8000684e:	bf 58       	asr	r8,0x1f
80006850:	95 08       	st.w	r10[0x0],r8
80006852:	fe 9f fa 9f 	bral	80005d90 <_vfprintf_r+0x11c>
80006856:	ed b5 00 04 	bld	r5,0x4
8000685a:	c4 80       	breq	800068ea <_vfprintf_r+0xc76>
8000685c:	e2 15 00 40 	andl	r5,0x40,COH
80006860:	c4 50       	breq	800068ea <_vfprintf_r+0xc76>
80006862:	fa f8 06 b4 	ld.w	r8,sp[1716]
80006866:	40 3c       	lddsp	r12,sp[0xc]
80006868:	58 0c       	cp.w	r12,0
8000686a:	c1 d0       	breq	800068a4 <_vfprintf_r+0xc30>
8000686c:	10 36       	cp.w	r6,r8
8000686e:	c0 64       	brge	8000687a <_vfprintf_r+0xc06>
80006870:	fa cb f9 44 	sub	r11,sp,-1724
80006874:	f6 06 00 36 	add	r6,r11,r6<<0x3
80006878:	c1 d8       	rjmp	800068b2 <_vfprintf_r+0xc3e>
8000687a:	fa c8 f9 50 	sub	r8,sp,-1712
8000687e:	1a d8       	st.w	--sp,r8
80006880:	fa c8 fa b8 	sub	r8,sp,-1352
80006884:	04 9a       	mov	r10,r2
80006886:	1a d8       	st.w	--sp,r8
80006888:	fa c8 fb b4 	sub	r8,sp,-1100
8000688c:	0c 9b       	mov	r11,r6
8000688e:	1a d8       	st.w	--sp,r8
80006890:	08 9c       	mov	r12,r4
80006892:	fa c8 f9 40 	sub	r8,sp,-1728
80006896:	fa c9 ff b4 	sub	r9,sp,-76
8000689a:	fe b0 f8 55 	rcall	80005944 <get_arg>
8000689e:	2f dd       	sub	sp,-12
800068a0:	78 0a       	ld.w	r10,r12[0x0]
800068a2:	c2 08       	rjmp	800068e2 <_vfprintf_r+0xc6e>
800068a4:	2f f7       	sub	r7,-1
800068a6:	10 39       	cp.w	r9,r8
800068a8:	c0 84       	brge	800068b8 <_vfprintf_r+0xc44>
800068aa:	fa ca f9 44 	sub	r10,sp,-1724
800068ae:	f4 06 00 36 	add	r6,r10,r6<<0x3
800068b2:	ec fa fd 88 	ld.w	r10,r6[-632]
800068b6:	c1 68       	rjmp	800068e2 <_vfprintf_r+0xc6e>
800068b8:	41 09       	lddsp	r9,sp[0x40]
800068ba:	59 f8       	cp.w	r8,31
800068bc:	e0 89 00 10 	brgt	800068dc <_vfprintf_r+0xc68>
800068c0:	f2 ca ff fc 	sub	r10,r9,-4
800068c4:	51 0a       	stdsp	sp[0x40],r10
800068c6:	fa c6 f9 44 	sub	r6,sp,-1724
800068ca:	72 0a       	ld.w	r10,r9[0x0]
800068cc:	ec 08 00 39 	add	r9,r6,r8<<0x3
800068d0:	f3 4a fd 88 	st.w	r9[-632],r10
800068d4:	2f f8       	sub	r8,-1
800068d6:	fb 48 06 b4 	st.w	sp[1716],r8
800068da:	c0 48       	rjmp	800068e2 <_vfprintf_r+0xc6e>
800068dc:	72 0a       	ld.w	r10,r9[0x0]
800068de:	2f c9       	sub	r9,-4
800068e0:	51 09       	stdsp	sp[0x40],r9
800068e2:	40 be       	lddsp	lr,sp[0x2c]
800068e4:	b4 0e       	st.h	r10[0x0],lr
800068e6:	fe 9f fa 55 	bral	80005d90 <_vfprintf_r+0x11c>
800068ea:	fa f8 06 b4 	ld.w	r8,sp[1716]
800068ee:	40 3c       	lddsp	r12,sp[0xc]
800068f0:	58 0c       	cp.w	r12,0
800068f2:	c1 d0       	breq	8000692c <_vfprintf_r+0xcb8>
800068f4:	10 36       	cp.w	r6,r8
800068f6:	c0 64       	brge	80006902 <_vfprintf_r+0xc8e>
800068f8:	fa cb f9 44 	sub	r11,sp,-1724
800068fc:	f6 06 00 36 	add	r6,r11,r6<<0x3
80006900:	c1 d8       	rjmp	8000693a <_vfprintf_r+0xcc6>
80006902:	fa c8 f9 50 	sub	r8,sp,-1712
80006906:	1a d8       	st.w	--sp,r8
80006908:	fa c8 fa b8 	sub	r8,sp,-1352
8000690c:	04 9a       	mov	r10,r2
8000690e:	1a d8       	st.w	--sp,r8
80006910:	fa c8 fb b4 	sub	r8,sp,-1100
80006914:	0c 9b       	mov	r11,r6
80006916:	1a d8       	st.w	--sp,r8
80006918:	08 9c       	mov	r12,r4
8000691a:	fa c8 f9 40 	sub	r8,sp,-1728
8000691e:	fa c9 ff b4 	sub	r9,sp,-76
80006922:	fe b0 f8 11 	rcall	80005944 <get_arg>
80006926:	2f dd       	sub	sp,-12
80006928:	78 0a       	ld.w	r10,r12[0x0]
8000692a:	c2 08       	rjmp	8000696a <_vfprintf_r+0xcf6>
8000692c:	2f f7       	sub	r7,-1
8000692e:	10 39       	cp.w	r9,r8
80006930:	c0 84       	brge	80006940 <_vfprintf_r+0xccc>
80006932:	fa ca f9 44 	sub	r10,sp,-1724
80006936:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000693a:	ec fa fd 88 	ld.w	r10,r6[-632]
8000693e:	c1 68       	rjmp	8000696a <_vfprintf_r+0xcf6>
80006940:	41 09       	lddsp	r9,sp[0x40]
80006942:	59 f8       	cp.w	r8,31
80006944:	e0 89 00 10 	brgt	80006964 <_vfprintf_r+0xcf0>
80006948:	f2 ca ff fc 	sub	r10,r9,-4
8000694c:	51 0a       	stdsp	sp[0x40],r10
8000694e:	fa c6 f9 44 	sub	r6,sp,-1724
80006952:	72 0a       	ld.w	r10,r9[0x0]
80006954:	ec 08 00 39 	add	r9,r6,r8<<0x3
80006958:	f3 4a fd 88 	st.w	r9[-632],r10
8000695c:	2f f8       	sub	r8,-1
8000695e:	fb 48 06 b4 	st.w	sp[1716],r8
80006962:	c0 48       	rjmp	8000696a <_vfprintf_r+0xcf6>
80006964:	72 0a       	ld.w	r10,r9[0x0]
80006966:	2f c9       	sub	r9,-4
80006968:	51 09       	stdsp	sp[0x40],r9
8000696a:	40 be       	lddsp	lr,sp[0x2c]
8000696c:	95 0e       	st.w	r10[0x0],lr
8000696e:	fe 9f fa 11 	bral	80005d90 <_vfprintf_r+0x11c>
80006972:	50 a7       	stdsp	sp[0x28],r7
80006974:	50 80       	stdsp	sp[0x20],r0
80006976:	0c 97       	mov	r7,r6
80006978:	04 94       	mov	r4,r2
8000697a:	06 96       	mov	r6,r3
8000697c:	02 92       	mov	r2,r1
8000697e:	40 93       	lddsp	r3,sp[0x24]
80006980:	10 90       	mov	r0,r8
80006982:	40 41       	lddsp	r1,sp[0x10]
80006984:	a5 a5       	sbr	r5,0x4
80006986:	c0 a8       	rjmp	8000699a <_vfprintf_r+0xd26>
80006988:	50 a7       	stdsp	sp[0x28],r7
8000698a:	50 80       	stdsp	sp[0x20],r0
8000698c:	0c 97       	mov	r7,r6
8000698e:	04 94       	mov	r4,r2
80006990:	06 96       	mov	r6,r3
80006992:	02 92       	mov	r2,r1
80006994:	40 93       	lddsp	r3,sp[0x24]
80006996:	10 90       	mov	r0,r8
80006998:	40 41       	lddsp	r1,sp[0x10]
8000699a:	ed b5 00 05 	bld	r5,0x5
8000699e:	c5 d1       	brne	80006a58 <_vfprintf_r+0xde4>
800069a0:	fa f8 06 b4 	ld.w	r8,sp[1716]
800069a4:	40 3c       	lddsp	r12,sp[0xc]
800069a6:	58 0c       	cp.w	r12,0
800069a8:	c2 60       	breq	800069f4 <_vfprintf_r+0xd80>
800069aa:	10 36       	cp.w	r6,r8
800069ac:	c0 a4       	brge	800069c0 <_vfprintf_r+0xd4c>
800069ae:	fa cb f9 44 	sub	r11,sp,-1724
800069b2:	f6 06 00 36 	add	r6,r11,r6<<0x3
800069b6:	ec e8 fd 88 	ld.d	r8,r6[-632]
800069ba:	fa e9 00 00 	st.d	sp[0],r8
800069be:	c1 88       	rjmp	800069ee <_vfprintf_r+0xd7a>
800069c0:	fa c8 f9 50 	sub	r8,sp,-1712
800069c4:	1a d8       	st.w	--sp,r8
800069c6:	fa c8 fa b8 	sub	r8,sp,-1352
800069ca:	04 9a       	mov	r10,r2
800069cc:	1a d8       	st.w	--sp,r8
800069ce:	0c 9b       	mov	r11,r6
800069d0:	fa c8 fb b4 	sub	r8,sp,-1100
800069d4:	08 9c       	mov	r12,r4
800069d6:	1a d8       	st.w	--sp,r8
800069d8:	fa c8 f9 40 	sub	r8,sp,-1728
800069dc:	fa c9 ff b4 	sub	r9,sp,-76
800069e0:	fe b0 f7 b2 	rcall	80005944 <get_arg>
800069e4:	2f dd       	sub	sp,-12
800069e6:	f8 ea 00 00 	ld.d	r10,r12[0]
800069ea:	fa eb 00 00 	st.d	sp[0],r10
800069ee:	30 08       	mov	r8,0
800069f0:	e0 8f 03 de 	bral	800071ac <_vfprintf_r+0x1538>
800069f4:	ee ca ff ff 	sub	r10,r7,-1
800069f8:	10 37       	cp.w	r7,r8
800069fa:	c0 b4       	brge	80006a10 <_vfprintf_r+0xd9c>
800069fc:	fa c9 f9 44 	sub	r9,sp,-1724
80006a00:	14 97       	mov	r7,r10
80006a02:	f2 06 00 36 	add	r6,r9,r6<<0x3
80006a06:	ec ea fd 88 	ld.d	r10,r6[-632]
80006a0a:	fa eb 00 00 	st.d	sp[0],r10
80006a0e:	c1 88       	rjmp	80006a3e <_vfprintf_r+0xdca>
80006a10:	41 09       	lddsp	r9,sp[0x40]
80006a12:	59 f8       	cp.w	r8,31
80006a14:	e0 89 00 18 	brgt	80006a44 <_vfprintf_r+0xdd0>
80006a18:	f2 e6 00 00 	ld.d	r6,r9[0]
80006a1c:	f2 cb ff f8 	sub	r11,r9,-8
80006a20:	fa e7 00 00 	st.d	sp[0],r6
80006a24:	51 0b       	stdsp	sp[0x40],r11
80006a26:	fa c6 f9 44 	sub	r6,sp,-1724
80006a2a:	ec 08 00 39 	add	r9,r6,r8<<0x3
80006a2e:	fa e6 00 00 	ld.d	r6,sp[0]
80006a32:	f2 e7 fd 88 	st.d	r9[-632],r6
80006a36:	2f f8       	sub	r8,-1
80006a38:	14 97       	mov	r7,r10
80006a3a:	fb 48 06 b4 	st.w	sp[1716],r8
80006a3e:	40 38       	lddsp	r8,sp[0xc]
80006a40:	e0 8f 03 b6 	bral	800071ac <_vfprintf_r+0x1538>
80006a44:	f2 e6 00 00 	ld.d	r6,r9[0]
80006a48:	40 38       	lddsp	r8,sp[0xc]
80006a4a:	fa e7 00 00 	st.d	sp[0],r6
80006a4e:	2f 89       	sub	r9,-8
80006a50:	14 97       	mov	r7,r10
80006a52:	51 09       	stdsp	sp[0x40],r9
80006a54:	e0 8f 03 ac 	bral	800071ac <_vfprintf_r+0x1538>
80006a58:	ed b5 00 04 	bld	r5,0x4
80006a5c:	c1 61       	brne	80006a88 <_vfprintf_r+0xe14>
80006a5e:	fa f8 06 b4 	ld.w	r8,sp[1716]
80006a62:	40 3e       	lddsp	lr,sp[0xc]
80006a64:	58 0e       	cp.w	lr,0
80006a66:	c0 80       	breq	80006a76 <_vfprintf_r+0xe02>
80006a68:	10 36       	cp.w	r6,r8
80006a6a:	c6 74       	brge	80006b38 <_vfprintf_r+0xec4>
80006a6c:	fa cc f9 44 	sub	r12,sp,-1724
80006a70:	f8 06 00 36 	add	r6,r12,r6<<0x3
80006a74:	c8 08       	rjmp	80006b74 <_vfprintf_r+0xf00>
80006a76:	ee ca ff ff 	sub	r10,r7,-1
80006a7a:	10 37       	cp.w	r7,r8
80006a7c:	c7 f4       	brge	80006b7a <_vfprintf_r+0xf06>
80006a7e:	fa cb f9 44 	sub	r11,sp,-1724
80006a82:	f6 06 00 36 	add	r6,r11,r6<<0x3
80006a86:	c7 68       	rjmp	80006b72 <_vfprintf_r+0xefe>
80006a88:	ed b5 00 06 	bld	r5,0x6
80006a8c:	c4 a1       	brne	80006b20 <_vfprintf_r+0xeac>
80006a8e:	fa f8 06 b4 	ld.w	r8,sp[1716]
80006a92:	40 3c       	lddsp	r12,sp[0xc]
80006a94:	58 0c       	cp.w	r12,0
80006a96:	c1 d0       	breq	80006ad0 <_vfprintf_r+0xe5c>
80006a98:	10 36       	cp.w	r6,r8
80006a9a:	c0 64       	brge	80006aa6 <_vfprintf_r+0xe32>
80006a9c:	fa cb f9 44 	sub	r11,sp,-1724
80006aa0:	f6 06 00 36 	add	r6,r11,r6<<0x3
80006aa4:	c1 f8       	rjmp	80006ae2 <_vfprintf_r+0xe6e>
80006aa6:	fa c8 f9 50 	sub	r8,sp,-1712
80006aaa:	1a d8       	st.w	--sp,r8
80006aac:	fa c8 fa b8 	sub	r8,sp,-1352
80006ab0:	1a d8       	st.w	--sp,r8
80006ab2:	fa c8 fb b4 	sub	r8,sp,-1100
80006ab6:	1a d8       	st.w	--sp,r8
80006ab8:	fa c8 f9 40 	sub	r8,sp,-1728
80006abc:	fa c9 ff b4 	sub	r9,sp,-76
80006ac0:	04 9a       	mov	r10,r2
80006ac2:	0c 9b       	mov	r11,r6
80006ac4:	08 9c       	mov	r12,r4
80006ac6:	fe b0 f7 3f 	rcall	80005944 <get_arg>
80006aca:	2f dd       	sub	sp,-12
80006acc:	98 18       	ld.sh	r8,r12[0x2]
80006ace:	c2 68       	rjmp	80006b1a <_vfprintf_r+0xea6>
80006ad0:	ee ca ff ff 	sub	r10,r7,-1
80006ad4:	10 37       	cp.w	r7,r8
80006ad6:	c0 94       	brge	80006ae8 <_vfprintf_r+0xe74>
80006ad8:	fa c9 f9 44 	sub	r9,sp,-1724
80006adc:	14 97       	mov	r7,r10
80006ade:	f2 06 00 36 	add	r6,r9,r6<<0x3
80006ae2:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80006ae6:	c1 a8       	rjmp	80006b1a <_vfprintf_r+0xea6>
80006ae8:	41 09       	lddsp	r9,sp[0x40]
80006aea:	59 f8       	cp.w	r8,31
80006aec:	e0 89 00 13 	brgt	80006b12 <_vfprintf_r+0xe9e>
80006af0:	f2 cb ff fc 	sub	r11,r9,-4
80006af4:	51 0b       	stdsp	sp[0x40],r11
80006af6:	72 09       	ld.w	r9,r9[0x0]
80006af8:	fa c6 f9 44 	sub	r6,sp,-1724
80006afc:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80006b00:	2f f8       	sub	r8,-1
80006b02:	f7 49 fd 88 	st.w	r11[-632],r9
80006b06:	fb 48 06 b4 	st.w	sp[1716],r8
80006b0a:	14 97       	mov	r7,r10
80006b0c:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80006b10:	c0 58       	rjmp	80006b1a <_vfprintf_r+0xea6>
80006b12:	92 18       	ld.sh	r8,r9[0x2]
80006b14:	14 97       	mov	r7,r10
80006b16:	2f c9       	sub	r9,-4
80006b18:	51 09       	stdsp	sp[0x40],r9
80006b1a:	5c 78       	castu.h	r8
80006b1c:	50 18       	stdsp	sp[0x4],r8
80006b1e:	c4 68       	rjmp	80006baa <_vfprintf_r+0xf36>
80006b20:	fa f8 06 b4 	ld.w	r8,sp[1716]
80006b24:	40 3c       	lddsp	r12,sp[0xc]
80006b26:	58 0c       	cp.w	r12,0
80006b28:	c1 d0       	breq	80006b62 <_vfprintf_r+0xeee>
80006b2a:	10 36       	cp.w	r6,r8
80006b2c:	c0 64       	brge	80006b38 <_vfprintf_r+0xec4>
80006b2e:	fa cb f9 44 	sub	r11,sp,-1724
80006b32:	f6 06 00 36 	add	r6,r11,r6<<0x3
80006b36:	c1 f8       	rjmp	80006b74 <_vfprintf_r+0xf00>
80006b38:	fa c8 f9 50 	sub	r8,sp,-1712
80006b3c:	1a d8       	st.w	--sp,r8
80006b3e:	fa c8 fa b8 	sub	r8,sp,-1352
80006b42:	0c 9b       	mov	r11,r6
80006b44:	1a d8       	st.w	--sp,r8
80006b46:	fa c8 fb b4 	sub	r8,sp,-1100
80006b4a:	04 9a       	mov	r10,r2
80006b4c:	1a d8       	st.w	--sp,r8
80006b4e:	08 9c       	mov	r12,r4
80006b50:	fa c8 f9 40 	sub	r8,sp,-1728
80006b54:	fa c9 ff b4 	sub	r9,sp,-76
80006b58:	fe b0 f6 f6 	rcall	80005944 <get_arg>
80006b5c:	2f dd       	sub	sp,-12
80006b5e:	78 0b       	ld.w	r11,r12[0x0]
80006b60:	c2 48       	rjmp	80006ba8 <_vfprintf_r+0xf34>
80006b62:	ee ca ff ff 	sub	r10,r7,-1
80006b66:	10 37       	cp.w	r7,r8
80006b68:	c0 94       	brge	80006b7a <_vfprintf_r+0xf06>
80006b6a:	fa c9 f9 44 	sub	r9,sp,-1724
80006b6e:	f2 06 00 36 	add	r6,r9,r6<<0x3
80006b72:	14 97       	mov	r7,r10
80006b74:	ec fb fd 88 	ld.w	r11,r6[-632]
80006b78:	c1 88       	rjmp	80006ba8 <_vfprintf_r+0xf34>
80006b7a:	41 09       	lddsp	r9,sp[0x40]
80006b7c:	59 f8       	cp.w	r8,31
80006b7e:	e0 89 00 11 	brgt	80006ba0 <_vfprintf_r+0xf2c>
80006b82:	f2 cb ff fc 	sub	r11,r9,-4
80006b86:	51 0b       	stdsp	sp[0x40],r11
80006b88:	fa c6 f9 44 	sub	r6,sp,-1724
80006b8c:	72 0b       	ld.w	r11,r9[0x0]
80006b8e:	ec 08 00 39 	add	r9,r6,r8<<0x3
80006b92:	f3 4b fd 88 	st.w	r9[-632],r11
80006b96:	2f f8       	sub	r8,-1
80006b98:	14 97       	mov	r7,r10
80006b9a:	fb 48 06 b4 	st.w	sp[1716],r8
80006b9e:	c0 58       	rjmp	80006ba8 <_vfprintf_r+0xf34>
80006ba0:	72 0b       	ld.w	r11,r9[0x0]
80006ba2:	14 97       	mov	r7,r10
80006ba4:	2f c9       	sub	r9,-4
80006ba6:	51 09       	stdsp	sp[0x40],r9
80006ba8:	50 1b       	stdsp	sp[0x4],r11
80006baa:	30 0e       	mov	lr,0
80006bac:	50 0e       	stdsp	sp[0x0],lr
80006bae:	1c 98       	mov	r8,lr
80006bb0:	e0 8f 02 fe 	bral	800071ac <_vfprintf_r+0x1538>
80006bb4:	50 a7       	stdsp	sp[0x28],r7
80006bb6:	50 80       	stdsp	sp[0x20],r0
80006bb8:	0c 97       	mov	r7,r6
80006bba:	04 94       	mov	r4,r2
80006bbc:	06 96       	mov	r6,r3
80006bbe:	02 92       	mov	r2,r1
80006bc0:	40 93       	lddsp	r3,sp[0x24]
80006bc2:	40 41       	lddsp	r1,sp[0x10]
80006bc4:	0e 99       	mov	r9,r7
80006bc6:	fa f8 06 b4 	ld.w	r8,sp[1716]
80006bca:	40 3c       	lddsp	r12,sp[0xc]
80006bcc:	58 0c       	cp.w	r12,0
80006bce:	c1 d0       	breq	80006c08 <_vfprintf_r+0xf94>
80006bd0:	10 36       	cp.w	r6,r8
80006bd2:	c0 64       	brge	80006bde <_vfprintf_r+0xf6a>
80006bd4:	fa cb f9 44 	sub	r11,sp,-1724
80006bd8:	f6 06 00 36 	add	r6,r11,r6<<0x3
80006bdc:	c1 d8       	rjmp	80006c16 <_vfprintf_r+0xfa2>
80006bde:	fa c8 f9 50 	sub	r8,sp,-1712
80006be2:	1a d8       	st.w	--sp,r8
80006be4:	fa c8 fa b8 	sub	r8,sp,-1352
80006be8:	1a d8       	st.w	--sp,r8
80006bea:	fa c8 fb b4 	sub	r8,sp,-1100
80006bee:	1a d8       	st.w	--sp,r8
80006bf0:	fa c9 ff b4 	sub	r9,sp,-76
80006bf4:	fa c8 f9 40 	sub	r8,sp,-1728
80006bf8:	04 9a       	mov	r10,r2
80006bfa:	0c 9b       	mov	r11,r6
80006bfc:	08 9c       	mov	r12,r4
80006bfe:	fe b0 f6 a3 	rcall	80005944 <get_arg>
80006c02:	2f dd       	sub	sp,-12
80006c04:	78 09       	ld.w	r9,r12[0x0]
80006c06:	c2 18       	rjmp	80006c48 <_vfprintf_r+0xfd4>
80006c08:	2f f7       	sub	r7,-1
80006c0a:	10 39       	cp.w	r9,r8
80006c0c:	c0 84       	brge	80006c1c <_vfprintf_r+0xfa8>
80006c0e:	fa ca f9 44 	sub	r10,sp,-1724
80006c12:	f4 06 00 36 	add	r6,r10,r6<<0x3
80006c16:	ec f9 fd 88 	ld.w	r9,r6[-632]
80006c1a:	c1 78       	rjmp	80006c48 <_vfprintf_r+0xfd4>
80006c1c:	41 09       	lddsp	r9,sp[0x40]
80006c1e:	59 f8       	cp.w	r8,31
80006c20:	e0 89 00 10 	brgt	80006c40 <_vfprintf_r+0xfcc>
80006c24:	f2 ca ff fc 	sub	r10,r9,-4
80006c28:	51 0a       	stdsp	sp[0x40],r10
80006c2a:	fa c6 f9 44 	sub	r6,sp,-1724
80006c2e:	72 09       	ld.w	r9,r9[0x0]
80006c30:	ec 08 00 3a 	add	r10,r6,r8<<0x3
80006c34:	f5 49 fd 88 	st.w	r10[-632],r9
80006c38:	2f f8       	sub	r8,-1
80006c3a:	fb 48 06 b4 	st.w	sp[1716],r8
80006c3e:	c0 58       	rjmp	80006c48 <_vfprintf_r+0xfd4>
80006c40:	f2 c8 ff fc 	sub	r8,r9,-4
80006c44:	51 08       	stdsp	sp[0x40],r8
80006c46:	72 09       	ld.w	r9,r9[0x0]
80006c48:	33 08       	mov	r8,48
80006c4a:	fb 68 06 b8 	st.b	sp[1720],r8
80006c4e:	37 88       	mov	r8,120
80006c50:	30 0e       	mov	lr,0
80006c52:	fb 68 06 b9 	st.b	sp[1721],r8
80006c56:	fe cc bf 3e 	sub	r12,pc,-16578
80006c5a:	50 19       	stdsp	sp[0x4],r9
80006c5c:	a1 b5       	sbr	r5,0x1
80006c5e:	50 0e       	stdsp	sp[0x0],lr
80006c60:	50 dc       	stdsp	sp[0x34],r12
80006c62:	30 28       	mov	r8,2
80006c64:	37 80       	mov	r0,120
80006c66:	e0 8f 02 a3 	bral	800071ac <_vfprintf_r+0x1538>
80006c6a:	50 a7       	stdsp	sp[0x28],r7
80006c6c:	50 80       	stdsp	sp[0x20],r0
80006c6e:	10 90       	mov	r0,r8
80006c70:	30 08       	mov	r8,0
80006c72:	fb 68 06 bb 	st.b	sp[1723],r8
80006c76:	0c 97       	mov	r7,r6
80006c78:	04 94       	mov	r4,r2
80006c7a:	06 96       	mov	r6,r3
80006c7c:	02 92       	mov	r2,r1
80006c7e:	40 93       	lddsp	r3,sp[0x24]
80006c80:	40 41       	lddsp	r1,sp[0x10]
80006c82:	0e 99       	mov	r9,r7
80006c84:	fa f8 06 b4 	ld.w	r8,sp[1716]
80006c88:	40 3b       	lddsp	r11,sp[0xc]
80006c8a:	58 0b       	cp.w	r11,0
80006c8c:	c1 d0       	breq	80006cc6 <_vfprintf_r+0x1052>
80006c8e:	10 36       	cp.w	r6,r8
80006c90:	c0 64       	brge	80006c9c <_vfprintf_r+0x1028>
80006c92:	fa ca f9 44 	sub	r10,sp,-1724
80006c96:	f4 06 00 36 	add	r6,r10,r6<<0x3
80006c9a:	c1 d8       	rjmp	80006cd4 <_vfprintf_r+0x1060>
80006c9c:	fa c8 f9 50 	sub	r8,sp,-1712
80006ca0:	1a d8       	st.w	--sp,r8
80006ca2:	fa c8 fa b8 	sub	r8,sp,-1352
80006ca6:	1a d8       	st.w	--sp,r8
80006ca8:	fa c8 fb b4 	sub	r8,sp,-1100
80006cac:	0c 9b       	mov	r11,r6
80006cae:	1a d8       	st.w	--sp,r8
80006cb0:	04 9a       	mov	r10,r2
80006cb2:	fa c8 f9 40 	sub	r8,sp,-1728
80006cb6:	fa c9 ff b4 	sub	r9,sp,-76
80006cba:	08 9c       	mov	r12,r4
80006cbc:	fe b0 f6 44 	rcall	80005944 <get_arg>
80006cc0:	2f dd       	sub	sp,-12
80006cc2:	78 06       	ld.w	r6,r12[0x0]
80006cc4:	c2 08       	rjmp	80006d04 <_vfprintf_r+0x1090>
80006cc6:	2f f7       	sub	r7,-1
80006cc8:	10 39       	cp.w	r9,r8
80006cca:	c0 84       	brge	80006cda <_vfprintf_r+0x1066>
80006ccc:	fa c9 f9 44 	sub	r9,sp,-1724
80006cd0:	f2 06 00 36 	add	r6,r9,r6<<0x3
80006cd4:	ec f6 fd 88 	ld.w	r6,r6[-632]
80006cd8:	c1 68       	rjmp	80006d04 <_vfprintf_r+0x1090>
80006cda:	41 09       	lddsp	r9,sp[0x40]
80006cdc:	59 f8       	cp.w	r8,31
80006cde:	e0 89 00 10 	brgt	80006cfe <_vfprintf_r+0x108a>
80006ce2:	f2 ca ff fc 	sub	r10,r9,-4
80006ce6:	51 0a       	stdsp	sp[0x40],r10
80006ce8:	72 06       	ld.w	r6,r9[0x0]
80006cea:	fa ce f9 44 	sub	lr,sp,-1724
80006cee:	fc 08 00 39 	add	r9,lr,r8<<0x3
80006cf2:	f3 46 fd 88 	st.w	r9[-632],r6
80006cf6:	2f f8       	sub	r8,-1
80006cf8:	fb 48 06 b4 	st.w	sp[1716],r8
80006cfc:	c0 48       	rjmp	80006d04 <_vfprintf_r+0x1090>
80006cfe:	72 06       	ld.w	r6,r9[0x0]
80006d00:	2f c9       	sub	r9,-4
80006d02:	51 09       	stdsp	sp[0x40],r9
80006d04:	40 2c       	lddsp	r12,sp[0x8]
80006d06:	58 0c       	cp.w	r12,0
80006d08:	c1 05       	brlt	80006d28 <_vfprintf_r+0x10b4>
80006d0a:	18 9a       	mov	r10,r12
80006d0c:	30 0b       	mov	r11,0
80006d0e:	0c 9c       	mov	r12,r6
80006d10:	e0 a0 10 fa 	rcall	80008f04 <memchr>
80006d14:	e0 80 02 df 	breq	800072d2 <_vfprintf_r+0x165e>
80006d18:	f8 06 01 02 	sub	r2,r12,r6
80006d1c:	40 2b       	lddsp	r11,sp[0x8]
80006d1e:	16 32       	cp.w	r2,r11
80006d20:	e0 89 02 d9 	brgt	800072d2 <_vfprintf_r+0x165e>
80006d24:	e0 8f 02 d4 	bral	800072cc <_vfprintf_r+0x1658>
80006d28:	30 0a       	mov	r10,0
80006d2a:	0c 9c       	mov	r12,r6
80006d2c:	50 2a       	stdsp	sp[0x8],r10
80006d2e:	fe b0 f2 65 	rcall	800051f8 <strlen>
80006d32:	18 92       	mov	r2,r12
80006d34:	e0 8f 02 d2 	bral	800072d8 <_vfprintf_r+0x1664>
80006d38:	50 a7       	stdsp	sp[0x28],r7
80006d3a:	50 80       	stdsp	sp[0x20],r0
80006d3c:	0c 97       	mov	r7,r6
80006d3e:	04 94       	mov	r4,r2
80006d40:	06 96       	mov	r6,r3
80006d42:	02 92       	mov	r2,r1
80006d44:	40 93       	lddsp	r3,sp[0x24]
80006d46:	10 90       	mov	r0,r8
80006d48:	40 41       	lddsp	r1,sp[0x10]
80006d4a:	a5 a5       	sbr	r5,0x4
80006d4c:	c0 a8       	rjmp	80006d60 <_vfprintf_r+0x10ec>
80006d4e:	50 a7       	stdsp	sp[0x28],r7
80006d50:	50 80       	stdsp	sp[0x20],r0
80006d52:	0c 97       	mov	r7,r6
80006d54:	04 94       	mov	r4,r2
80006d56:	06 96       	mov	r6,r3
80006d58:	02 92       	mov	r2,r1
80006d5a:	40 93       	lddsp	r3,sp[0x24]
80006d5c:	10 90       	mov	r0,r8
80006d5e:	40 41       	lddsp	r1,sp[0x10]
80006d60:	ed b5 00 05 	bld	r5,0x5
80006d64:	c5 61       	brne	80006e10 <_vfprintf_r+0x119c>
80006d66:	fa f8 06 b4 	ld.w	r8,sp[1716]
80006d6a:	40 39       	lddsp	r9,sp[0xc]
80006d6c:	58 09       	cp.w	r9,0
80006d6e:	c2 10       	breq	80006db0 <_vfprintf_r+0x113c>
80006d70:	10 36       	cp.w	r6,r8
80006d72:	c0 74       	brge	80006d80 <_vfprintf_r+0x110c>
80006d74:	fa c8 f9 44 	sub	r8,sp,-1724
80006d78:	f0 06 00 36 	add	r6,r8,r6<<0x3
80006d7c:	c2 38       	rjmp	80006dc2 <_vfprintf_r+0x114e>
80006d7e:	d7 03       	nop
80006d80:	fa c8 f9 50 	sub	r8,sp,-1712
80006d84:	1a d8       	st.w	--sp,r8
80006d86:	fa c8 fa b8 	sub	r8,sp,-1352
80006d8a:	1a d8       	st.w	--sp,r8
80006d8c:	fa c8 fb b4 	sub	r8,sp,-1100
80006d90:	1a d8       	st.w	--sp,r8
80006d92:	fa c8 f9 40 	sub	r8,sp,-1728
80006d96:	fa c9 ff b4 	sub	r9,sp,-76
80006d9a:	04 9a       	mov	r10,r2
80006d9c:	0c 9b       	mov	r11,r6
80006d9e:	08 9c       	mov	r12,r4
80006da0:	fe b0 f5 d2 	rcall	80005944 <get_arg>
80006da4:	2f dd       	sub	sp,-12
80006da6:	f8 e8 00 00 	ld.d	r8,r12[0]
80006daa:	fa e9 00 00 	st.d	sp[0],r8
80006dae:	c2 e8       	rjmp	80006e0a <_vfprintf_r+0x1196>
80006db0:	ee ca ff ff 	sub	r10,r7,-1
80006db4:	10 37       	cp.w	r7,r8
80006db6:	c0 b4       	brge	80006dcc <_vfprintf_r+0x1158>
80006db8:	fa c8 f9 44 	sub	r8,sp,-1724
80006dbc:	14 97       	mov	r7,r10
80006dbe:	f0 06 00 36 	add	r6,r8,r6<<0x3
80006dc2:	ec ea fd 88 	ld.d	r10,r6[-632]
80006dc6:	fa eb 00 00 	st.d	sp[0],r10
80006dca:	c2 08       	rjmp	80006e0a <_vfprintf_r+0x1196>
80006dcc:	41 09       	lddsp	r9,sp[0x40]
80006dce:	59 f8       	cp.w	r8,31
80006dd0:	e0 89 00 16 	brgt	80006dfc <_vfprintf_r+0x1188>
80006dd4:	f2 e6 00 00 	ld.d	r6,r9[0]
80006dd8:	f2 cb ff f8 	sub	r11,r9,-8
80006ddc:	fa e7 00 00 	st.d	sp[0],r6
80006de0:	51 0b       	stdsp	sp[0x40],r11
80006de2:	fa c6 f9 44 	sub	r6,sp,-1724
80006de6:	ec 08 00 39 	add	r9,r6,r8<<0x3
80006dea:	fa e6 00 00 	ld.d	r6,sp[0]
80006dee:	f2 e7 fd 88 	st.d	r9[-632],r6
80006df2:	2f f8       	sub	r8,-1
80006df4:	14 97       	mov	r7,r10
80006df6:	fb 48 06 b4 	st.w	sp[1716],r8
80006dfa:	c0 88       	rjmp	80006e0a <_vfprintf_r+0x1196>
80006dfc:	f2 e6 00 00 	ld.d	r6,r9[0]
80006e00:	2f 89       	sub	r9,-8
80006e02:	fa e7 00 00 	st.d	sp[0],r6
80006e06:	51 09       	stdsp	sp[0x40],r9
80006e08:	14 97       	mov	r7,r10
80006e0a:	30 18       	mov	r8,1
80006e0c:	e0 8f 01 d0 	bral	800071ac <_vfprintf_r+0x1538>
80006e10:	ed b5 00 04 	bld	r5,0x4
80006e14:	c1 61       	brne	80006e40 <_vfprintf_r+0x11cc>
80006e16:	fa f8 06 b4 	ld.w	r8,sp[1716]
80006e1a:	40 3e       	lddsp	lr,sp[0xc]
80006e1c:	58 0e       	cp.w	lr,0
80006e1e:	c0 80       	breq	80006e2e <_vfprintf_r+0x11ba>
80006e20:	10 36       	cp.w	r6,r8
80006e22:	c6 74       	brge	80006ef0 <_vfprintf_r+0x127c>
80006e24:	fa cc f9 44 	sub	r12,sp,-1724
80006e28:	f8 06 00 36 	add	r6,r12,r6<<0x3
80006e2c:	c8 08       	rjmp	80006f2c <_vfprintf_r+0x12b8>
80006e2e:	ee ca ff ff 	sub	r10,r7,-1
80006e32:	10 37       	cp.w	r7,r8
80006e34:	c7 f4       	brge	80006f32 <_vfprintf_r+0x12be>
80006e36:	fa cb f9 44 	sub	r11,sp,-1724
80006e3a:	f6 06 00 36 	add	r6,r11,r6<<0x3
80006e3e:	c7 68       	rjmp	80006f2a <_vfprintf_r+0x12b6>
80006e40:	ed b5 00 06 	bld	r5,0x6
80006e44:	c4 a1       	brne	80006ed8 <_vfprintf_r+0x1264>
80006e46:	fa f8 06 b4 	ld.w	r8,sp[1716]
80006e4a:	40 3c       	lddsp	r12,sp[0xc]
80006e4c:	58 0c       	cp.w	r12,0
80006e4e:	c1 d0       	breq	80006e88 <_vfprintf_r+0x1214>
80006e50:	10 36       	cp.w	r6,r8
80006e52:	c0 64       	brge	80006e5e <_vfprintf_r+0x11ea>
80006e54:	fa cb f9 44 	sub	r11,sp,-1724
80006e58:	f6 06 00 36 	add	r6,r11,r6<<0x3
80006e5c:	c1 f8       	rjmp	80006e9a <_vfprintf_r+0x1226>
80006e5e:	fa c8 f9 50 	sub	r8,sp,-1712
80006e62:	1a d8       	st.w	--sp,r8
80006e64:	fa c8 fa b8 	sub	r8,sp,-1352
80006e68:	1a d8       	st.w	--sp,r8
80006e6a:	fa c8 fb b4 	sub	r8,sp,-1100
80006e6e:	1a d8       	st.w	--sp,r8
80006e70:	fa c8 f9 40 	sub	r8,sp,-1728
80006e74:	fa c9 ff b4 	sub	r9,sp,-76
80006e78:	04 9a       	mov	r10,r2
80006e7a:	0c 9b       	mov	r11,r6
80006e7c:	08 9c       	mov	r12,r4
80006e7e:	fe b0 f5 63 	rcall	80005944 <get_arg>
80006e82:	2f dd       	sub	sp,-12
80006e84:	98 18       	ld.sh	r8,r12[0x2]
80006e86:	c2 68       	rjmp	80006ed2 <_vfprintf_r+0x125e>
80006e88:	ee ca ff ff 	sub	r10,r7,-1
80006e8c:	10 37       	cp.w	r7,r8
80006e8e:	c0 94       	brge	80006ea0 <_vfprintf_r+0x122c>
80006e90:	fa c9 f9 44 	sub	r9,sp,-1724
80006e94:	14 97       	mov	r7,r10
80006e96:	f2 06 00 36 	add	r6,r9,r6<<0x3
80006e9a:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80006e9e:	c1 a8       	rjmp	80006ed2 <_vfprintf_r+0x125e>
80006ea0:	41 09       	lddsp	r9,sp[0x40]
80006ea2:	59 f8       	cp.w	r8,31
80006ea4:	e0 89 00 13 	brgt	80006eca <_vfprintf_r+0x1256>
80006ea8:	f2 cb ff fc 	sub	r11,r9,-4
80006eac:	51 0b       	stdsp	sp[0x40],r11
80006eae:	72 09       	ld.w	r9,r9[0x0]
80006eb0:	fa c6 f9 44 	sub	r6,sp,-1724
80006eb4:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80006eb8:	2f f8       	sub	r8,-1
80006eba:	f7 49 fd 88 	st.w	r11[-632],r9
80006ebe:	fb 48 06 b4 	st.w	sp[1716],r8
80006ec2:	14 97       	mov	r7,r10
80006ec4:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80006ec8:	c0 58       	rjmp	80006ed2 <_vfprintf_r+0x125e>
80006eca:	92 18       	ld.sh	r8,r9[0x2]
80006ecc:	14 97       	mov	r7,r10
80006ece:	2f c9       	sub	r9,-4
80006ed0:	51 09       	stdsp	sp[0x40],r9
80006ed2:	5c 78       	castu.h	r8
80006ed4:	50 18       	stdsp	sp[0x4],r8
80006ed6:	c4 68       	rjmp	80006f62 <_vfprintf_r+0x12ee>
80006ed8:	fa f8 06 b4 	ld.w	r8,sp[1716]
80006edc:	40 3c       	lddsp	r12,sp[0xc]
80006ede:	58 0c       	cp.w	r12,0
80006ee0:	c1 d0       	breq	80006f1a <_vfprintf_r+0x12a6>
80006ee2:	10 36       	cp.w	r6,r8
80006ee4:	c0 64       	brge	80006ef0 <_vfprintf_r+0x127c>
80006ee6:	fa cb f9 44 	sub	r11,sp,-1724
80006eea:	f6 06 00 36 	add	r6,r11,r6<<0x3
80006eee:	c1 f8       	rjmp	80006f2c <_vfprintf_r+0x12b8>
80006ef0:	fa c8 f9 50 	sub	r8,sp,-1712
80006ef4:	1a d8       	st.w	--sp,r8
80006ef6:	fa c8 fa b8 	sub	r8,sp,-1352
80006efa:	0c 9b       	mov	r11,r6
80006efc:	1a d8       	st.w	--sp,r8
80006efe:	fa c8 fb b4 	sub	r8,sp,-1100
80006f02:	04 9a       	mov	r10,r2
80006f04:	1a d8       	st.w	--sp,r8
80006f06:	08 9c       	mov	r12,r4
80006f08:	fa c8 f9 40 	sub	r8,sp,-1728
80006f0c:	fa c9 ff b4 	sub	r9,sp,-76
80006f10:	fe b0 f5 1a 	rcall	80005944 <get_arg>
80006f14:	2f dd       	sub	sp,-12
80006f16:	78 0b       	ld.w	r11,r12[0x0]
80006f18:	c2 48       	rjmp	80006f60 <_vfprintf_r+0x12ec>
80006f1a:	ee ca ff ff 	sub	r10,r7,-1
80006f1e:	10 37       	cp.w	r7,r8
80006f20:	c0 94       	brge	80006f32 <_vfprintf_r+0x12be>
80006f22:	fa c9 f9 44 	sub	r9,sp,-1724
80006f26:	f2 06 00 36 	add	r6,r9,r6<<0x3
80006f2a:	14 97       	mov	r7,r10
80006f2c:	ec fb fd 88 	ld.w	r11,r6[-632]
80006f30:	c1 88       	rjmp	80006f60 <_vfprintf_r+0x12ec>
80006f32:	41 09       	lddsp	r9,sp[0x40]
80006f34:	59 f8       	cp.w	r8,31
80006f36:	e0 89 00 11 	brgt	80006f58 <_vfprintf_r+0x12e4>
80006f3a:	f2 cb ff fc 	sub	r11,r9,-4
80006f3e:	51 0b       	stdsp	sp[0x40],r11
80006f40:	fa c6 f9 44 	sub	r6,sp,-1724
80006f44:	72 0b       	ld.w	r11,r9[0x0]
80006f46:	ec 08 00 39 	add	r9,r6,r8<<0x3
80006f4a:	f3 4b fd 88 	st.w	r9[-632],r11
80006f4e:	2f f8       	sub	r8,-1
80006f50:	14 97       	mov	r7,r10
80006f52:	fb 48 06 b4 	st.w	sp[1716],r8
80006f56:	c0 58       	rjmp	80006f60 <_vfprintf_r+0x12ec>
80006f58:	72 0b       	ld.w	r11,r9[0x0]
80006f5a:	14 97       	mov	r7,r10
80006f5c:	2f c9       	sub	r9,-4
80006f5e:	51 09       	stdsp	sp[0x40],r9
80006f60:	50 1b       	stdsp	sp[0x4],r11
80006f62:	30 0e       	mov	lr,0
80006f64:	30 18       	mov	r8,1
80006f66:	50 0e       	stdsp	sp[0x0],lr
80006f68:	c2 29       	rjmp	800071ac <_vfprintf_r+0x1538>
80006f6a:	50 a7       	stdsp	sp[0x28],r7
80006f6c:	50 80       	stdsp	sp[0x20],r0
80006f6e:	0c 97       	mov	r7,r6
80006f70:	04 94       	mov	r4,r2
80006f72:	06 96       	mov	r6,r3
80006f74:	02 92       	mov	r2,r1
80006f76:	fe cc c2 5e 	sub	r12,pc,-15778
80006f7a:	40 93       	lddsp	r3,sp[0x24]
80006f7c:	10 90       	mov	r0,r8
80006f7e:	40 41       	lddsp	r1,sp[0x10]
80006f80:	50 dc       	stdsp	sp[0x34],r12
80006f82:	ed b5 00 05 	bld	r5,0x5
80006f86:	c5 51       	brne	80007030 <_vfprintf_r+0x13bc>
80006f88:	fa f8 06 b4 	ld.w	r8,sp[1716]
80006f8c:	40 3b       	lddsp	r11,sp[0xc]
80006f8e:	58 0b       	cp.w	r11,0
80006f90:	c2 20       	breq	80006fd4 <_vfprintf_r+0x1360>
80006f92:	10 36       	cp.w	r6,r8
80006f94:	c0 a4       	brge	80006fa8 <_vfprintf_r+0x1334>
80006f96:	fa ca f9 44 	sub	r10,sp,-1724
80006f9a:	f4 06 00 36 	add	r6,r10,r6<<0x3
80006f9e:	ec e8 fd 88 	ld.d	r8,r6[-632]
80006fa2:	fa e9 00 00 	st.d	sp[0],r8
80006fa6:	cf 28       	rjmp	8000718a <_vfprintf_r+0x1516>
80006fa8:	fa c8 f9 50 	sub	r8,sp,-1712
80006fac:	1a d8       	st.w	--sp,r8
80006fae:	fa c8 fa b8 	sub	r8,sp,-1352
80006fb2:	04 9a       	mov	r10,r2
80006fb4:	1a d8       	st.w	--sp,r8
80006fb6:	0c 9b       	mov	r11,r6
80006fb8:	fa c8 fb b4 	sub	r8,sp,-1100
80006fbc:	08 9c       	mov	r12,r4
80006fbe:	1a d8       	st.w	--sp,r8
80006fc0:	fa c8 f9 40 	sub	r8,sp,-1728
80006fc4:	fa c9 ff b4 	sub	r9,sp,-76
80006fc8:	fe b0 f4 be 	rcall	80005944 <get_arg>
80006fcc:	2f dd       	sub	sp,-12
80006fce:	f8 ea 00 00 	ld.d	r10,r12[0]
80006fd2:	c0 c8       	rjmp	80006fea <_vfprintf_r+0x1376>
80006fd4:	ee ca ff ff 	sub	r10,r7,-1
80006fd8:	10 37       	cp.w	r7,r8
80006fda:	c0 b4       	brge	80006ff0 <_vfprintf_r+0x137c>
80006fdc:	fa c9 f9 44 	sub	r9,sp,-1724
80006fe0:	14 97       	mov	r7,r10
80006fe2:	f2 06 00 36 	add	r6,r9,r6<<0x3
80006fe6:	ec ea fd 88 	ld.d	r10,r6[-632]
80006fea:	fa eb 00 00 	st.d	sp[0],r10
80006fee:	cc e8       	rjmp	8000718a <_vfprintf_r+0x1516>
80006ff0:	41 09       	lddsp	r9,sp[0x40]
80006ff2:	59 f8       	cp.w	r8,31
80006ff4:	e0 89 00 16 	brgt	80007020 <_vfprintf_r+0x13ac>
80006ff8:	f2 e6 00 00 	ld.d	r6,r9[0]
80006ffc:	f2 cb ff f8 	sub	r11,r9,-8
80007000:	fa e7 00 00 	st.d	sp[0],r6
80007004:	51 0b       	stdsp	sp[0x40],r11
80007006:	fa c6 f9 44 	sub	r6,sp,-1724
8000700a:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000700e:	fa e6 00 00 	ld.d	r6,sp[0]
80007012:	f2 e7 fd 88 	st.d	r9[-632],r6
80007016:	2f f8       	sub	r8,-1
80007018:	14 97       	mov	r7,r10
8000701a:	fb 48 06 b4 	st.w	sp[1716],r8
8000701e:	cb 68       	rjmp	8000718a <_vfprintf_r+0x1516>
80007020:	f2 e6 00 00 	ld.d	r6,r9[0]
80007024:	2f 89       	sub	r9,-8
80007026:	fa e7 00 00 	st.d	sp[0],r6
8000702a:	51 09       	stdsp	sp[0x40],r9
8000702c:	14 97       	mov	r7,r10
8000702e:	ca e8       	rjmp	8000718a <_vfprintf_r+0x1516>
80007030:	ed b5 00 04 	bld	r5,0x4
80007034:	c1 71       	brne	80007062 <_vfprintf_r+0x13ee>
80007036:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000703a:	40 3e       	lddsp	lr,sp[0xc]
8000703c:	58 0e       	cp.w	lr,0
8000703e:	c0 80       	breq	8000704e <_vfprintf_r+0x13da>
80007040:	10 36       	cp.w	r6,r8
80007042:	c6 94       	brge	80007114 <_vfprintf_r+0x14a0>
80007044:	fa cc f9 44 	sub	r12,sp,-1724
80007048:	f8 06 00 36 	add	r6,r12,r6<<0x3
8000704c:	c8 28       	rjmp	80007150 <_vfprintf_r+0x14dc>
8000704e:	ee ca ff ff 	sub	r10,r7,-1
80007052:	10 37       	cp.w	r7,r8
80007054:	e0 84 00 81 	brge	80007156 <_vfprintf_r+0x14e2>
80007058:	fa cb f9 44 	sub	r11,sp,-1724
8000705c:	f6 06 00 36 	add	r6,r11,r6<<0x3
80007060:	c7 78       	rjmp	8000714e <_vfprintf_r+0x14da>
80007062:	ed b5 00 06 	bld	r5,0x6
80007066:	c4 b1       	brne	800070fc <_vfprintf_r+0x1488>
80007068:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000706c:	40 3c       	lddsp	r12,sp[0xc]
8000706e:	58 0c       	cp.w	r12,0
80007070:	c1 d0       	breq	800070aa <_vfprintf_r+0x1436>
80007072:	10 36       	cp.w	r6,r8
80007074:	c0 64       	brge	80007080 <_vfprintf_r+0x140c>
80007076:	fa cb f9 44 	sub	r11,sp,-1724
8000707a:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000707e:	c1 f8       	rjmp	800070bc <_vfprintf_r+0x1448>
80007080:	fa c8 f9 50 	sub	r8,sp,-1712
80007084:	1a d8       	st.w	--sp,r8
80007086:	fa c8 fa b8 	sub	r8,sp,-1352
8000708a:	1a d8       	st.w	--sp,r8
8000708c:	fa c8 fb b4 	sub	r8,sp,-1100
80007090:	1a d8       	st.w	--sp,r8
80007092:	fa c8 f9 40 	sub	r8,sp,-1728
80007096:	fa c9 ff b4 	sub	r9,sp,-76
8000709a:	04 9a       	mov	r10,r2
8000709c:	0c 9b       	mov	r11,r6
8000709e:	08 9c       	mov	r12,r4
800070a0:	fe b0 f4 52 	rcall	80005944 <get_arg>
800070a4:	2f dd       	sub	sp,-12
800070a6:	98 18       	ld.sh	r8,r12[0x2]
800070a8:	c2 78       	rjmp	800070f6 <_vfprintf_r+0x1482>
800070aa:	ee ca ff ff 	sub	r10,r7,-1
800070ae:	10 37       	cp.w	r7,r8
800070b0:	c0 a4       	brge	800070c4 <_vfprintf_r+0x1450>
800070b2:	fa c9 f9 44 	sub	r9,sp,-1724
800070b6:	14 97       	mov	r7,r10
800070b8:	f2 06 00 36 	add	r6,r9,r6<<0x3
800070bc:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
800070c0:	c1 b8       	rjmp	800070f6 <_vfprintf_r+0x1482>
800070c2:	d7 03       	nop
800070c4:	41 09       	lddsp	r9,sp[0x40]
800070c6:	59 f8       	cp.w	r8,31
800070c8:	e0 89 00 13 	brgt	800070ee <_vfprintf_r+0x147a>
800070cc:	f2 cb ff fc 	sub	r11,r9,-4
800070d0:	51 0b       	stdsp	sp[0x40],r11
800070d2:	72 09       	ld.w	r9,r9[0x0]
800070d4:	fa c6 f9 44 	sub	r6,sp,-1724
800070d8:	ec 08 00 3b 	add	r11,r6,r8<<0x3
800070dc:	2f f8       	sub	r8,-1
800070de:	f7 49 fd 88 	st.w	r11[-632],r9
800070e2:	fb 48 06 b4 	st.w	sp[1716],r8
800070e6:	14 97       	mov	r7,r10
800070e8:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
800070ec:	c0 58       	rjmp	800070f6 <_vfprintf_r+0x1482>
800070ee:	92 18       	ld.sh	r8,r9[0x2]
800070f0:	14 97       	mov	r7,r10
800070f2:	2f c9       	sub	r9,-4
800070f4:	51 09       	stdsp	sp[0x40],r9
800070f6:	5c 78       	castu.h	r8
800070f8:	50 18       	stdsp	sp[0x4],r8
800070fa:	c4 68       	rjmp	80007186 <_vfprintf_r+0x1512>
800070fc:	fa f8 06 b4 	ld.w	r8,sp[1716]
80007100:	40 3c       	lddsp	r12,sp[0xc]
80007102:	58 0c       	cp.w	r12,0
80007104:	c1 d0       	breq	8000713e <_vfprintf_r+0x14ca>
80007106:	10 36       	cp.w	r6,r8
80007108:	c0 64       	brge	80007114 <_vfprintf_r+0x14a0>
8000710a:	fa cb f9 44 	sub	r11,sp,-1724
8000710e:	f6 06 00 36 	add	r6,r11,r6<<0x3
80007112:	c1 f8       	rjmp	80007150 <_vfprintf_r+0x14dc>
80007114:	fa c8 f9 50 	sub	r8,sp,-1712
80007118:	1a d8       	st.w	--sp,r8
8000711a:	fa c8 fa b8 	sub	r8,sp,-1352
8000711e:	0c 9b       	mov	r11,r6
80007120:	1a d8       	st.w	--sp,r8
80007122:	fa c8 fb b4 	sub	r8,sp,-1100
80007126:	04 9a       	mov	r10,r2
80007128:	1a d8       	st.w	--sp,r8
8000712a:	08 9c       	mov	r12,r4
8000712c:	fa c8 f9 40 	sub	r8,sp,-1728
80007130:	fa c9 ff b4 	sub	r9,sp,-76
80007134:	fe b0 f4 08 	rcall	80005944 <get_arg>
80007138:	2f dd       	sub	sp,-12
8000713a:	78 0b       	ld.w	r11,r12[0x0]
8000713c:	c2 48       	rjmp	80007184 <_vfprintf_r+0x1510>
8000713e:	ee ca ff ff 	sub	r10,r7,-1
80007142:	10 37       	cp.w	r7,r8
80007144:	c0 94       	brge	80007156 <_vfprintf_r+0x14e2>
80007146:	fa c9 f9 44 	sub	r9,sp,-1724
8000714a:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000714e:	14 97       	mov	r7,r10
80007150:	ec fb fd 88 	ld.w	r11,r6[-632]
80007154:	c1 88       	rjmp	80007184 <_vfprintf_r+0x1510>
80007156:	41 09       	lddsp	r9,sp[0x40]
80007158:	59 f8       	cp.w	r8,31
8000715a:	e0 89 00 11 	brgt	8000717c <_vfprintf_r+0x1508>
8000715e:	f2 cb ff fc 	sub	r11,r9,-4
80007162:	51 0b       	stdsp	sp[0x40],r11
80007164:	fa c6 f9 44 	sub	r6,sp,-1724
80007168:	72 0b       	ld.w	r11,r9[0x0]
8000716a:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000716e:	f3 4b fd 88 	st.w	r9[-632],r11
80007172:	2f f8       	sub	r8,-1
80007174:	14 97       	mov	r7,r10
80007176:	fb 48 06 b4 	st.w	sp[1716],r8
8000717a:	c0 58       	rjmp	80007184 <_vfprintf_r+0x1510>
8000717c:	72 0b       	ld.w	r11,r9[0x0]
8000717e:	14 97       	mov	r7,r10
80007180:	2f c9       	sub	r9,-4
80007182:	51 09       	stdsp	sp[0x40],r9
80007184:	50 1b       	stdsp	sp[0x4],r11
80007186:	30 0e       	mov	lr,0
80007188:	50 0e       	stdsp	sp[0x0],lr
8000718a:	40 08       	lddsp	r8,sp[0x0]
8000718c:	40 1c       	lddsp	r12,sp[0x4]
8000718e:	18 48       	or	r8,r12
80007190:	5f 19       	srne	r9
80007192:	0a 98       	mov	r8,r5
80007194:	eb e9 00 09 	and	r9,r5,r9
80007198:	a1 b8       	sbr	r8,0x1
8000719a:	58 09       	cp.w	r9,0
8000719c:	c0 70       	breq	800071aa <_vfprintf_r+0x1536>
8000719e:	10 95       	mov	r5,r8
800071a0:	fb 60 06 b9 	st.b	sp[1721],r0
800071a4:	33 08       	mov	r8,48
800071a6:	fb 68 06 b8 	st.b	sp[1720],r8
800071aa:	30 28       	mov	r8,2
800071ac:	30 09       	mov	r9,0
800071ae:	fb 69 06 bb 	st.b	sp[1723],r9
800071b2:	0a 99       	mov	r9,r5
800071b4:	a7 d9       	cbr	r9,0x7
800071b6:	40 2b       	lddsp	r11,sp[0x8]
800071b8:	40 16       	lddsp	r6,sp[0x4]
800071ba:	58 0b       	cp.w	r11,0
800071bc:	5f 1a       	srne	r10
800071be:	f2 05 17 40 	movge	r5,r9
800071c2:	fa c2 f9 78 	sub	r2,sp,-1672
800071c6:	40 09       	lddsp	r9,sp[0x0]
800071c8:	0c 49       	or	r9,r6
800071ca:	5f 19       	srne	r9
800071cc:	f5 e9 10 09 	or	r9,r10,r9
800071d0:	c5 c0       	breq	80007288 <_vfprintf_r+0x1614>
800071d2:	30 19       	mov	r9,1
800071d4:	f2 08 18 00 	cp.b	r8,r9
800071d8:	c0 60       	breq	800071e4 <_vfprintf_r+0x1570>
800071da:	30 29       	mov	r9,2
800071dc:	f2 08 18 00 	cp.b	r8,r9
800071e0:	c0 41       	brne	800071e8 <_vfprintf_r+0x1574>
800071e2:	c3 c8       	rjmp	8000725a <_vfprintf_r+0x15e6>
800071e4:	04 96       	mov	r6,r2
800071e6:	c3 08       	rjmp	80007246 <_vfprintf_r+0x15d2>
800071e8:	04 96       	mov	r6,r2
800071ea:	fa e8 00 00 	ld.d	r8,sp[0]
800071ee:	f5 d8 c0 03 	bfextu	r10,r8,0x0,0x3
800071f2:	2d 0a       	sub	r10,-48
800071f4:	0c fa       	st.b	--r6,r10
800071f6:	f0 0b 16 03 	lsr	r11,r8,0x3
800071fa:	f2 0c 16 03 	lsr	r12,r9,0x3
800071fe:	f7 e9 11 db 	or	r11,r11,r9<<0x1d
80007202:	18 99       	mov	r9,r12
80007204:	16 98       	mov	r8,r11
80007206:	58 08       	cp.w	r8,0
80007208:	5c 29       	cpc	r9
8000720a:	cf 21       	brne	800071ee <_vfprintf_r+0x157a>
8000720c:	fa e9 00 00 	st.d	sp[0],r8
80007210:	ed b5 00 00 	bld	r5,0x0
80007214:	c4 51       	brne	8000729e <_vfprintf_r+0x162a>
80007216:	33 09       	mov	r9,48
80007218:	f2 0a 18 00 	cp.b	r10,r9
8000721c:	c4 10       	breq	8000729e <_vfprintf_r+0x162a>
8000721e:	0c f9       	st.b	--r6,r9
80007220:	c3 f8       	rjmp	8000729e <_vfprintf_r+0x162a>
80007222:	fa ea 00 00 	ld.d	r10,sp[0]
80007226:	30 a8       	mov	r8,10
80007228:	30 09       	mov	r9,0
8000722a:	e0 a0 17 dd 	rcall	8000a1e4 <__avr32_umod64>
8000722e:	30 a8       	mov	r8,10
80007230:	2d 0a       	sub	r10,-48
80007232:	30 09       	mov	r9,0
80007234:	ac 8a       	st.b	r6[0x0],r10
80007236:	fa ea 00 00 	ld.d	r10,sp[0]
8000723a:	e0 a0 16 a3 	rcall	80009f80 <__avr32_udiv64>
8000723e:	16 99       	mov	r9,r11
80007240:	14 98       	mov	r8,r10
80007242:	fa e9 00 00 	st.d	sp[0],r8
80007246:	20 16       	sub	r6,1
80007248:	fa ea 00 00 	ld.d	r10,sp[0]
8000724c:	58 9a       	cp.w	r10,9
8000724e:	5c 2b       	cpc	r11
80007250:	fe 9b ff e9 	brhi	80007222 <_vfprintf_r+0x15ae>
80007254:	1b f8       	ld.ub	r8,sp[0x7]
80007256:	2d 08       	sub	r8,-48
80007258:	c2 08       	rjmp	80007298 <_vfprintf_r+0x1624>
8000725a:	04 96       	mov	r6,r2
8000725c:	fa e8 00 00 	ld.d	r8,sp[0]
80007260:	f5 d8 c0 04 	bfextu	r10,r8,0x0,0x4
80007264:	40 de       	lddsp	lr,sp[0x34]
80007266:	fc 0a 07 0a 	ld.ub	r10,lr[r10]
8000726a:	0c fa       	st.b	--r6,r10
8000726c:	f2 0b 16 04 	lsr	r11,r9,0x4
80007270:	f0 0a 16 04 	lsr	r10,r8,0x4
80007274:	f5 e9 11 ca 	or	r10,r10,r9<<0x1c
80007278:	16 99       	mov	r9,r11
8000727a:	14 98       	mov	r8,r10
8000727c:	58 08       	cp.w	r8,0
8000727e:	5c 29       	cpc	r9
80007280:	cf 01       	brne	80007260 <_vfprintf_r+0x15ec>
80007282:	fa e9 00 00 	st.d	sp[0],r8
80007286:	c0 c8       	rjmp	8000729e <_vfprintf_r+0x162a>
80007288:	58 08       	cp.w	r8,0
8000728a:	c0 91       	brne	8000729c <_vfprintf_r+0x1628>
8000728c:	ed b5 00 00 	bld	r5,0x0
80007290:	c0 61       	brne	8000729c <_vfprintf_r+0x1628>
80007292:	fa c6 f9 79 	sub	r6,sp,-1671
80007296:	33 08       	mov	r8,48
80007298:	ac 88       	st.b	r6[0x0],r8
8000729a:	c0 28       	rjmp	8000729e <_vfprintf_r+0x162a>
8000729c:	04 96       	mov	r6,r2
8000729e:	0c 12       	sub	r2,r6
800072a0:	c1 c8       	rjmp	800072d8 <_vfprintf_r+0x1664>
800072a2:	50 a7       	stdsp	sp[0x28],r7
800072a4:	50 80       	stdsp	sp[0x20],r0
800072a6:	40 93       	lddsp	r3,sp[0x24]
800072a8:	0c 97       	mov	r7,r6
800072aa:	10 90       	mov	r0,r8
800072ac:	04 94       	mov	r4,r2
800072ae:	40 41       	lddsp	r1,sp[0x10]
800072b0:	58 08       	cp.w	r8,0
800072b2:	e0 80 04 4f 	breq	80007b50 <_vfprintf_r+0x1edc>
800072b6:	fb 68 06 60 	st.b	sp[1632],r8
800072ba:	30 0c       	mov	r12,0
800072bc:	30 08       	mov	r8,0
800072be:	30 12       	mov	r2,1
800072c0:	fb 68 06 bb 	st.b	sp[1723],r8
800072c4:	50 2c       	stdsp	sp[0x8],r12
800072c6:	fa c6 f9 a0 	sub	r6,sp,-1632
800072ca:	c0 78       	rjmp	800072d8 <_vfprintf_r+0x1664>
800072cc:	30 0b       	mov	r11,0
800072ce:	50 2b       	stdsp	sp[0x8],r11
800072d0:	c0 48       	rjmp	800072d8 <_vfprintf_r+0x1664>
800072d2:	40 22       	lddsp	r2,sp[0x8]
800072d4:	30 0a       	mov	r10,0
800072d6:	50 2a       	stdsp	sp[0x8],r10
800072d8:	40 29       	lddsp	r9,sp[0x8]
800072da:	e4 09 0c 49 	max	r9,r2,r9
800072de:	fb 38 06 bb 	ld.ub	r8,sp[1723]
800072e2:	50 39       	stdsp	sp[0xc],r9
800072e4:	0a 9e       	mov	lr,r5
800072e6:	30 09       	mov	r9,0
800072e8:	e2 1e 00 02 	andl	lr,0x2,COH
800072ec:	f2 08 18 00 	cp.b	r8,r9
800072f0:	fb f8 10 03 	ld.wne	r8,sp[0xc]
800072f4:	f7 b8 01 ff 	subne	r8,-1
800072f8:	fb f8 1a 03 	st.wne	sp[0xc],r8
800072fc:	0a 9b       	mov	r11,r5
800072fe:	58 0e       	cp.w	lr,0
80007300:	fb fc 10 03 	ld.wne	r12,sp[0xc]
80007304:	f7 bc 01 fe 	subne	r12,-2
80007308:	fb fc 1a 03 	st.wne	sp[0xc],r12
8000730c:	e2 1b 00 84 	andl	r11,0x84,COH
80007310:	50 fe       	stdsp	sp[0x3c],lr
80007312:	50 9b       	stdsp	sp[0x24],r11
80007314:	c4 71       	brne	800073a2 <_vfprintf_r+0x172e>
80007316:	40 8a       	lddsp	r10,sp[0x20]
80007318:	40 39       	lddsp	r9,sp[0xc]
8000731a:	12 1a       	sub	r10,r9
8000731c:	50 4a       	stdsp	sp[0x10],r10
8000731e:	58 0a       	cp.w	r10,0
80007320:	e0 89 00 20 	brgt	80007360 <_vfprintf_r+0x16ec>
80007324:	c3 f8       	rjmp	800073a2 <_vfprintf_r+0x172e>
80007326:	2f 09       	sub	r9,-16
80007328:	2f f8       	sub	r8,-1
8000732a:	fe ce c5 fa 	sub	lr,pc,-14854
8000732e:	31 0c       	mov	r12,16
80007330:	fb 49 06 90 	st.w	sp[1680],r9
80007334:	87 0e       	st.w	r3[0x0],lr
80007336:	87 1c       	st.w	r3[0x4],r12
80007338:	fb 48 06 8c 	st.w	sp[1676],r8
8000733c:	58 78       	cp.w	r8,7
8000733e:	e0 89 00 04 	brgt	80007346 <_vfprintf_r+0x16d2>
80007342:	2f 83       	sub	r3,-8
80007344:	c0 b8       	rjmp	8000735a <_vfprintf_r+0x16e6>
80007346:	fa ca f9 78 	sub	r10,sp,-1672
8000734a:	02 9b       	mov	r11,r1
8000734c:	08 9c       	mov	r12,r4
8000734e:	fe b0 f4 85 	rcall	80005c58 <__sprint_r>
80007352:	e0 81 04 10 	brne	80007b72 <_vfprintf_r+0x1efe>
80007356:	fa c3 f9 e0 	sub	r3,sp,-1568
8000735a:	40 4b       	lddsp	r11,sp[0x10]
8000735c:	21 0b       	sub	r11,16
8000735e:	50 4b       	stdsp	sp[0x10],r11
80007360:	fa f9 06 90 	ld.w	r9,sp[1680]
80007364:	fa f8 06 8c 	ld.w	r8,sp[1676]
80007368:	fe ca c6 38 	sub	r10,pc,-14792
8000736c:	40 4e       	lddsp	lr,sp[0x10]
8000736e:	59 0e       	cp.w	lr,16
80007370:	fe 99 ff db 	brgt	80007326 <_vfprintf_r+0x16b2>
80007374:	1c 09       	add	r9,lr
80007376:	2f f8       	sub	r8,-1
80007378:	87 0a       	st.w	r3[0x0],r10
8000737a:	fb 49 06 90 	st.w	sp[1680],r9
8000737e:	87 1e       	st.w	r3[0x4],lr
80007380:	fb 48 06 8c 	st.w	sp[1676],r8
80007384:	58 78       	cp.w	r8,7
80007386:	e0 89 00 04 	brgt	8000738e <_vfprintf_r+0x171a>
8000738a:	2f 83       	sub	r3,-8
8000738c:	c0 b8       	rjmp	800073a2 <_vfprintf_r+0x172e>
8000738e:	fa ca f9 78 	sub	r10,sp,-1672
80007392:	02 9b       	mov	r11,r1
80007394:	08 9c       	mov	r12,r4
80007396:	fe b0 f4 61 	rcall	80005c58 <__sprint_r>
8000739a:	e0 81 03 ec 	brne	80007b72 <_vfprintf_r+0x1efe>
8000739e:	fa c3 f9 e0 	sub	r3,sp,-1568
800073a2:	30 09       	mov	r9,0
800073a4:	fb 38 06 bb 	ld.ub	r8,sp[1723]
800073a8:	f2 08 18 00 	cp.b	r8,r9
800073ac:	c1 f0       	breq	800073ea <_vfprintf_r+0x1776>
800073ae:	fa f8 06 90 	ld.w	r8,sp[1680]
800073b2:	fa c9 f9 45 	sub	r9,sp,-1723
800073b6:	2f f8       	sub	r8,-1
800073b8:	87 09       	st.w	r3[0x0],r9
800073ba:	fb 48 06 90 	st.w	sp[1680],r8
800073be:	30 19       	mov	r9,1
800073c0:	fa f8 06 8c 	ld.w	r8,sp[1676]
800073c4:	87 19       	st.w	r3[0x4],r9
800073c6:	2f f8       	sub	r8,-1
800073c8:	fb 48 06 8c 	st.w	sp[1676],r8
800073cc:	58 78       	cp.w	r8,7
800073ce:	e0 89 00 04 	brgt	800073d6 <_vfprintf_r+0x1762>
800073d2:	2f 83       	sub	r3,-8
800073d4:	c0 b8       	rjmp	800073ea <_vfprintf_r+0x1776>
800073d6:	fa ca f9 78 	sub	r10,sp,-1672
800073da:	02 9b       	mov	r11,r1
800073dc:	08 9c       	mov	r12,r4
800073de:	fe b0 f4 3d 	rcall	80005c58 <__sprint_r>
800073e2:	e0 81 03 c8 	brne	80007b72 <_vfprintf_r+0x1efe>
800073e6:	fa c3 f9 e0 	sub	r3,sp,-1568
800073ea:	40 fc       	lddsp	r12,sp[0x3c]
800073ec:	58 0c       	cp.w	r12,0
800073ee:	c1 f0       	breq	8000742c <_vfprintf_r+0x17b8>
800073f0:	fa f8 06 90 	ld.w	r8,sp[1680]
800073f4:	fa c9 f9 48 	sub	r9,sp,-1720
800073f8:	2f e8       	sub	r8,-2
800073fa:	87 09       	st.w	r3[0x0],r9
800073fc:	fb 48 06 90 	st.w	sp[1680],r8
80007400:	30 29       	mov	r9,2
80007402:	fa f8 06 8c 	ld.w	r8,sp[1676]
80007406:	87 19       	st.w	r3[0x4],r9
80007408:	2f f8       	sub	r8,-1
8000740a:	fb 48 06 8c 	st.w	sp[1676],r8
8000740e:	58 78       	cp.w	r8,7
80007410:	e0 89 00 04 	brgt	80007418 <_vfprintf_r+0x17a4>
80007414:	2f 83       	sub	r3,-8
80007416:	c0 b8       	rjmp	8000742c <_vfprintf_r+0x17b8>
80007418:	fa ca f9 78 	sub	r10,sp,-1672
8000741c:	02 9b       	mov	r11,r1
8000741e:	08 9c       	mov	r12,r4
80007420:	fe b0 f4 1c 	rcall	80005c58 <__sprint_r>
80007424:	e0 81 03 a7 	brne	80007b72 <_vfprintf_r+0x1efe>
80007428:	fa c3 f9 e0 	sub	r3,sp,-1568
8000742c:	40 9b       	lddsp	r11,sp[0x24]
8000742e:	e0 4b 00 80 	cp.w	r11,128
80007432:	c4 71       	brne	800074c0 <_vfprintf_r+0x184c>
80007434:	40 8a       	lddsp	r10,sp[0x20]
80007436:	40 39       	lddsp	r9,sp[0xc]
80007438:	12 1a       	sub	r10,r9
8000743a:	50 4a       	stdsp	sp[0x10],r10
8000743c:	58 0a       	cp.w	r10,0
8000743e:	e0 89 00 20 	brgt	8000747e <_vfprintf_r+0x180a>
80007442:	c3 f8       	rjmp	800074c0 <_vfprintf_r+0x184c>
80007444:	2f 09       	sub	r9,-16
80007446:	2f f8       	sub	r8,-1
80007448:	fe ce c7 08 	sub	lr,pc,-14584
8000744c:	31 0c       	mov	r12,16
8000744e:	fb 49 06 90 	st.w	sp[1680],r9
80007452:	87 0e       	st.w	r3[0x0],lr
80007454:	87 1c       	st.w	r3[0x4],r12
80007456:	fb 48 06 8c 	st.w	sp[1676],r8
8000745a:	58 78       	cp.w	r8,7
8000745c:	e0 89 00 04 	brgt	80007464 <_vfprintf_r+0x17f0>
80007460:	2f 83       	sub	r3,-8
80007462:	c0 b8       	rjmp	80007478 <_vfprintf_r+0x1804>
80007464:	fa ca f9 78 	sub	r10,sp,-1672
80007468:	02 9b       	mov	r11,r1
8000746a:	08 9c       	mov	r12,r4
8000746c:	fe b0 f3 f6 	rcall	80005c58 <__sprint_r>
80007470:	e0 81 03 81 	brne	80007b72 <_vfprintf_r+0x1efe>
80007474:	fa c3 f9 e0 	sub	r3,sp,-1568
80007478:	40 4b       	lddsp	r11,sp[0x10]
8000747a:	21 0b       	sub	r11,16
8000747c:	50 4b       	stdsp	sp[0x10],r11
8000747e:	fa f9 06 90 	ld.w	r9,sp[1680]
80007482:	fa f8 06 8c 	ld.w	r8,sp[1676]
80007486:	fe ca c7 46 	sub	r10,pc,-14522
8000748a:	40 4e       	lddsp	lr,sp[0x10]
8000748c:	59 0e       	cp.w	lr,16
8000748e:	fe 99 ff db 	brgt	80007444 <_vfprintf_r+0x17d0>
80007492:	1c 09       	add	r9,lr
80007494:	2f f8       	sub	r8,-1
80007496:	87 0a       	st.w	r3[0x0],r10
80007498:	fb 49 06 90 	st.w	sp[1680],r9
8000749c:	87 1e       	st.w	r3[0x4],lr
8000749e:	fb 48 06 8c 	st.w	sp[1676],r8
800074a2:	58 78       	cp.w	r8,7
800074a4:	e0 89 00 04 	brgt	800074ac <_vfprintf_r+0x1838>
800074a8:	2f 83       	sub	r3,-8
800074aa:	c0 b8       	rjmp	800074c0 <_vfprintf_r+0x184c>
800074ac:	fa ca f9 78 	sub	r10,sp,-1672
800074b0:	02 9b       	mov	r11,r1
800074b2:	08 9c       	mov	r12,r4
800074b4:	fe b0 f3 d2 	rcall	80005c58 <__sprint_r>
800074b8:	e0 81 03 5d 	brne	80007b72 <_vfprintf_r+0x1efe>
800074bc:	fa c3 f9 e0 	sub	r3,sp,-1568
800074c0:	40 2c       	lddsp	r12,sp[0x8]
800074c2:	04 1c       	sub	r12,r2
800074c4:	50 2c       	stdsp	sp[0x8],r12
800074c6:	58 0c       	cp.w	r12,0
800074c8:	e0 89 00 20 	brgt	80007508 <_vfprintf_r+0x1894>
800074cc:	c3 f8       	rjmp	8000754a <_vfprintf_r+0x18d6>
800074ce:	2f 09       	sub	r9,-16
800074d0:	2f f8       	sub	r8,-1
800074d2:	fe cb c7 92 	sub	r11,pc,-14446
800074d6:	31 0a       	mov	r10,16
800074d8:	fb 49 06 90 	st.w	sp[1680],r9
800074dc:	87 0b       	st.w	r3[0x0],r11
800074de:	87 1a       	st.w	r3[0x4],r10
800074e0:	fb 48 06 8c 	st.w	sp[1676],r8
800074e4:	58 78       	cp.w	r8,7
800074e6:	e0 89 00 04 	brgt	800074ee <_vfprintf_r+0x187a>
800074ea:	2f 83       	sub	r3,-8
800074ec:	c0 b8       	rjmp	80007502 <_vfprintf_r+0x188e>
800074ee:	fa ca f9 78 	sub	r10,sp,-1672
800074f2:	02 9b       	mov	r11,r1
800074f4:	08 9c       	mov	r12,r4
800074f6:	fe b0 f3 b1 	rcall	80005c58 <__sprint_r>
800074fa:	e0 81 03 3c 	brne	80007b72 <_vfprintf_r+0x1efe>
800074fe:	fa c3 f9 e0 	sub	r3,sp,-1568
80007502:	40 29       	lddsp	r9,sp[0x8]
80007504:	21 09       	sub	r9,16
80007506:	50 29       	stdsp	sp[0x8],r9
80007508:	fa f9 06 90 	ld.w	r9,sp[1680]
8000750c:	fa f8 06 8c 	ld.w	r8,sp[1676]
80007510:	fe ca c7 d0 	sub	r10,pc,-14384
80007514:	40 2e       	lddsp	lr,sp[0x8]
80007516:	59 0e       	cp.w	lr,16
80007518:	fe 99 ff db 	brgt	800074ce <_vfprintf_r+0x185a>
8000751c:	1c 09       	add	r9,lr
8000751e:	2f f8       	sub	r8,-1
80007520:	87 0a       	st.w	r3[0x0],r10
80007522:	fb 49 06 90 	st.w	sp[1680],r9
80007526:	87 1e       	st.w	r3[0x4],lr
80007528:	fb 48 06 8c 	st.w	sp[1676],r8
8000752c:	58 78       	cp.w	r8,7
8000752e:	e0 89 00 04 	brgt	80007536 <_vfprintf_r+0x18c2>
80007532:	2f 83       	sub	r3,-8
80007534:	c0 b8       	rjmp	8000754a <_vfprintf_r+0x18d6>
80007536:	fa ca f9 78 	sub	r10,sp,-1672
8000753a:	02 9b       	mov	r11,r1
8000753c:	08 9c       	mov	r12,r4
8000753e:	fe b0 f3 8d 	rcall	80005c58 <__sprint_r>
80007542:	e0 81 03 18 	brne	80007b72 <_vfprintf_r+0x1efe>
80007546:	fa c3 f9 e0 	sub	r3,sp,-1568
8000754a:	ed b5 00 08 	bld	r5,0x8
8000754e:	c0 b0       	breq	80007564 <_vfprintf_r+0x18f0>
80007550:	fa f8 06 90 	ld.w	r8,sp[1680]
80007554:	87 12       	st.w	r3[0x4],r2
80007556:	87 06       	st.w	r3[0x0],r6
80007558:	f0 02 00 02 	add	r2,r8,r2
8000755c:	fb 42 06 90 	st.w	sp[1680],r2
80007560:	e0 8f 01 d4 	bral	80007908 <_vfprintf_r+0x1c94>
80007564:	e0 40 00 65 	cp.w	r0,101
80007568:	e0 8a 01 d6 	brle	80007914 <_vfprintf_r+0x1ca0>
8000756c:	30 08       	mov	r8,0
8000756e:	30 09       	mov	r9,0
80007570:	40 5b       	lddsp	r11,sp[0x14]
80007572:	40 7a       	lddsp	r10,sp[0x1c]
80007574:	e0 a0 12 ff 	rcall	80009b72 <__avr32_f64_cmp_eq>
80007578:	c7 90       	breq	8000766a <_vfprintf_r+0x19f6>
8000757a:	fa f8 06 90 	ld.w	r8,sp[1680]
8000757e:	fe c9 c8 52 	sub	r9,pc,-14254
80007582:	2f f8       	sub	r8,-1
80007584:	87 09       	st.w	r3[0x0],r9
80007586:	fb 48 06 90 	st.w	sp[1680],r8
8000758a:	30 19       	mov	r9,1
8000758c:	fa f8 06 8c 	ld.w	r8,sp[1676]
80007590:	87 19       	st.w	r3[0x4],r9
80007592:	2f f8       	sub	r8,-1
80007594:	fb 48 06 8c 	st.w	sp[1676],r8
80007598:	58 78       	cp.w	r8,7
8000759a:	e0 89 00 05 	brgt	800075a4 <_vfprintf_r+0x1930>
8000759e:	2f 83       	sub	r3,-8
800075a0:	c0 c8       	rjmp	800075b8 <_vfprintf_r+0x1944>
800075a2:	d7 03       	nop
800075a4:	fa ca f9 78 	sub	r10,sp,-1672
800075a8:	02 9b       	mov	r11,r1
800075aa:	08 9c       	mov	r12,r4
800075ac:	fe b0 f3 56 	rcall	80005c58 <__sprint_r>
800075b0:	e0 81 02 e1 	brne	80007b72 <_vfprintf_r+0x1efe>
800075b4:	fa c3 f9 e0 	sub	r3,sp,-1568
800075b8:	fa f8 06 ac 	ld.w	r8,sp[1708]
800075bc:	40 6c       	lddsp	r12,sp[0x18]
800075be:	18 38       	cp.w	r8,r12
800075c0:	c0 55       	brlt	800075ca <_vfprintf_r+0x1956>
800075c2:	ed b5 00 00 	bld	r5,0x0
800075c6:	e0 81 02 6b 	brne	80007a9c <_vfprintf_r+0x1e28>
800075ca:	fa f8 06 90 	ld.w	r8,sp[1680]
800075ce:	2f f8       	sub	r8,-1
800075d0:	40 cb       	lddsp	r11,sp[0x30]
800075d2:	fb 48 06 90 	st.w	sp[1680],r8
800075d6:	30 19       	mov	r9,1
800075d8:	fa f8 06 8c 	ld.w	r8,sp[1676]
800075dc:	87 0b       	st.w	r3[0x0],r11
800075de:	2f f8       	sub	r8,-1
800075e0:	87 19       	st.w	r3[0x4],r9
800075e2:	fb 48 06 8c 	st.w	sp[1676],r8
800075e6:	58 78       	cp.w	r8,7
800075e8:	e0 89 00 04 	brgt	800075f0 <_vfprintf_r+0x197c>
800075ec:	2f 83       	sub	r3,-8
800075ee:	c0 b8       	rjmp	80007604 <_vfprintf_r+0x1990>
800075f0:	fa ca f9 78 	sub	r10,sp,-1672
800075f4:	02 9b       	mov	r11,r1
800075f6:	08 9c       	mov	r12,r4
800075f8:	fe b0 f3 30 	rcall	80005c58 <__sprint_r>
800075fc:	e0 81 02 bb 	brne	80007b72 <_vfprintf_r+0x1efe>
80007600:	fa c3 f9 e0 	sub	r3,sp,-1568
80007604:	40 66       	lddsp	r6,sp[0x18]
80007606:	20 16       	sub	r6,1
80007608:	58 06       	cp.w	r6,0
8000760a:	e0 89 00 1d 	brgt	80007644 <_vfprintf_r+0x19d0>
8000760e:	e0 8f 02 47 	bral	80007a9c <_vfprintf_r+0x1e28>
80007612:	2f 09       	sub	r9,-16
80007614:	2f f8       	sub	r8,-1
80007616:	fb 49 06 90 	st.w	sp[1680],r9
8000761a:	87 02       	st.w	r3[0x0],r2
8000761c:	87 10       	st.w	r3[0x4],r0
8000761e:	fb 48 06 8c 	st.w	sp[1676],r8
80007622:	58 78       	cp.w	r8,7
80007624:	e0 89 00 04 	brgt	8000762c <_vfprintf_r+0x19b8>
80007628:	2f 83       	sub	r3,-8
8000762a:	c0 b8       	rjmp	80007640 <_vfprintf_r+0x19cc>
8000762c:	fa ca f9 78 	sub	r10,sp,-1672
80007630:	02 9b       	mov	r11,r1
80007632:	08 9c       	mov	r12,r4
80007634:	fe b0 f3 12 	rcall	80005c58 <__sprint_r>
80007638:	e0 81 02 9d 	brne	80007b72 <_vfprintf_r+0x1efe>
8000763c:	fa c3 f9 e0 	sub	r3,sp,-1568
80007640:	21 06       	sub	r6,16
80007642:	c0 48       	rjmp	8000764a <_vfprintf_r+0x19d6>
80007644:	fe c2 c9 04 	sub	r2,pc,-14076
80007648:	31 00       	mov	r0,16
8000764a:	fa f9 06 90 	ld.w	r9,sp[1680]
8000764e:	fa f8 06 8c 	ld.w	r8,sp[1676]
80007652:	fe ca c9 12 	sub	r10,pc,-14062
80007656:	59 06       	cp.w	r6,16
80007658:	fe 99 ff dd 	brgt	80007612 <_vfprintf_r+0x199e>
8000765c:	0c 09       	add	r9,r6
8000765e:	87 0a       	st.w	r3[0x0],r10
80007660:	fb 49 06 90 	st.w	sp[1680],r9
80007664:	2f f8       	sub	r8,-1
80007666:	87 16       	st.w	r3[0x4],r6
80007668:	c5 39       	rjmp	8000790e <_vfprintf_r+0x1c9a>
8000766a:	fa fa 06 ac 	ld.w	r10,sp[1708]
8000766e:	58 0a       	cp.w	r10,0
80007670:	e0 89 00 92 	brgt	80007794 <_vfprintf_r+0x1b20>
80007674:	fa f8 06 90 	ld.w	r8,sp[1680]
80007678:	fe c9 c9 4c 	sub	r9,pc,-14004
8000767c:	2f f8       	sub	r8,-1
8000767e:	87 09       	st.w	r3[0x0],r9
80007680:	fb 48 06 90 	st.w	sp[1680],r8
80007684:	30 19       	mov	r9,1
80007686:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000768a:	87 19       	st.w	r3[0x4],r9
8000768c:	2f f8       	sub	r8,-1
8000768e:	fb 48 06 8c 	st.w	sp[1676],r8
80007692:	58 78       	cp.w	r8,7
80007694:	e0 89 00 04 	brgt	8000769c <_vfprintf_r+0x1a28>
80007698:	2f 83       	sub	r3,-8
8000769a:	c0 b8       	rjmp	800076b0 <_vfprintf_r+0x1a3c>
8000769c:	fa ca f9 78 	sub	r10,sp,-1672
800076a0:	02 9b       	mov	r11,r1
800076a2:	08 9c       	mov	r12,r4
800076a4:	fe b0 f2 da 	rcall	80005c58 <__sprint_r>
800076a8:	e0 81 02 65 	brne	80007b72 <_vfprintf_r+0x1efe>
800076ac:	fa c3 f9 e0 	sub	r3,sp,-1568
800076b0:	fa f8 06 ac 	ld.w	r8,sp[1708]
800076b4:	58 08       	cp.w	r8,0
800076b6:	c0 81       	brne	800076c6 <_vfprintf_r+0x1a52>
800076b8:	40 6a       	lddsp	r10,sp[0x18]
800076ba:	58 0a       	cp.w	r10,0
800076bc:	c0 51       	brne	800076c6 <_vfprintf_r+0x1a52>
800076be:	ed b5 00 00 	bld	r5,0x0
800076c2:	e0 81 01 ed 	brne	80007a9c <_vfprintf_r+0x1e28>
800076c6:	40 c9       	lddsp	r9,sp[0x30]
800076c8:	fa f8 06 90 	ld.w	r8,sp[1680]
800076cc:	2f f8       	sub	r8,-1
800076ce:	87 09       	st.w	r3[0x0],r9
800076d0:	fb 48 06 90 	st.w	sp[1680],r8
800076d4:	30 19       	mov	r9,1
800076d6:	fa f8 06 8c 	ld.w	r8,sp[1676]
800076da:	87 19       	st.w	r3[0x4],r9
800076dc:	2f f8       	sub	r8,-1
800076de:	fb 48 06 8c 	st.w	sp[1676],r8
800076e2:	58 78       	cp.w	r8,7
800076e4:	e0 89 00 04 	brgt	800076ec <_vfprintf_r+0x1a78>
800076e8:	2f 83       	sub	r3,-8
800076ea:	c0 b8       	rjmp	80007700 <_vfprintf_r+0x1a8c>
800076ec:	fa ca f9 78 	sub	r10,sp,-1672
800076f0:	02 9b       	mov	r11,r1
800076f2:	08 9c       	mov	r12,r4
800076f4:	fe b0 f2 b2 	rcall	80005c58 <__sprint_r>
800076f8:	e0 81 02 3d 	brne	80007b72 <_vfprintf_r+0x1efe>
800076fc:	fa c3 f9 e0 	sub	r3,sp,-1568
80007700:	fa f2 06 ac 	ld.w	r2,sp[1708]
80007704:	5c 32       	neg	r2
80007706:	58 02       	cp.w	r2,0
80007708:	e0 89 00 1d 	brgt	80007742 <_vfprintf_r+0x1ace>
8000770c:	c3 d8       	rjmp	80007786 <_vfprintf_r+0x1b12>
8000770e:	2f 09       	sub	r9,-16
80007710:	2f f8       	sub	r8,-1
80007712:	31 0e       	mov	lr,16
80007714:	fb 49 06 90 	st.w	sp[1680],r9
80007718:	87 00       	st.w	r3[0x0],r0
8000771a:	87 1e       	st.w	r3[0x4],lr
8000771c:	fb 48 06 8c 	st.w	sp[1676],r8
80007720:	58 78       	cp.w	r8,7
80007722:	e0 89 00 04 	brgt	8000772a <_vfprintf_r+0x1ab6>
80007726:	2f 83       	sub	r3,-8
80007728:	c0 b8       	rjmp	8000773e <_vfprintf_r+0x1aca>
8000772a:	fa ca f9 78 	sub	r10,sp,-1672
8000772e:	02 9b       	mov	r11,r1
80007730:	08 9c       	mov	r12,r4
80007732:	fe b0 f2 93 	rcall	80005c58 <__sprint_r>
80007736:	e0 81 02 1e 	brne	80007b72 <_vfprintf_r+0x1efe>
8000773a:	fa c3 f9 e0 	sub	r3,sp,-1568
8000773e:	21 02       	sub	r2,16
80007740:	c0 38       	rjmp	80007746 <_vfprintf_r+0x1ad2>
80007742:	fe c0 ca 02 	sub	r0,pc,-13822
80007746:	fa f9 06 90 	ld.w	r9,sp[1680]
8000774a:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000774e:	fe ca ca 0e 	sub	r10,pc,-13810
80007752:	59 02       	cp.w	r2,16
80007754:	fe 99 ff dd 	brgt	8000770e <_vfprintf_r+0x1a9a>
80007758:	04 09       	add	r9,r2
8000775a:	2f f8       	sub	r8,-1
8000775c:	87 0a       	st.w	r3[0x0],r10
8000775e:	fb 49 06 90 	st.w	sp[1680],r9
80007762:	87 12       	st.w	r3[0x4],r2
80007764:	fb 48 06 8c 	st.w	sp[1676],r8
80007768:	58 78       	cp.w	r8,7
8000776a:	e0 89 00 04 	brgt	80007772 <_vfprintf_r+0x1afe>
8000776e:	2f 83       	sub	r3,-8
80007770:	c0 b8       	rjmp	80007786 <_vfprintf_r+0x1b12>
80007772:	fa ca f9 78 	sub	r10,sp,-1672
80007776:	02 9b       	mov	r11,r1
80007778:	08 9c       	mov	r12,r4
8000777a:	fe b0 f2 6f 	rcall	80005c58 <__sprint_r>
8000777e:	e0 81 01 fa 	brne	80007b72 <_vfprintf_r+0x1efe>
80007782:	fa c3 f9 e0 	sub	r3,sp,-1568
80007786:	40 6c       	lddsp	r12,sp[0x18]
80007788:	fa f8 06 90 	ld.w	r8,sp[1680]
8000778c:	87 06       	st.w	r3[0x0],r6
8000778e:	87 1c       	st.w	r3[0x4],r12
80007790:	18 08       	add	r8,r12
80007792:	cb 98       	rjmp	80007904 <_vfprintf_r+0x1c90>
80007794:	fa f9 06 90 	ld.w	r9,sp[1680]
80007798:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000779c:	40 6b       	lddsp	r11,sp[0x18]
8000779e:	16 3a       	cp.w	r10,r11
800077a0:	c6 f5       	brlt	8000787e <_vfprintf_r+0x1c0a>
800077a2:	16 09       	add	r9,r11
800077a4:	2f f8       	sub	r8,-1
800077a6:	87 06       	st.w	r3[0x0],r6
800077a8:	fb 49 06 90 	st.w	sp[1680],r9
800077ac:	87 1b       	st.w	r3[0x4],r11
800077ae:	fb 48 06 8c 	st.w	sp[1676],r8
800077b2:	58 78       	cp.w	r8,7
800077b4:	e0 89 00 04 	brgt	800077bc <_vfprintf_r+0x1b48>
800077b8:	2f 83       	sub	r3,-8
800077ba:	c0 b8       	rjmp	800077d0 <_vfprintf_r+0x1b5c>
800077bc:	fa ca f9 78 	sub	r10,sp,-1672
800077c0:	02 9b       	mov	r11,r1
800077c2:	08 9c       	mov	r12,r4
800077c4:	fe b0 f2 4a 	rcall	80005c58 <__sprint_r>
800077c8:	e0 81 01 d5 	brne	80007b72 <_vfprintf_r+0x1efe>
800077cc:	fa c3 f9 e0 	sub	r3,sp,-1568
800077d0:	fa f6 06 ac 	ld.w	r6,sp[1708]
800077d4:	40 6a       	lddsp	r10,sp[0x18]
800077d6:	14 16       	sub	r6,r10
800077d8:	58 06       	cp.w	r6,0
800077da:	e0 89 00 1c 	brgt	80007812 <_vfprintf_r+0x1b9e>
800077de:	c3 d8       	rjmp	80007858 <_vfprintf_r+0x1be4>
800077e0:	2f 09       	sub	r9,-16
800077e2:	2f f8       	sub	r8,-1
800077e4:	fb 49 06 90 	st.w	sp[1680],r9
800077e8:	87 02       	st.w	r3[0x0],r2
800077ea:	87 10       	st.w	r3[0x4],r0
800077ec:	fb 48 06 8c 	st.w	sp[1676],r8
800077f0:	58 78       	cp.w	r8,7
800077f2:	e0 89 00 04 	brgt	800077fa <_vfprintf_r+0x1b86>
800077f6:	2f 83       	sub	r3,-8
800077f8:	c0 b8       	rjmp	8000780e <_vfprintf_r+0x1b9a>
800077fa:	fa ca f9 78 	sub	r10,sp,-1672
800077fe:	02 9b       	mov	r11,r1
80007800:	08 9c       	mov	r12,r4
80007802:	fe b0 f2 2b 	rcall	80005c58 <__sprint_r>
80007806:	e0 81 01 b6 	brne	80007b72 <_vfprintf_r+0x1efe>
8000780a:	fa c3 f9 e0 	sub	r3,sp,-1568
8000780e:	21 06       	sub	r6,16
80007810:	c0 48       	rjmp	80007818 <_vfprintf_r+0x1ba4>
80007812:	fe c2 ca d2 	sub	r2,pc,-13614
80007816:	31 00       	mov	r0,16
80007818:	fa f9 06 90 	ld.w	r9,sp[1680]
8000781c:	fa f8 06 8c 	ld.w	r8,sp[1676]
80007820:	fe ca ca e0 	sub	r10,pc,-13600
80007824:	59 06       	cp.w	r6,16
80007826:	fe 99 ff dd 	brgt	800077e0 <_vfprintf_r+0x1b6c>
8000782a:	0c 09       	add	r9,r6
8000782c:	2f f8       	sub	r8,-1
8000782e:	87 0a       	st.w	r3[0x0],r10
80007830:	fb 49 06 90 	st.w	sp[1680],r9
80007834:	87 16       	st.w	r3[0x4],r6
80007836:	fb 48 06 8c 	st.w	sp[1676],r8
8000783a:	58 78       	cp.w	r8,7
8000783c:	e0 89 00 04 	brgt	80007844 <_vfprintf_r+0x1bd0>
80007840:	2f 83       	sub	r3,-8
80007842:	c0 b8       	rjmp	80007858 <_vfprintf_r+0x1be4>
80007844:	fa ca f9 78 	sub	r10,sp,-1672
80007848:	02 9b       	mov	r11,r1
8000784a:	08 9c       	mov	r12,r4
8000784c:	fe b0 f2 06 	rcall	80005c58 <__sprint_r>
80007850:	e0 81 01 91 	brne	80007b72 <_vfprintf_r+0x1efe>
80007854:	fa c3 f9 e0 	sub	r3,sp,-1568
80007858:	ed b5 00 00 	bld	r5,0x0
8000785c:	e0 81 01 20 	brne	80007a9c <_vfprintf_r+0x1e28>
80007860:	40 c9       	lddsp	r9,sp[0x30]
80007862:	fa f8 06 90 	ld.w	r8,sp[1680]
80007866:	2f f8       	sub	r8,-1
80007868:	87 09       	st.w	r3[0x0],r9
8000786a:	fb 48 06 90 	st.w	sp[1680],r8
8000786e:	30 19       	mov	r9,1
80007870:	fa f8 06 8c 	ld.w	r8,sp[1676]
80007874:	87 19       	st.w	r3[0x4],r9
80007876:	2f f8       	sub	r8,-1
80007878:	fb 48 06 8c 	st.w	sp[1676],r8
8000787c:	c0 29       	rjmp	80007a80 <_vfprintf_r+0x1e0c>
8000787e:	14 09       	add	r9,r10
80007880:	2f f8       	sub	r8,-1
80007882:	fb 49 06 90 	st.w	sp[1680],r9
80007886:	87 06       	st.w	r3[0x0],r6
80007888:	87 1a       	st.w	r3[0x4],r10
8000788a:	fb 48 06 8c 	st.w	sp[1676],r8
8000788e:	58 78       	cp.w	r8,7
80007890:	e0 89 00 04 	brgt	80007898 <_vfprintf_r+0x1c24>
80007894:	2f 83       	sub	r3,-8
80007896:	c0 b8       	rjmp	800078ac <_vfprintf_r+0x1c38>
80007898:	fa ca f9 78 	sub	r10,sp,-1672
8000789c:	02 9b       	mov	r11,r1
8000789e:	08 9c       	mov	r12,r4
800078a0:	fe b0 f1 dc 	rcall	80005c58 <__sprint_r>
800078a4:	e0 81 01 67 	brne	80007b72 <_vfprintf_r+0x1efe>
800078a8:	fa c3 f9 e0 	sub	r3,sp,-1568
800078ac:	40 c8       	lddsp	r8,sp[0x30]
800078ae:	87 08       	st.w	r3[0x0],r8
800078b0:	fa f8 06 90 	ld.w	r8,sp[1680]
800078b4:	2f f8       	sub	r8,-1
800078b6:	30 19       	mov	r9,1
800078b8:	fb 48 06 90 	st.w	sp[1680],r8
800078bc:	87 19       	st.w	r3[0x4],r9
800078be:	fa f8 06 8c 	ld.w	r8,sp[1676]
800078c2:	2f f8       	sub	r8,-1
800078c4:	fb 48 06 8c 	st.w	sp[1676],r8
800078c8:	fa f2 06 ac 	ld.w	r2,sp[1708]
800078cc:	58 78       	cp.w	r8,7
800078ce:	e0 89 00 04 	brgt	800078d6 <_vfprintf_r+0x1c62>
800078d2:	2f 83       	sub	r3,-8
800078d4:	c0 b8       	rjmp	800078ea <_vfprintf_r+0x1c76>
800078d6:	fa ca f9 78 	sub	r10,sp,-1672
800078da:	02 9b       	mov	r11,r1
800078dc:	08 9c       	mov	r12,r4
800078de:	fe b0 f1 bd 	rcall	80005c58 <__sprint_r>
800078e2:	e0 81 01 48 	brne	80007b72 <_vfprintf_r+0x1efe>
800078e6:	fa c3 f9 e0 	sub	r3,sp,-1568
800078ea:	04 06       	add	r6,r2
800078ec:	fa f8 06 ac 	ld.w	r8,sp[1708]
800078f0:	87 06       	st.w	r3[0x0],r6
800078f2:	fa f9 06 90 	ld.w	r9,sp[1680]
800078f6:	40 66       	lddsp	r6,sp[0x18]
800078f8:	40 6e       	lddsp	lr,sp[0x18]
800078fa:	10 16       	sub	r6,r8
800078fc:	f2 08 01 08 	sub	r8,r9,r8
80007900:	87 16       	st.w	r3[0x4],r6
80007902:	1c 08       	add	r8,lr
80007904:	fb 48 06 90 	st.w	sp[1680],r8
80007908:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000790c:	2f f8       	sub	r8,-1
8000790e:	fb 48 06 8c 	st.w	sp[1676],r8
80007912:	cb 78       	rjmp	80007a80 <_vfprintf_r+0x1e0c>
80007914:	40 6c       	lddsp	r12,sp[0x18]
80007916:	58 1c       	cp.w	r12,1
80007918:	e0 89 00 06 	brgt	80007924 <_vfprintf_r+0x1cb0>
8000791c:	ed b5 00 00 	bld	r5,0x0
80007920:	e0 81 00 85 	brne	80007a2a <_vfprintf_r+0x1db6>
80007924:	fa f8 06 90 	ld.w	r8,sp[1680]
80007928:	2f f8       	sub	r8,-1
8000792a:	30 19       	mov	r9,1
8000792c:	fb 48 06 90 	st.w	sp[1680],r8
80007930:	87 06       	st.w	r3[0x0],r6
80007932:	fa f8 06 8c 	ld.w	r8,sp[1676]
80007936:	87 19       	st.w	r3[0x4],r9
80007938:	2f f8       	sub	r8,-1
8000793a:	fb 48 06 8c 	st.w	sp[1676],r8
8000793e:	58 78       	cp.w	r8,7
80007940:	e0 89 00 04 	brgt	80007948 <_vfprintf_r+0x1cd4>
80007944:	2f 83       	sub	r3,-8
80007946:	c0 b8       	rjmp	8000795c <_vfprintf_r+0x1ce8>
80007948:	fa ca f9 78 	sub	r10,sp,-1672
8000794c:	02 9b       	mov	r11,r1
8000794e:	08 9c       	mov	r12,r4
80007950:	fe b0 f1 84 	rcall	80005c58 <__sprint_r>
80007954:	e0 81 01 0f 	brne	80007b72 <_vfprintf_r+0x1efe>
80007958:	fa c3 f9 e0 	sub	r3,sp,-1568
8000795c:	fa f8 06 90 	ld.w	r8,sp[1680]
80007960:	2f f8       	sub	r8,-1
80007962:	40 cb       	lddsp	r11,sp[0x30]
80007964:	fb 48 06 90 	st.w	sp[1680],r8
80007968:	30 19       	mov	r9,1
8000796a:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000796e:	87 0b       	st.w	r3[0x0],r11
80007970:	2f f8       	sub	r8,-1
80007972:	87 19       	st.w	r3[0x4],r9
80007974:	fb 48 06 8c 	st.w	sp[1676],r8
80007978:	58 78       	cp.w	r8,7
8000797a:	e0 89 00 05 	brgt	80007984 <_vfprintf_r+0x1d10>
8000797e:	2f 83       	sub	r3,-8
80007980:	c0 c8       	rjmp	80007998 <_vfprintf_r+0x1d24>
80007982:	d7 03       	nop
80007984:	fa ca f9 78 	sub	r10,sp,-1672
80007988:	02 9b       	mov	r11,r1
8000798a:	08 9c       	mov	r12,r4
8000798c:	fe b0 f1 66 	rcall	80005c58 <__sprint_r>
80007990:	e0 81 00 f1 	brne	80007b72 <_vfprintf_r+0x1efe>
80007994:	fa c3 f9 e0 	sub	r3,sp,-1568
80007998:	30 08       	mov	r8,0
8000799a:	30 09       	mov	r9,0
8000799c:	40 5b       	lddsp	r11,sp[0x14]
8000799e:	40 7a       	lddsp	r10,sp[0x1c]
800079a0:	e0 a0 10 e9 	rcall	80009b72 <__avr32_f64_cmp_eq>
800079a4:	40 68       	lddsp	r8,sp[0x18]
800079a6:	20 18       	sub	r8,1
800079a8:	58 0c       	cp.w	r12,0
800079aa:	c0 d1       	brne	800079c4 <_vfprintf_r+0x1d50>
800079ac:	2f f6       	sub	r6,-1
800079ae:	87 18       	st.w	r3[0x4],r8
800079b0:	87 06       	st.w	r3[0x0],r6
800079b2:	fa f6 06 90 	ld.w	r6,sp[1680]
800079b6:	10 06       	add	r6,r8
800079b8:	fa f8 06 8c 	ld.w	r8,sp[1676]
800079bc:	fb 46 06 90 	st.w	sp[1680],r6
800079c0:	2f f8       	sub	r8,-1
800079c2:	c3 18       	rjmp	80007a24 <_vfprintf_r+0x1db0>
800079c4:	10 96       	mov	r6,r8
800079c6:	58 08       	cp.w	r8,0
800079c8:	e0 89 00 1c 	brgt	80007a00 <_vfprintf_r+0x1d8c>
800079cc:	c4 b8       	rjmp	80007a62 <_vfprintf_r+0x1dee>
800079ce:	2f 09       	sub	r9,-16
800079d0:	2f f8       	sub	r8,-1
800079d2:	fb 49 06 90 	st.w	sp[1680],r9
800079d6:	87 02       	st.w	r3[0x0],r2
800079d8:	87 10       	st.w	r3[0x4],r0
800079da:	fb 48 06 8c 	st.w	sp[1676],r8
800079de:	58 78       	cp.w	r8,7
800079e0:	e0 89 00 04 	brgt	800079e8 <_vfprintf_r+0x1d74>
800079e4:	2f 83       	sub	r3,-8
800079e6:	c0 b8       	rjmp	800079fc <_vfprintf_r+0x1d88>
800079e8:	fa ca f9 78 	sub	r10,sp,-1672
800079ec:	02 9b       	mov	r11,r1
800079ee:	08 9c       	mov	r12,r4
800079f0:	fe b0 f1 34 	rcall	80005c58 <__sprint_r>
800079f4:	e0 81 00 bf 	brne	80007b72 <_vfprintf_r+0x1efe>
800079f8:	fa c3 f9 e0 	sub	r3,sp,-1568
800079fc:	21 06       	sub	r6,16
800079fe:	c0 48       	rjmp	80007a06 <_vfprintf_r+0x1d92>
80007a00:	fe c2 cc c0 	sub	r2,pc,-13120
80007a04:	31 00       	mov	r0,16
80007a06:	fa f9 06 90 	ld.w	r9,sp[1680]
80007a0a:	fa f8 06 8c 	ld.w	r8,sp[1676]
80007a0e:	fe ca cc ce 	sub	r10,pc,-13106
80007a12:	59 06       	cp.w	r6,16
80007a14:	fe 99 ff dd 	brgt	800079ce <_vfprintf_r+0x1d5a>
80007a18:	0c 09       	add	r9,r6
80007a1a:	87 0a       	st.w	r3[0x0],r10
80007a1c:	fb 49 06 90 	st.w	sp[1680],r9
80007a20:	2f f8       	sub	r8,-1
80007a22:	87 16       	st.w	r3[0x4],r6
80007a24:	fb 48 06 8c 	st.w	sp[1676],r8
80007a28:	c0 e8       	rjmp	80007a44 <_vfprintf_r+0x1dd0>
80007a2a:	fa f8 06 90 	ld.w	r8,sp[1680]
80007a2e:	2f f8       	sub	r8,-1
80007a30:	30 19       	mov	r9,1
80007a32:	fb 48 06 90 	st.w	sp[1680],r8
80007a36:	87 06       	st.w	r3[0x0],r6
80007a38:	fa f8 06 8c 	ld.w	r8,sp[1676]
80007a3c:	87 19       	st.w	r3[0x4],r9
80007a3e:	2f f8       	sub	r8,-1
80007a40:	fb 48 06 8c 	st.w	sp[1676],r8
80007a44:	58 78       	cp.w	r8,7
80007a46:	e0 89 00 04 	brgt	80007a4e <_vfprintf_r+0x1dda>
80007a4a:	2f 83       	sub	r3,-8
80007a4c:	c0 b8       	rjmp	80007a62 <_vfprintf_r+0x1dee>
80007a4e:	fa ca f9 78 	sub	r10,sp,-1672
80007a52:	02 9b       	mov	r11,r1
80007a54:	08 9c       	mov	r12,r4
80007a56:	fe b0 f1 01 	rcall	80005c58 <__sprint_r>
80007a5a:	e0 81 00 8c 	brne	80007b72 <_vfprintf_r+0x1efe>
80007a5e:	fa c3 f9 e0 	sub	r3,sp,-1568
80007a62:	40 ea       	lddsp	r10,sp[0x38]
80007a64:	fa f8 06 90 	ld.w	r8,sp[1680]
80007a68:	14 08       	add	r8,r10
80007a6a:	fa c9 f9 64 	sub	r9,sp,-1692
80007a6e:	fb 48 06 90 	st.w	sp[1680],r8
80007a72:	87 1a       	st.w	r3[0x4],r10
80007a74:	fa f8 06 8c 	ld.w	r8,sp[1676]
80007a78:	87 09       	st.w	r3[0x0],r9
80007a7a:	2f f8       	sub	r8,-1
80007a7c:	fb 48 06 8c 	st.w	sp[1676],r8
80007a80:	58 78       	cp.w	r8,7
80007a82:	e0 89 00 04 	brgt	80007a8a <_vfprintf_r+0x1e16>
80007a86:	2f 83       	sub	r3,-8
80007a88:	c0 a8       	rjmp	80007a9c <_vfprintf_r+0x1e28>
80007a8a:	fa ca f9 78 	sub	r10,sp,-1672
80007a8e:	02 9b       	mov	r11,r1
80007a90:	08 9c       	mov	r12,r4
80007a92:	fe b0 f0 e3 	rcall	80005c58 <__sprint_r>
80007a96:	c6 e1       	brne	80007b72 <_vfprintf_r+0x1efe>
80007a98:	fa c3 f9 e0 	sub	r3,sp,-1568
80007a9c:	e2 15 00 04 	andl	r5,0x4,COH
80007aa0:	c3 f0       	breq	80007b1e <_vfprintf_r+0x1eaa>
80007aa2:	40 86       	lddsp	r6,sp[0x20]
80007aa4:	40 39       	lddsp	r9,sp[0xc]
80007aa6:	12 16       	sub	r6,r9
80007aa8:	58 06       	cp.w	r6,0
80007aaa:	e0 89 00 1a 	brgt	80007ade <_vfprintf_r+0x1e6a>
80007aae:	c3 88       	rjmp	80007b1e <_vfprintf_r+0x1eaa>
80007ab0:	2f 09       	sub	r9,-16
80007ab2:	2f f8       	sub	r8,-1
80007ab4:	fb 49 06 90 	st.w	sp[1680],r9
80007ab8:	87 05       	st.w	r3[0x0],r5
80007aba:	87 12       	st.w	r3[0x4],r2
80007abc:	fb 48 06 8c 	st.w	sp[1676],r8
80007ac0:	58 78       	cp.w	r8,7
80007ac2:	e0 89 00 04 	brgt	80007aca <_vfprintf_r+0x1e56>
80007ac6:	2f 83       	sub	r3,-8
80007ac8:	c0 98       	rjmp	80007ada <_vfprintf_r+0x1e66>
80007aca:	00 9a       	mov	r10,r0
80007acc:	02 9b       	mov	r11,r1
80007ace:	08 9c       	mov	r12,r4
80007ad0:	fe b0 f0 c4 	rcall	80005c58 <__sprint_r>
80007ad4:	c4 f1       	brne	80007b72 <_vfprintf_r+0x1efe>
80007ad6:	fa c3 f9 e0 	sub	r3,sp,-1568
80007ada:	21 06       	sub	r6,16
80007adc:	c0 68       	rjmp	80007ae8 <_vfprintf_r+0x1e74>
80007ade:	fe c5 cd ae 	sub	r5,pc,-12882
80007ae2:	31 02       	mov	r2,16
80007ae4:	fa c0 f9 78 	sub	r0,sp,-1672
80007ae8:	fa f9 06 90 	ld.w	r9,sp[1680]
80007aec:	fa f8 06 8c 	ld.w	r8,sp[1676]
80007af0:	fe ca cd c0 	sub	r10,pc,-12864
80007af4:	59 06       	cp.w	r6,16
80007af6:	fe 99 ff dd 	brgt	80007ab0 <_vfprintf_r+0x1e3c>
80007afa:	0c 09       	add	r9,r6
80007afc:	2f f8       	sub	r8,-1
80007afe:	87 0a       	st.w	r3[0x0],r10
80007b00:	87 16       	st.w	r3[0x4],r6
80007b02:	fb 49 06 90 	st.w	sp[1680],r9
80007b06:	fb 48 06 8c 	st.w	sp[1676],r8
80007b0a:	58 78       	cp.w	r8,7
80007b0c:	e0 8a 00 09 	brle	80007b1e <_vfprintf_r+0x1eaa>
80007b10:	fa ca f9 78 	sub	r10,sp,-1672
80007b14:	02 9b       	mov	r11,r1
80007b16:	08 9c       	mov	r12,r4
80007b18:	fe b0 f0 a0 	rcall	80005c58 <__sprint_r>
80007b1c:	c2 b1       	brne	80007b72 <_vfprintf_r+0x1efe>
80007b1e:	40 bc       	lddsp	r12,sp[0x2c]
80007b20:	40 36       	lddsp	r6,sp[0xc]
80007b22:	40 8e       	lddsp	lr,sp[0x20]
80007b24:	ec 0e 0c 48 	max	r8,r6,lr
80007b28:	10 0c       	add	r12,r8
80007b2a:	50 bc       	stdsp	sp[0x2c],r12
80007b2c:	fa f8 06 90 	ld.w	r8,sp[1680]
80007b30:	58 08       	cp.w	r8,0
80007b32:	c0 80       	breq	80007b42 <_vfprintf_r+0x1ece>
80007b34:	fa ca f9 78 	sub	r10,sp,-1672
80007b38:	02 9b       	mov	r11,r1
80007b3a:	08 9c       	mov	r12,r4
80007b3c:	fe b0 f0 8e 	rcall	80005c58 <__sprint_r>
80007b40:	c1 91       	brne	80007b72 <_vfprintf_r+0x1efe>
80007b42:	30 0b       	mov	r11,0
80007b44:	fa c3 f9 e0 	sub	r3,sp,-1568
80007b48:	fb 4b 06 8c 	st.w	sp[1676],r11
80007b4c:	fe 9f f1 22 	bral	80005d90 <_vfprintf_r+0x11c>
80007b50:	08 95       	mov	r5,r4
80007b52:	fa f8 06 90 	ld.w	r8,sp[1680]
80007b56:	58 08       	cp.w	r8,0
80007b58:	c0 80       	breq	80007b68 <_vfprintf_r+0x1ef4>
80007b5a:	08 9c       	mov	r12,r4
80007b5c:	fa ca f9 78 	sub	r10,sp,-1672
80007b60:	02 9b       	mov	r11,r1
80007b62:	fe b0 f0 7b 	rcall	80005c58 <__sprint_r>
80007b66:	c0 61       	brne	80007b72 <_vfprintf_r+0x1efe>
80007b68:	30 08       	mov	r8,0
80007b6a:	fb 48 06 8c 	st.w	sp[1676],r8
80007b6e:	c0 28       	rjmp	80007b72 <_vfprintf_r+0x1efe>
80007b70:	40 41       	lddsp	r1,sp[0x10]
80007b72:	82 68       	ld.sh	r8,r1[0xc]
80007b74:	ed b8 00 06 	bld	r8,0x6
80007b78:	c0 31       	brne	80007b7e <_vfprintf_r+0x1f0a>
80007b7a:	3f fa       	mov	r10,-1
80007b7c:	50 ba       	stdsp	sp[0x2c],r10
80007b7e:	40 bc       	lddsp	r12,sp[0x2c]
80007b80:	fe 3d f9 44 	sub	sp,-1724
80007b84:	d8 32       	popm	r0-r7,pc
80007b86:	d7 03       	nop

80007b88 <_write_r>:
80007b88:	d4 21       	pushm	r4-r7,lr
80007b8a:	16 98       	mov	r8,r11
80007b8c:	18 97       	mov	r7,r12
80007b8e:	10 9c       	mov	r12,r8
80007b90:	30 08       	mov	r8,0
80007b92:	14 9b       	mov	r11,r10
80007b94:	e0 66 08 34 	mov	r6,2100
80007b98:	12 9a       	mov	r10,r9
80007b9a:	8d 08       	st.w	r6[0x0],r8
80007b9c:	fe b0 df b8 	rcall	80003b0c <_write>
80007ba0:	5b fc       	cp.w	r12,-1
80007ba2:	c0 51       	brne	80007bac <_write_r+0x24>
80007ba4:	6c 08       	ld.w	r8,r6[0x0]
80007ba6:	58 08       	cp.w	r8,0
80007ba8:	ef f8 1a 03 	st.wne	r7[0xc],r8
80007bac:	d8 22       	popm	r4-r7,pc
80007bae:	d7 03       	nop

80007bb0 <__swsetup_r>:
80007bb0:	d4 21       	pushm	r4-r7,lr
80007bb2:	e0 68 01 30 	mov	r8,304
80007bb6:	18 96       	mov	r6,r12
80007bb8:	16 97       	mov	r7,r11
80007bba:	70 0c       	ld.w	r12,r8[0x0]
80007bbc:	58 0c       	cp.w	r12,0
80007bbe:	c0 60       	breq	80007bca <__swsetup_r+0x1a>
80007bc0:	78 68       	ld.w	r8,r12[0x18]
80007bc2:	58 08       	cp.w	r8,0
80007bc4:	c0 31       	brne	80007bca <__swsetup_r+0x1a>
80007bc6:	fe b0 ec db 	rcall	8000557c <__sinit>
80007bca:	fe c8 d1 ae 	sub	r8,pc,-11858
80007bce:	10 37       	cp.w	r7,r8
80007bd0:	c0 61       	brne	80007bdc <__swsetup_r+0x2c>
80007bd2:	e0 68 01 30 	mov	r8,304
80007bd6:	70 08       	ld.w	r8,r8[0x0]
80007bd8:	70 07       	ld.w	r7,r8[0x0]
80007bda:	c1 28       	rjmp	80007bfe <__swsetup_r+0x4e>
80007bdc:	fe c8 d1 a0 	sub	r8,pc,-11872
80007be0:	10 37       	cp.w	r7,r8
80007be2:	c0 61       	brne	80007bee <__swsetup_r+0x3e>
80007be4:	e0 68 01 30 	mov	r8,304
80007be8:	70 08       	ld.w	r8,r8[0x0]
80007bea:	70 17       	ld.w	r7,r8[0x4]
80007bec:	c0 98       	rjmp	80007bfe <__swsetup_r+0x4e>
80007bee:	fe c8 d1 92 	sub	r8,pc,-11886
80007bf2:	10 37       	cp.w	r7,r8
80007bf4:	c0 51       	brne	80007bfe <__swsetup_r+0x4e>
80007bf6:	e0 68 01 30 	mov	r8,304
80007bfa:	70 08       	ld.w	r8,r8[0x0]
80007bfc:	70 27       	ld.w	r7,r8[0x8]
80007bfe:	8e 68       	ld.sh	r8,r7[0xc]
80007c00:	ed b8 00 03 	bld	r8,0x3
80007c04:	c1 e0       	breq	80007c40 <__swsetup_r+0x90>
80007c06:	ed b8 00 04 	bld	r8,0x4
80007c0a:	c3 e1       	brne	80007c86 <__swsetup_r+0xd6>
80007c0c:	ed b8 00 02 	bld	r8,0x2
80007c10:	c1 51       	brne	80007c3a <__swsetup_r+0x8a>
80007c12:	6e db       	ld.w	r11,r7[0x34]
80007c14:	58 0b       	cp.w	r11,0
80007c16:	c0 a0       	breq	80007c2a <__swsetup_r+0x7a>
80007c18:	ee c8 ff bc 	sub	r8,r7,-68
80007c1c:	10 3b       	cp.w	r11,r8
80007c1e:	c0 40       	breq	80007c26 <__swsetup_r+0x76>
80007c20:	0c 9c       	mov	r12,r6
80007c22:	fe b0 ed 47 	rcall	800056b0 <_free_r>
80007c26:	30 08       	mov	r8,0
80007c28:	8f d8       	st.w	r7[0x34],r8
80007c2a:	8e 68       	ld.sh	r8,r7[0xc]
80007c2c:	e0 18 ff db 	andl	r8,0xffdb
80007c30:	ae 68       	st.h	r7[0xc],r8
80007c32:	30 08       	mov	r8,0
80007c34:	8f 18       	st.w	r7[0x4],r8
80007c36:	6e 48       	ld.w	r8,r7[0x10]
80007c38:	8f 08       	st.w	r7[0x0],r8
80007c3a:	8e 68       	ld.sh	r8,r7[0xc]
80007c3c:	a3 b8       	sbr	r8,0x3
80007c3e:	ae 68       	st.h	r7[0xc],r8
80007c40:	6e 48       	ld.w	r8,r7[0x10]
80007c42:	58 08       	cp.w	r8,0
80007c44:	c0 b1       	brne	80007c5a <__swsetup_r+0xaa>
80007c46:	8e 68       	ld.sh	r8,r7[0xc]
80007c48:	e2 18 02 80 	andl	r8,0x280,COH
80007c4c:	e0 48 02 00 	cp.w	r8,512
80007c50:	c0 50       	breq	80007c5a <__swsetup_r+0xaa>
80007c52:	0c 9c       	mov	r12,r6
80007c54:	0e 9b       	mov	r11,r7
80007c56:	e0 a0 08 f9 	rcall	80008e48 <__smakebuf_r>
80007c5a:	8e 69       	ld.sh	r9,r7[0xc]
80007c5c:	f1 d9 c0 01 	bfextu	r8,r9,0x0,0x1
80007c60:	c0 70       	breq	80007c6e <__swsetup_r+0xbe>
80007c62:	30 08       	mov	r8,0
80007c64:	8f 28       	st.w	r7[0x8],r8
80007c66:	6e 58       	ld.w	r8,r7[0x14]
80007c68:	5c 38       	neg	r8
80007c6a:	8f 68       	st.w	r7[0x18],r8
80007c6c:	c0 68       	rjmp	80007c78 <__swsetup_r+0xc8>
80007c6e:	ed b9 00 01 	bld	r9,0x1
80007c72:	ef f8 10 05 	ld.wne	r8,r7[0x14]
80007c76:	8f 28       	st.w	r7[0x8],r8
80007c78:	6e 48       	ld.w	r8,r7[0x10]
80007c7a:	58 08       	cp.w	r8,0
80007c7c:	c0 61       	brne	80007c88 <__swsetup_r+0xd8>
80007c7e:	8e 68       	ld.sh	r8,r7[0xc]
80007c80:	ed b8 00 07 	bld	r8,0x7
80007c84:	c0 21       	brne	80007c88 <__swsetup_r+0xd8>
80007c86:	dc 2a       	popm	r4-r7,pc,r12=-1
80007c88:	d8 2a       	popm	r4-r7,pc,r12=0
80007c8a:	d7 03       	nop

80007c8c <_close_r>:
80007c8c:	d4 21       	pushm	r4-r7,lr
80007c8e:	30 08       	mov	r8,0
80007c90:	18 97       	mov	r7,r12
80007c92:	e0 66 08 34 	mov	r6,2100
80007c96:	16 9c       	mov	r12,r11
80007c98:	8d 08       	st.w	r6[0x0],r8
80007c9a:	fe b0 ea d5 	rcall	80005244 <_close>
80007c9e:	5b fc       	cp.w	r12,-1
80007ca0:	c0 51       	brne	80007caa <_close_r+0x1e>
80007ca2:	6c 08       	ld.w	r8,r6[0x0]
80007ca4:	58 08       	cp.w	r8,0
80007ca6:	ef f8 1a 03 	st.wne	r7[0xc],r8
80007caa:	d8 22       	popm	r4-r7,pc

80007cac <quorem>:
80007cac:	d4 31       	pushm	r0-r7,lr
80007cae:	20 2d       	sub	sp,8
80007cb0:	18 97       	mov	r7,r12
80007cb2:	78 48       	ld.w	r8,r12[0x10]
80007cb4:	76 46       	ld.w	r6,r11[0x10]
80007cb6:	0c 38       	cp.w	r8,r6
80007cb8:	c0 34       	brge	80007cbe <quorem+0x12>
80007cba:	30 0c       	mov	r12,0
80007cbc:	c8 58       	rjmp	80007dc6 <quorem+0x11a>
80007cbe:	ec c2 ff fc 	sub	r2,r6,-4
80007cc2:	f6 c3 ff ec 	sub	r3,r11,-20
80007cc6:	f6 02 03 29 	ld.w	r9,r11[r2<<0x2]
80007cca:	f8 02 03 2c 	ld.w	r12,r12[r2<<0x2]
80007cce:	2f f9       	sub	r9,-1
80007cd0:	20 16       	sub	r6,1
80007cd2:	f8 09 0d 08 	divu	r8,r12,r9
80007cd6:	f6 02 00 22 	add	r2,r11,r2<<0x2
80007cda:	ee c4 ff ec 	sub	r4,r7,-20
80007cde:	10 95       	mov	r5,r8
80007ce0:	58 08       	cp.w	r8,0
80007ce2:	c4 10       	breq	80007d64 <quorem+0xb8>
80007ce4:	30 09       	mov	r9,0
80007ce6:	06 9a       	mov	r10,r3
80007ce8:	08 98       	mov	r8,r4
80007cea:	12 91       	mov	r1,r9
80007cec:	50 0b       	stdsp	sp[0x0],r11
80007cee:	70 0e       	ld.w	lr,r8[0x0]
80007cf0:	b1 8e       	lsr	lr,0x10
80007cf2:	50 1e       	stdsp	sp[0x4],lr
80007cf4:	15 0e       	ld.w	lr,r10++
80007cf6:	fc 00 16 10 	lsr	r0,lr,0x10
80007cfa:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
80007cfe:	ea 0e 03 41 	mac	r1,r5,lr
80007d02:	fd d1 c0 10 	bfextu	lr,r1,0x0,0x10
80007d06:	b1 81       	lsr	r1,0x10
80007d08:	40 1b       	lddsp	r11,sp[0x4]
80007d0a:	ea 00 02 40 	mul	r0,r5,r0
80007d0e:	e2 00 00 00 	add	r0,r1,r0
80007d12:	e3 d0 c0 10 	bfextu	r1,r0,0x0,0x10
80007d16:	02 1b       	sub	r11,r1
80007d18:	50 1b       	stdsp	sp[0x4],r11
80007d1a:	70 0b       	ld.w	r11,r8[0x0]
80007d1c:	e3 db c0 10 	bfextu	r1,r11,0x0,0x10
80007d20:	02 09       	add	r9,r1
80007d22:	f2 0e 01 0e 	sub	lr,r9,lr
80007d26:	b0 1e       	st.h	r8[0x2],lr
80007d28:	fc 09 14 10 	asr	r9,lr,0x10
80007d2c:	40 1e       	lddsp	lr,sp[0x4]
80007d2e:	fc 09 00 09 	add	r9,lr,r9
80007d32:	b0 09       	st.h	r8[0x0],r9
80007d34:	e0 01 16 10 	lsr	r1,r0,0x10
80007d38:	2f c8       	sub	r8,-4
80007d3a:	b1 49       	asr	r9,0x10
80007d3c:	04 3a       	cp.w	r10,r2
80007d3e:	fe 98 ff d8 	brls	80007cee <quorem+0x42>
80007d42:	40 0b       	lddsp	r11,sp[0x0]
80007d44:	58 0c       	cp.w	r12,0
80007d46:	c0 f1       	brne	80007d64 <quorem+0xb8>
80007d48:	ec c8 ff fb 	sub	r8,r6,-5
80007d4c:	ee 08 00 28 	add	r8,r7,r8<<0x2
80007d50:	c0 28       	rjmp	80007d54 <quorem+0xa8>
80007d52:	20 16       	sub	r6,1
80007d54:	20 48       	sub	r8,4
80007d56:	08 38       	cp.w	r8,r4
80007d58:	e0 88 00 05 	brls	80007d62 <quorem+0xb6>
80007d5c:	70 09       	ld.w	r9,r8[0x0]
80007d5e:	58 09       	cp.w	r9,0
80007d60:	cf 90       	breq	80007d52 <quorem+0xa6>
80007d62:	8f 46       	st.w	r7[0x10],r6
80007d64:	0e 9c       	mov	r12,r7
80007d66:	e0 a0 09 51 	rcall	80009008 <__mcmp>
80007d6a:	c2 d5       	brlt	80007dc4 <quorem+0x118>
80007d6c:	2f f5       	sub	r5,-1
80007d6e:	08 98       	mov	r8,r4
80007d70:	30 09       	mov	r9,0
80007d72:	07 0b       	ld.w	r11,r3++
80007d74:	f6 0a 16 10 	lsr	r10,r11,0x10
80007d78:	70 0c       	ld.w	r12,r8[0x0]
80007d7a:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
80007d7e:	f8 0e 16 10 	lsr	lr,r12,0x10
80007d82:	14 1e       	sub	lr,r10
80007d84:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
80007d88:	16 1a       	sub	r10,r11
80007d8a:	12 0a       	add	r10,r9
80007d8c:	b0 1a       	st.h	r8[0x2],r10
80007d8e:	b1 4a       	asr	r10,0x10
80007d90:	fc 0a 00 09 	add	r9,lr,r10
80007d94:	b0 09       	st.h	r8[0x0],r9
80007d96:	2f c8       	sub	r8,-4
80007d98:	b1 49       	asr	r9,0x10
80007d9a:	04 33       	cp.w	r3,r2
80007d9c:	fe 98 ff eb 	brls	80007d72 <quorem+0xc6>
80007da0:	ec c8 ff fb 	sub	r8,r6,-5
80007da4:	ee 08 03 29 	ld.w	r9,r7[r8<<0x2]
80007da8:	58 09       	cp.w	r9,0
80007daa:	c0 d1       	brne	80007dc4 <quorem+0x118>
80007dac:	ee 08 00 28 	add	r8,r7,r8<<0x2
80007db0:	c0 28       	rjmp	80007db4 <quorem+0x108>
80007db2:	20 16       	sub	r6,1
80007db4:	20 48       	sub	r8,4
80007db6:	08 38       	cp.w	r8,r4
80007db8:	e0 88 00 05 	brls	80007dc2 <quorem+0x116>
80007dbc:	70 09       	ld.w	r9,r8[0x0]
80007dbe:	58 09       	cp.w	r9,0
80007dc0:	cf 90       	breq	80007db2 <quorem+0x106>
80007dc2:	8f 46       	st.w	r7[0x10],r6
80007dc4:	0a 9c       	mov	r12,r5
80007dc6:	2f ed       	sub	sp,-8
80007dc8:	d8 32       	popm	r0-r7,pc
80007dca:	d7 03       	nop

80007dcc <_dtoa_r>:
80007dcc:	d4 31       	pushm	r0-r7,lr
80007dce:	21 ad       	sub	sp,104
80007dd0:	fa c4 ff 74 	sub	r4,sp,-140
80007dd4:	18 97       	mov	r7,r12
80007dd6:	16 95       	mov	r5,r11
80007dd8:	68 2c       	ld.w	r12,r4[0x8]
80007dda:	50 c9       	stdsp	sp[0x30],r9
80007ddc:	68 16       	ld.w	r6,r4[0x4]
80007dde:	68 09       	ld.w	r9,r4[0x0]
80007de0:	50 e8       	stdsp	sp[0x38],r8
80007de2:	14 94       	mov	r4,r10
80007de4:	51 2c       	stdsp	sp[0x48],r12
80007de6:	fa e5 00 08 	st.d	sp[8],r4
80007dea:	51 59       	stdsp	sp[0x54],r9
80007dec:	6e 95       	ld.w	r5,r7[0x24]
80007dee:	58 05       	cp.w	r5,0
80007df0:	c0 91       	brne	80007e02 <_dtoa_r+0x36>
80007df2:	31 0c       	mov	r12,16
80007df4:	fe b0 e5 c2 	rcall	80004978 <malloc>
80007df8:	99 35       	st.w	r12[0xc],r5
80007dfa:	8f 9c       	st.w	r7[0x24],r12
80007dfc:	99 15       	st.w	r12[0x4],r5
80007dfe:	99 25       	st.w	r12[0x8],r5
80007e00:	99 05       	st.w	r12[0x0],r5
80007e02:	6e 99       	ld.w	r9,r7[0x24]
80007e04:	72 08       	ld.w	r8,r9[0x0]
80007e06:	58 08       	cp.w	r8,0
80007e08:	c0 f0       	breq	80007e26 <_dtoa_r+0x5a>
80007e0a:	72 1a       	ld.w	r10,r9[0x4]
80007e0c:	91 1a       	st.w	r8[0x4],r10
80007e0e:	30 1a       	mov	r10,1
80007e10:	72 19       	ld.w	r9,r9[0x4]
80007e12:	f4 09 09 49 	lsl	r9,r10,r9
80007e16:	10 9b       	mov	r11,r8
80007e18:	91 29       	st.w	r8[0x8],r9
80007e1a:	0e 9c       	mov	r12,r7
80007e1c:	e0 a0 09 10 	rcall	8000903c <_Bfree>
80007e20:	6e 98       	ld.w	r8,r7[0x24]
80007e22:	30 09       	mov	r9,0
80007e24:	91 09       	st.w	r8[0x0],r9
80007e26:	40 28       	lddsp	r8,sp[0x8]
80007e28:	10 94       	mov	r4,r8
80007e2a:	58 08       	cp.w	r8,0
80007e2c:	c0 64       	brge	80007e38 <_dtoa_r+0x6c>
80007e2e:	f1 d8 c0 1f 	bfextu	r8,r8,0x0,0x1f
80007e32:	50 28       	stdsp	sp[0x8],r8
80007e34:	30 18       	mov	r8,1
80007e36:	c0 28       	rjmp	80007e3a <_dtoa_r+0x6e>
80007e38:	30 08       	mov	r8,0
80007e3a:	8d 08       	st.w	r6[0x0],r8
80007e3c:	fc 1c 7f f0 	movh	r12,0x7ff0
80007e40:	40 26       	lddsp	r6,sp[0x8]
80007e42:	0c 98       	mov	r8,r6
80007e44:	e6 18 7f f0 	andh	r8,0x7ff0,COH
80007e48:	18 38       	cp.w	r8,r12
80007e4a:	c2 01       	brne	80007e8a <_dtoa_r+0xbe>
80007e4c:	e0 68 27 0f 	mov	r8,9999
80007e50:	41 5b       	lddsp	r11,sp[0x54]
80007e52:	97 08       	st.w	r11[0x0],r8
80007e54:	40 3a       	lddsp	r10,sp[0xc]
80007e56:	58 0a       	cp.w	r10,0
80007e58:	c0 71       	brne	80007e66 <_dtoa_r+0x9a>
80007e5a:	ed d6 c0 14 	bfextu	r6,r6,0x0,0x14
80007e5e:	c0 41       	brne	80007e66 <_dtoa_r+0x9a>
80007e60:	fe cc d0 10 	sub	r12,pc,-12272
80007e64:	c0 38       	rjmp	80007e6a <_dtoa_r+0x9e>
80007e66:	fe cc d0 0a 	sub	r12,pc,-12278
80007e6a:	41 29       	lddsp	r9,sp[0x48]
80007e6c:	58 09       	cp.w	r9,0
80007e6e:	e0 80 05 9a 	breq	800089a2 <_dtoa_r+0xbd6>
80007e72:	f8 c8 ff fd 	sub	r8,r12,-3
80007e76:	f8 c9 ff f8 	sub	r9,r12,-8
80007e7a:	11 8b       	ld.ub	r11,r8[0x0]
80007e7c:	30 0a       	mov	r10,0
80007e7e:	41 25       	lddsp	r5,sp[0x48]
80007e80:	f4 0b 18 00 	cp.b	r11,r10
80007e84:	f2 08 17 10 	movne	r8,r9
80007e88:	c1 68       	rjmp	80007eb4 <_dtoa_r+0xe8>
80007e8a:	fa ea 00 08 	ld.d	r10,sp[8]
80007e8e:	30 08       	mov	r8,0
80007e90:	fa eb 00 3c 	st.d	sp[60],r10
80007e94:	30 09       	mov	r9,0
80007e96:	e0 a0 0e 6e 	rcall	80009b72 <__avr32_f64_cmp_eq>
80007e9a:	c1 00       	breq	80007eba <_dtoa_r+0xee>
80007e9c:	30 18       	mov	r8,1
80007e9e:	41 5a       	lddsp	r10,sp[0x54]
80007ea0:	95 08       	st.w	r10[0x0],r8
80007ea2:	fe cc d1 76 	sub	r12,pc,-11914
80007ea6:	41 29       	lddsp	r9,sp[0x48]
80007ea8:	f8 08 00 08 	add	r8,r12,r8
80007eac:	58 09       	cp.w	r9,0
80007eae:	e0 80 05 7a 	breq	800089a2 <_dtoa_r+0xbd6>
80007eb2:	12 95       	mov	r5,r9
80007eb4:	8b 08       	st.w	r5[0x0],r8
80007eb6:	e0 8f 05 76 	bral	800089a2 <_dtoa_r+0xbd6>
80007eba:	fa c8 ff 9c 	sub	r8,sp,-100
80007ebe:	fa c9 ff a0 	sub	r9,sp,-96
80007ec2:	fa ea 00 3c 	ld.d	r10,sp[60]
80007ec6:	0e 9c       	mov	r12,r7
80007ec8:	eb d6 c2 8b 	bfextu	r5,r6,0x14,0xb
80007ecc:	e0 a0 09 0a 	rcall	800090e0 <__d2b>
80007ed0:	18 93       	mov	r3,r12
80007ed2:	58 05       	cp.w	r5,0
80007ed4:	c0 d0       	breq	80007eee <_dtoa_r+0x122>
80007ed6:	fa ea 00 3c 	ld.d	r10,sp[60]
80007eda:	30 04       	mov	r4,0
80007edc:	f1 db c0 14 	bfextu	r8,r11,0x0,0x14
80007ee0:	ea c5 03 ff 	sub	r5,r5,1023
80007ee4:	10 9b       	mov	r11,r8
80007ee6:	51 74       	stdsp	sp[0x5c],r4
80007ee8:	ea 1b 3f f0 	orh	r11,0x3ff0
80007eec:	c2 58       	rjmp	80007f36 <_dtoa_r+0x16a>
80007eee:	41 88       	lddsp	r8,sp[0x60]
80007ef0:	41 9c       	lddsp	r12,sp[0x64]
80007ef2:	10 0c       	add	r12,r8
80007ef4:	f8 c5 fb ce 	sub	r5,r12,-1074
80007ef8:	e0 45 00 20 	cp.w	r5,32
80007efc:	e0 8a 00 0e 	brle	80007f18 <_dtoa_r+0x14c>
80007f00:	f8 cc fb ee 	sub	r12,r12,-1042
80007f04:	40 3b       	lddsp	r11,sp[0xc]
80007f06:	ea 08 11 40 	rsub	r8,r5,64
80007f0a:	f6 0c 0a 4c 	lsr	r12,r11,r12
80007f0e:	ec 08 09 46 	lsl	r6,r6,r8
80007f12:	0c 4c       	or	r12,r6
80007f14:	c0 78       	rjmp	80007f22 <_dtoa_r+0x156>
80007f16:	d7 03       	nop
80007f18:	ea 0c 11 20 	rsub	r12,r5,32
80007f1c:	40 3a       	lddsp	r10,sp[0xc]
80007f1e:	f4 0c 09 4c 	lsl	r12,r10,r12
80007f22:	e0 a0 0d b4 	rcall	80009a8a <__avr32_u32_to_f64>
80007f26:	fc 18 fe 10 	movh	r8,0xfe10
80007f2a:	30 19       	mov	r9,1
80007f2c:	ea c5 04 33 	sub	r5,r5,1075
80007f30:	f0 0b 00 0b 	add	r11,r8,r11
80007f34:	51 79       	stdsp	sp[0x5c],r9
80007f36:	30 08       	mov	r8,0
80007f38:	fc 19 3f f8 	movh	r9,0x3ff8
80007f3c:	e0 a0 0c 3c 	rcall	800097b4 <__avr32_f64_sub>
80007f40:	e0 68 43 61 	mov	r8,17249
80007f44:	ea 18 63 6f 	orh	r8,0x636f
80007f48:	e0 69 87 a7 	mov	r9,34727
80007f4c:	ea 19 3f d2 	orh	r9,0x3fd2
80007f50:	e0 a0 0b 46 	rcall	800095dc <__avr32_f64_mul>
80007f54:	e0 68 c8 b3 	mov	r8,51379
80007f58:	ea 18 8b 60 	orh	r8,0x8b60
80007f5c:	e0 69 8a 28 	mov	r9,35368
80007f60:	ea 19 3f c6 	orh	r9,0x3fc6
80007f64:	e0 a0 0c f6 	rcall	80009950 <__avr32_f64_add>
80007f68:	0a 9c       	mov	r12,r5
80007f6a:	14 90       	mov	r0,r10
80007f6c:	16 91       	mov	r1,r11
80007f6e:	e0 a0 0d 92 	rcall	80009a92 <__avr32_s32_to_f64>
80007f72:	e0 68 79 fb 	mov	r8,31227
80007f76:	ea 18 50 9f 	orh	r8,0x509f
80007f7a:	e0 69 44 13 	mov	r9,17427
80007f7e:	ea 19 3f d3 	orh	r9,0x3fd3
80007f82:	e0 a0 0b 2d 	rcall	800095dc <__avr32_f64_mul>
80007f86:	14 98       	mov	r8,r10
80007f88:	16 99       	mov	r9,r11
80007f8a:	00 9a       	mov	r10,r0
80007f8c:	02 9b       	mov	r11,r1
80007f8e:	e0 a0 0c e1 	rcall	80009950 <__avr32_f64_add>
80007f92:	14 90       	mov	r0,r10
80007f94:	16 91       	mov	r1,r11
80007f96:	e0 a0 0d 67 	rcall	80009a64 <__avr32_f64_to_s32>
80007f9a:	30 08       	mov	r8,0
80007f9c:	18 96       	mov	r6,r12
80007f9e:	30 09       	mov	r9,0
80007fa0:	00 9a       	mov	r10,r0
80007fa2:	02 9b       	mov	r11,r1
80007fa4:	e0 a0 0e 2e 	rcall	80009c00 <__avr32_f64_cmp_lt>
80007fa8:	c0 c0       	breq	80007fc0 <_dtoa_r+0x1f4>
80007faa:	0c 9c       	mov	r12,r6
80007fac:	e0 a0 0d 73 	rcall	80009a92 <__avr32_s32_to_f64>
80007fb0:	14 98       	mov	r8,r10
80007fb2:	16 99       	mov	r9,r11
80007fb4:	00 9a       	mov	r10,r0
80007fb6:	02 9b       	mov	r11,r1
80007fb8:	e0 a0 0d dd 	rcall	80009b72 <__avr32_f64_cmp_eq>
80007fbc:	f7 b6 00 01 	subeq	r6,1
80007fc0:	59 66       	cp.w	r6,22
80007fc2:	e0 88 00 05 	brls	80007fcc <_dtoa_r+0x200>
80007fc6:	30 18       	mov	r8,1
80007fc8:	51 48       	stdsp	sp[0x50],r8
80007fca:	c1 38       	rjmp	80007ff0 <_dtoa_r+0x224>
80007fcc:	fe c8 d1 20 	sub	r8,pc,-12000
80007fd0:	fa ea 00 3c 	ld.d	r10,sp[60]
80007fd4:	f0 06 02 38 	ld.d	r8,r8[r6<<0x3]
80007fd8:	e0 a0 0e 14 	rcall	80009c00 <__avr32_f64_cmp_lt>
80007fdc:	f9 b4 00 00 	moveq	r4,0
80007fe0:	fb f4 0a 14 	st.weq	sp[0x50],r4
80007fe4:	f7 b6 01 01 	subne	r6,1
80007fe8:	f9 bc 01 00 	movne	r12,0
80007fec:	fb fc 1a 14 	st.wne	sp[0x50],r12
80007ff0:	41 90       	lddsp	r0,sp[0x64]
80007ff2:	20 10       	sub	r0,1
80007ff4:	0a 10       	sub	r0,r5
80007ff6:	c0 46       	brmi	80007ffe <_dtoa_r+0x232>
80007ff8:	50 40       	stdsp	sp[0x10],r0
80007ffa:	30 00       	mov	r0,0
80007ffc:	c0 48       	rjmp	80008004 <_dtoa_r+0x238>
80007ffe:	30 0b       	mov	r11,0
80008000:	5c 30       	neg	r0
80008002:	50 4b       	stdsp	sp[0x10],r11
80008004:	ec 02 11 00 	rsub	r2,r6,0
80008008:	58 06       	cp.w	r6,0
8000800a:	fb fa 40 04 	ld.wge	r10,sp[0x10]
8000800e:	f5 d6 e4 0a 	addge	r10,r10,r6
80008012:	fb fa 4a 04 	st.wge	sp[0x10],r10
80008016:	fb f6 4a 11 	st.wge	sp[0x44],r6
8000801a:	f9 b2 04 00 	movge	r2,0
8000801e:	e1 d6 e5 10 	sublt	r0,r0,r6
80008022:	f9 b9 05 00 	movlt	r9,0
80008026:	fb f9 5a 11 	st.wlt	sp[0x44],r9
8000802a:	40 c8       	lddsp	r8,sp[0x30]
8000802c:	58 98       	cp.w	r8,9
8000802e:	e0 8b 00 20 	brhi	8000806e <_dtoa_r+0x2a2>
80008032:	58 58       	cp.w	r8,5
80008034:	f9 b4 0a 01 	movle	r4,1
80008038:	fb f5 90 0c 	ld.wgt	r5,sp[0x30]
8000803c:	f7 b5 09 04 	subgt	r5,4
80008040:	fb f5 9a 0c 	st.wgt	sp[0x30],r5
80008044:	f9 b4 09 00 	movgt	r4,0
80008048:	40 cc       	lddsp	r12,sp[0x30]
8000804a:	58 3c       	cp.w	r12,3
8000804c:	c2 d0       	breq	800080a6 <_dtoa_r+0x2da>
8000804e:	e0 89 00 05 	brgt	80008058 <_dtoa_r+0x28c>
80008052:	58 2c       	cp.w	r12,2
80008054:	c1 01       	brne	80008074 <_dtoa_r+0x2a8>
80008056:	c1 88       	rjmp	80008086 <_dtoa_r+0x2ba>
80008058:	40 cb       	lddsp	r11,sp[0x30]
8000805a:	58 4b       	cp.w	r11,4
8000805c:	c0 60       	breq	80008068 <_dtoa_r+0x29c>
8000805e:	58 5b       	cp.w	r11,5
80008060:	c0 a1       	brne	80008074 <_dtoa_r+0x2a8>
80008062:	30 1a       	mov	r10,1
80008064:	50 da       	stdsp	sp[0x34],r10
80008066:	c2 28       	rjmp	800080aa <_dtoa_r+0x2de>
80008068:	30 19       	mov	r9,1
8000806a:	50 d9       	stdsp	sp[0x34],r9
8000806c:	c0 f8       	rjmp	8000808a <_dtoa_r+0x2be>
8000806e:	30 08       	mov	r8,0
80008070:	30 14       	mov	r4,1
80008072:	50 c8       	stdsp	sp[0x30],r8
80008074:	3f f5       	mov	r5,-1
80008076:	30 1c       	mov	r12,1
80008078:	30 0b       	mov	r11,0
8000807a:	50 95       	stdsp	sp[0x24],r5
8000807c:	50 dc       	stdsp	sp[0x34],r12
8000807e:	0a 91       	mov	r1,r5
80008080:	31 28       	mov	r8,18
80008082:	50 eb       	stdsp	sp[0x38],r11
80008084:	c2 08       	rjmp	800080c4 <_dtoa_r+0x2f8>
80008086:	30 0a       	mov	r10,0
80008088:	50 da       	stdsp	sp[0x34],r10
8000808a:	40 e9       	lddsp	r9,sp[0x38]
8000808c:	58 09       	cp.w	r9,0
8000808e:	e0 89 00 07 	brgt	8000809c <_dtoa_r+0x2d0>
80008092:	30 18       	mov	r8,1
80008094:	50 98       	stdsp	sp[0x24],r8
80008096:	10 91       	mov	r1,r8
80008098:	50 e8       	stdsp	sp[0x38],r8
8000809a:	c1 58       	rjmp	800080c4 <_dtoa_r+0x2f8>
8000809c:	40 e5       	lddsp	r5,sp[0x38]
8000809e:	50 95       	stdsp	sp[0x24],r5
800080a0:	0a 91       	mov	r1,r5
800080a2:	0a 98       	mov	r8,r5
800080a4:	c1 08       	rjmp	800080c4 <_dtoa_r+0x2f8>
800080a6:	30 0c       	mov	r12,0
800080a8:	50 dc       	stdsp	sp[0x34],r12
800080aa:	40 eb       	lddsp	r11,sp[0x38]
800080ac:	ec 0b 00 0b 	add	r11,r6,r11
800080b0:	50 9b       	stdsp	sp[0x24],r11
800080b2:	16 98       	mov	r8,r11
800080b4:	2f f8       	sub	r8,-1
800080b6:	58 08       	cp.w	r8,0
800080b8:	e0 89 00 05 	brgt	800080c2 <_dtoa_r+0x2f6>
800080bc:	10 91       	mov	r1,r8
800080be:	30 18       	mov	r8,1
800080c0:	c0 28       	rjmp	800080c4 <_dtoa_r+0x2f8>
800080c2:	10 91       	mov	r1,r8
800080c4:	30 09       	mov	r9,0
800080c6:	6e 9a       	ld.w	r10,r7[0x24]
800080c8:	95 19       	st.w	r10[0x4],r9
800080ca:	30 49       	mov	r9,4
800080cc:	c0 68       	rjmp	800080d8 <_dtoa_r+0x30c>
800080ce:	d7 03       	nop
800080d0:	6a 1a       	ld.w	r10,r5[0x4]
800080d2:	a1 79       	lsl	r9,0x1
800080d4:	2f fa       	sub	r10,-1
800080d6:	8b 1a       	st.w	r5[0x4],r10
800080d8:	6e 95       	ld.w	r5,r7[0x24]
800080da:	f2 ca ff ec 	sub	r10,r9,-20
800080de:	10 3a       	cp.w	r10,r8
800080e0:	fe 98 ff f8 	brls	800080d0 <_dtoa_r+0x304>
800080e4:	6a 1b       	ld.w	r11,r5[0x4]
800080e6:	0e 9c       	mov	r12,r7
800080e8:	e0 a0 07 c4 	rcall	80009070 <_Balloc>
800080ec:	58 e1       	cp.w	r1,14
800080ee:	5f 88       	srls	r8
800080f0:	8b 0c       	st.w	r5[0x0],r12
800080f2:	f1 e4 00 04 	and	r4,r8,r4
800080f6:	6e 98       	ld.w	r8,r7[0x24]
800080f8:	70 08       	ld.w	r8,r8[0x0]
800080fa:	50 88       	stdsp	sp[0x20],r8
800080fc:	e0 80 01 82 	breq	80008400 <_dtoa_r+0x634>
80008100:	58 06       	cp.w	r6,0
80008102:	e0 8a 00 43 	brle	80008188 <_dtoa_r+0x3bc>
80008106:	f3 d6 c0 04 	bfextu	r9,r6,0x0,0x4
8000810a:	fe c8 d2 5e 	sub	r8,pc,-11682
8000810e:	f0 09 02 34 	ld.d	r4,r8[r9<<0x3]
80008112:	fa e5 00 18 	st.d	sp[24],r4
80008116:	ec 04 14 04 	asr	r4,r6,0x4
8000811a:	ed b4 00 04 	bld	r4,0x4
8000811e:	c0 30       	breq	80008124 <_dtoa_r+0x358>
80008120:	30 25       	mov	r5,2
80008122:	c1 08       	rjmp	80008142 <_dtoa_r+0x376>
80008124:	fe c8 d1 b0 	sub	r8,pc,-11856
80008128:	f0 e8 00 20 	ld.d	r8,r8[32]
8000812c:	fa ea 00 3c 	ld.d	r10,sp[60]
80008130:	e9 d4 c0 04 	bfextu	r4,r4,0x0,0x4
80008134:	e0 a0 0d 9a 	rcall	80009c68 <__avr32_f64_div>
80008138:	30 35       	mov	r5,3
8000813a:	14 98       	mov	r8,r10
8000813c:	16 99       	mov	r9,r11
8000813e:	fa e9 00 08 	st.d	sp[8],r8
80008142:	fe cc d1 ce 	sub	r12,pc,-11826
80008146:	50 a3       	stdsp	sp[0x28],r3
80008148:	0c 93       	mov	r3,r6
8000814a:	18 96       	mov	r6,r12
8000814c:	c0 f8       	rjmp	8000816a <_dtoa_r+0x39e>
8000814e:	fa ea 00 18 	ld.d	r10,sp[24]
80008152:	ed b4 00 00 	bld	r4,0x0
80008156:	c0 81       	brne	80008166 <_dtoa_r+0x39a>
80008158:	ec e8 00 00 	ld.d	r8,r6[0]
8000815c:	2f f5       	sub	r5,-1
8000815e:	e0 a0 0a 3f 	rcall	800095dc <__avr32_f64_mul>
80008162:	fa eb 00 18 	st.d	sp[24],r10
80008166:	a1 54       	asr	r4,0x1
80008168:	2f 86       	sub	r6,-8
8000816a:	58 04       	cp.w	r4,0
8000816c:	cf 11       	brne	8000814e <_dtoa_r+0x382>
8000816e:	fa e8 00 18 	ld.d	r8,sp[24]
80008172:	fa ea 00 08 	ld.d	r10,sp[8]
80008176:	06 96       	mov	r6,r3
80008178:	e0 a0 0d 78 	rcall	80009c68 <__avr32_f64_div>
8000817c:	40 a3       	lddsp	r3,sp[0x28]
8000817e:	14 98       	mov	r8,r10
80008180:	16 99       	mov	r9,r11
80008182:	fa e9 00 08 	st.d	sp[8],r8
80008186:	c2 f8       	rjmp	800081e4 <_dtoa_r+0x418>
80008188:	ec 08 11 00 	rsub	r8,r6,0
8000818c:	c0 31       	brne	80008192 <_dtoa_r+0x3c6>
8000818e:	30 25       	mov	r5,2
80008190:	c2 a8       	rjmp	800081e4 <_dtoa_r+0x418>
80008192:	fe cc d2 1e 	sub	r12,pc,-11746
80008196:	f0 04 14 04 	asr	r4,r8,0x4
8000819a:	50 1c       	stdsp	sp[0x4],r12
8000819c:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
800081a0:	fe c9 d2 f4 	sub	r9,pc,-11532
800081a4:	fa ea 00 3c 	ld.d	r10,sp[60]
800081a8:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
800081ac:	e0 a0 0a 18 	rcall	800095dc <__avr32_f64_mul>
800081b0:	40 1c       	lddsp	r12,sp[0x4]
800081b2:	50 63       	stdsp	sp[0x18],r3
800081b4:	30 25       	mov	r5,2
800081b6:	0c 93       	mov	r3,r6
800081b8:	fa eb 00 08 	st.d	sp[8],r10
800081bc:	18 96       	mov	r6,r12
800081be:	c0 f8       	rjmp	800081dc <_dtoa_r+0x410>
800081c0:	fa ea 00 08 	ld.d	r10,sp[8]
800081c4:	ed b4 00 00 	bld	r4,0x0
800081c8:	c0 81       	brne	800081d8 <_dtoa_r+0x40c>
800081ca:	ec e8 00 00 	ld.d	r8,r6[0]
800081ce:	2f f5       	sub	r5,-1
800081d0:	e0 a0 0a 06 	rcall	800095dc <__avr32_f64_mul>
800081d4:	fa eb 00 08 	st.d	sp[8],r10
800081d8:	a1 54       	asr	r4,0x1
800081da:	2f 86       	sub	r6,-8
800081dc:	58 04       	cp.w	r4,0
800081de:	cf 11       	brne	800081c0 <_dtoa_r+0x3f4>
800081e0:	06 96       	mov	r6,r3
800081e2:	40 63       	lddsp	r3,sp[0x18]
800081e4:	41 4a       	lddsp	r10,sp[0x50]
800081e6:	58 0a       	cp.w	r10,0
800081e8:	c2 a0       	breq	8000823c <_dtoa_r+0x470>
800081ea:	fa e8 00 08 	ld.d	r8,sp[8]
800081ee:	58 01       	cp.w	r1,0
800081f0:	5f 94       	srgt	r4
800081f2:	fa e9 00 18 	st.d	sp[24],r8
800081f6:	30 08       	mov	r8,0
800081f8:	fc 19 3f f0 	movh	r9,0x3ff0
800081fc:	fa ea 00 18 	ld.d	r10,sp[24]
80008200:	e0 a0 0d 00 	rcall	80009c00 <__avr32_f64_cmp_lt>
80008204:	f9 bc 00 00 	moveq	r12,0
80008208:	f9 bc 01 01 	movne	r12,1
8000820c:	e9 ec 00 0c 	and	r12,r4,r12
80008210:	c1 60       	breq	8000823c <_dtoa_r+0x470>
80008212:	40 98       	lddsp	r8,sp[0x24]
80008214:	58 08       	cp.w	r8,0
80008216:	e0 8a 00 f1 	brle	800083f8 <_dtoa_r+0x62c>
8000821a:	30 08       	mov	r8,0
8000821c:	fc 19 40 24 	movh	r9,0x4024
80008220:	ec c4 00 01 	sub	r4,r6,1
80008224:	fa ea 00 18 	ld.d	r10,sp[24]
80008228:	2f f5       	sub	r5,-1
8000822a:	50 64       	stdsp	sp[0x18],r4
8000822c:	e0 a0 09 d8 	rcall	800095dc <__avr32_f64_mul>
80008230:	40 94       	lddsp	r4,sp[0x24]
80008232:	14 98       	mov	r8,r10
80008234:	16 99       	mov	r9,r11
80008236:	fa e9 00 08 	st.d	sp[8],r8
8000823a:	c0 38       	rjmp	80008240 <_dtoa_r+0x474>
8000823c:	50 66       	stdsp	sp[0x18],r6
8000823e:	02 94       	mov	r4,r1
80008240:	0a 9c       	mov	r12,r5
80008242:	e0 a0 0c 28 	rcall	80009a92 <__avr32_s32_to_f64>
80008246:	fa e8 00 08 	ld.d	r8,sp[8]
8000824a:	e0 a0 09 c9 	rcall	800095dc <__avr32_f64_mul>
8000824e:	30 08       	mov	r8,0
80008250:	fc 19 40 1c 	movh	r9,0x401c
80008254:	e0 a0 0b 7e 	rcall	80009950 <__avr32_f64_add>
80008258:	14 98       	mov	r8,r10
8000825a:	16 99       	mov	r9,r11
8000825c:	fa e9 00 28 	st.d	sp[40],r8
80008260:	fc 18 fc c0 	movh	r8,0xfcc0
80008264:	40 a5       	lddsp	r5,sp[0x28]
80008266:	10 05       	add	r5,r8
80008268:	50 a5       	stdsp	sp[0x28],r5
8000826a:	58 04       	cp.w	r4,0
8000826c:	c2 11       	brne	800082ae <_dtoa_r+0x4e2>
8000826e:	fa ea 00 08 	ld.d	r10,sp[8]
80008272:	30 08       	mov	r8,0
80008274:	fc 19 40 14 	movh	r9,0x4014
80008278:	e0 a0 0a 9e 	rcall	800097b4 <__avr32_f64_sub>
8000827c:	40 bc       	lddsp	r12,sp[0x2c]
8000827e:	fa eb 00 08 	st.d	sp[8],r10
80008282:	14 98       	mov	r8,r10
80008284:	16 99       	mov	r9,r11
80008286:	18 9a       	mov	r10,r12
80008288:	0a 9b       	mov	r11,r5
8000828a:	e0 a0 0c bb 	rcall	80009c00 <__avr32_f64_cmp_lt>
8000828e:	e0 81 02 54 	brne	80008736 <_dtoa_r+0x96a>
80008292:	0a 98       	mov	r8,r5
80008294:	40 b9       	lddsp	r9,sp[0x2c]
80008296:	ee 18 80 00 	eorh	r8,0x8000
8000829a:	fa ea 00 08 	ld.d	r10,sp[8]
8000829e:	10 95       	mov	r5,r8
800082a0:	12 98       	mov	r8,r9
800082a2:	0a 99       	mov	r9,r5
800082a4:	e0 a0 0c ae 	rcall	80009c00 <__avr32_f64_cmp_lt>
800082a8:	e0 81 02 3e 	brne	80008724 <_dtoa_r+0x958>
800082ac:	ca 68       	rjmp	800083f8 <_dtoa_r+0x62c>
800082ae:	fe c9 d4 02 	sub	r9,pc,-11262
800082b2:	e8 c8 00 01 	sub	r8,r4,1
800082b6:	40 d5       	lddsp	r5,sp[0x34]
800082b8:	58 05       	cp.w	r5,0
800082ba:	c4 f0       	breq	80008358 <_dtoa_r+0x58c>
800082bc:	30 0c       	mov	r12,0
800082be:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
800082c2:	51 3c       	stdsp	sp[0x4c],r12
800082c4:	30 0a       	mov	r10,0
800082c6:	fc 1b 3f e0 	movh	r11,0x3fe0
800082ca:	e0 a0 0c cf 	rcall	80009c68 <__avr32_f64_div>
800082ce:	fa e8 00 28 	ld.d	r8,sp[40]
800082d2:	40 85       	lddsp	r5,sp[0x20]
800082d4:	e0 a0 0a 70 	rcall	800097b4 <__avr32_f64_sub>
800082d8:	fa eb 00 28 	st.d	sp[40],r10
800082dc:	fa ea 00 08 	ld.d	r10,sp[8]
800082e0:	e0 a0 0b c2 	rcall	80009a64 <__avr32_f64_to_s32>
800082e4:	51 6c       	stdsp	sp[0x58],r12
800082e6:	e0 a0 0b d6 	rcall	80009a92 <__avr32_s32_to_f64>
800082ea:	14 98       	mov	r8,r10
800082ec:	16 99       	mov	r9,r11
800082ee:	fa ea 00 08 	ld.d	r10,sp[8]
800082f2:	e0 a0 0a 61 	rcall	800097b4 <__avr32_f64_sub>
800082f6:	fa eb 00 08 	st.d	sp[8],r10
800082fa:	41 68       	lddsp	r8,sp[0x58]
800082fc:	2d 08       	sub	r8,-48
800082fe:	0a c8       	st.b	r5++,r8
80008300:	41 39       	lddsp	r9,sp[0x4c]
80008302:	2f f9       	sub	r9,-1
80008304:	51 39       	stdsp	sp[0x4c],r9
80008306:	fa e8 00 28 	ld.d	r8,sp[40]
8000830a:	e0 a0 0c 7b 	rcall	80009c00 <__avr32_f64_cmp_lt>
8000830e:	e0 81 03 39 	brne	80008980 <_dtoa_r+0xbb4>
80008312:	fa e8 00 08 	ld.d	r8,sp[8]
80008316:	30 0a       	mov	r10,0
80008318:	fc 1b 3f f0 	movh	r11,0x3ff0
8000831c:	e0 a0 0a 4c 	rcall	800097b4 <__avr32_f64_sub>
80008320:	fa e8 00 28 	ld.d	r8,sp[40]
80008324:	e0 a0 0c 6e 	rcall	80009c00 <__avr32_f64_cmp_lt>
80008328:	fa ea 00 28 	ld.d	r10,sp[40]
8000832c:	30 08       	mov	r8,0
8000832e:	fc 19 40 24 	movh	r9,0x4024
80008332:	e0 81 00 da 	brne	800084e6 <_dtoa_r+0x71a>
80008336:	41 3c       	lddsp	r12,sp[0x4c]
80008338:	08 3c       	cp.w	r12,r4
8000833a:	c5 f4       	brge	800083f8 <_dtoa_r+0x62c>
8000833c:	e0 a0 09 50 	rcall	800095dc <__avr32_f64_mul>
80008340:	30 08       	mov	r8,0
80008342:	fa eb 00 28 	st.d	sp[40],r10
80008346:	fc 19 40 24 	movh	r9,0x4024
8000834a:	fa ea 00 08 	ld.d	r10,sp[8]
8000834e:	e0 a0 09 47 	rcall	800095dc <__avr32_f64_mul>
80008352:	fa eb 00 08 	st.d	sp[8],r10
80008356:	cc 3b       	rjmp	800082dc <_dtoa_r+0x510>
80008358:	40 85       	lddsp	r5,sp[0x20]
8000835a:	08 05       	add	r5,r4
8000835c:	f2 08 02 3a 	ld.d	r10,r9[r8<<0x3]
80008360:	51 35       	stdsp	sp[0x4c],r5
80008362:	fa e8 00 28 	ld.d	r8,sp[40]
80008366:	40 85       	lddsp	r5,sp[0x20]
80008368:	e0 a0 09 3a 	rcall	800095dc <__avr32_f64_mul>
8000836c:	fa eb 00 28 	st.d	sp[40],r10
80008370:	fa ea 00 08 	ld.d	r10,sp[8]
80008374:	e0 a0 0b 78 	rcall	80009a64 <__avr32_f64_to_s32>
80008378:	51 6c       	stdsp	sp[0x58],r12
8000837a:	e0 a0 0b 8c 	rcall	80009a92 <__avr32_s32_to_f64>
8000837e:	14 98       	mov	r8,r10
80008380:	16 99       	mov	r9,r11
80008382:	fa ea 00 08 	ld.d	r10,sp[8]
80008386:	e0 a0 0a 17 	rcall	800097b4 <__avr32_f64_sub>
8000838a:	fa eb 00 08 	st.d	sp[8],r10
8000838e:	41 68       	lddsp	r8,sp[0x58]
80008390:	2d 08       	sub	r8,-48
80008392:	0a c8       	st.b	r5++,r8
80008394:	41 3c       	lddsp	r12,sp[0x4c]
80008396:	18 35       	cp.w	r5,r12
80008398:	c2 81       	brne	800083e8 <_dtoa_r+0x61c>
8000839a:	30 08       	mov	r8,0
8000839c:	fc 19 3f e0 	movh	r9,0x3fe0
800083a0:	fa ea 00 28 	ld.d	r10,sp[40]
800083a4:	e0 a0 0a d6 	rcall	80009950 <__avr32_f64_add>
800083a8:	40 85       	lddsp	r5,sp[0x20]
800083aa:	fa e8 00 08 	ld.d	r8,sp[8]
800083ae:	08 05       	add	r5,r4
800083b0:	e0 a0 0c 28 	rcall	80009c00 <__avr32_f64_cmp_lt>
800083b4:	e0 81 00 99 	brne	800084e6 <_dtoa_r+0x71a>
800083b8:	fa e8 00 28 	ld.d	r8,sp[40]
800083bc:	30 0a       	mov	r10,0
800083be:	fc 1b 3f e0 	movh	r11,0x3fe0
800083c2:	e0 a0 09 f9 	rcall	800097b4 <__avr32_f64_sub>
800083c6:	14 98       	mov	r8,r10
800083c8:	16 99       	mov	r9,r11
800083ca:	fa ea 00 08 	ld.d	r10,sp[8]
800083ce:	e0 a0 0c 19 	rcall	80009c00 <__avr32_f64_cmp_lt>
800083d2:	c1 30       	breq	800083f8 <_dtoa_r+0x62c>
800083d4:	33 09       	mov	r9,48
800083d6:	0a 98       	mov	r8,r5
800083d8:	11 7a       	ld.ub	r10,--r8
800083da:	f2 0a 18 00 	cp.b	r10,r9
800083de:	e0 81 02 d1 	brne	80008980 <_dtoa_r+0xbb4>
800083e2:	10 95       	mov	r5,r8
800083e4:	cf 9b       	rjmp	800083d6 <_dtoa_r+0x60a>
800083e6:	d7 03       	nop
800083e8:	30 08       	mov	r8,0
800083ea:	fc 19 40 24 	movh	r9,0x4024
800083ee:	e0 a0 08 f7 	rcall	800095dc <__avr32_f64_mul>
800083f2:	fa eb 00 08 	st.d	sp[8],r10
800083f6:	cb db       	rjmp	80008370 <_dtoa_r+0x5a4>
800083f8:	fa ea 00 3c 	ld.d	r10,sp[60]
800083fc:	fa eb 00 08 	st.d	sp[8],r10
80008400:	58 e6       	cp.w	r6,14
80008402:	5f ab       	srle	r11
80008404:	41 8a       	lddsp	r10,sp[0x60]
80008406:	30 08       	mov	r8,0
80008408:	f4 09 11 ff 	rsub	r9,r10,-1
8000840c:	f7 e9 03 f9 	and	r9,r11,r9>>0x1f
80008410:	f0 09 18 00 	cp.b	r9,r8
80008414:	e0 80 00 82 	breq	80008518 <_dtoa_r+0x74c>
80008418:	40 ea       	lddsp	r10,sp[0x38]
8000841a:	58 01       	cp.w	r1,0
8000841c:	5f a9       	srle	r9
8000841e:	f3 ea 03 f9 	and	r9,r9,r10>>0x1f
80008422:	fe ca d5 76 	sub	r10,pc,-10890
80008426:	f4 06 02 34 	ld.d	r4,r10[r6<<0x3]
8000842a:	fa e5 00 10 	st.d	sp[16],r4
8000842e:	f0 09 18 00 	cp.b	r9,r8
80008432:	c1 40       	breq	8000845a <_dtoa_r+0x68e>
80008434:	58 01       	cp.w	r1,0
80008436:	e0 81 01 77 	brne	80008724 <_dtoa_r+0x958>
8000843a:	30 08       	mov	r8,0
8000843c:	fc 19 40 14 	movh	r9,0x4014
80008440:	08 9a       	mov	r10,r4
80008442:	0a 9b       	mov	r11,r5
80008444:	e0 a0 08 cc 	rcall	800095dc <__avr32_f64_mul>
80008448:	fa e8 00 08 	ld.d	r8,sp[8]
8000844c:	e0 a0 0b a6 	rcall	80009b98 <__avr32_f64_cmp_ge>
80008450:	e0 81 01 6a 	brne	80008724 <_dtoa_r+0x958>
80008454:	02 92       	mov	r2,r1
80008456:	e0 8f 01 72 	bral	8000873a <_dtoa_r+0x96e>
8000845a:	40 85       	lddsp	r5,sp[0x20]
8000845c:	30 14       	mov	r4,1
8000845e:	fa e8 00 10 	ld.d	r8,sp[16]
80008462:	fa ea 00 08 	ld.d	r10,sp[8]
80008466:	e0 a0 0c 01 	rcall	80009c68 <__avr32_f64_div>
8000846a:	e0 a0 0a fd 	rcall	80009a64 <__avr32_f64_to_s32>
8000846e:	18 92       	mov	r2,r12
80008470:	e0 a0 0b 11 	rcall	80009a92 <__avr32_s32_to_f64>
80008474:	fa e8 00 10 	ld.d	r8,sp[16]
80008478:	e0 a0 08 b2 	rcall	800095dc <__avr32_f64_mul>
8000847c:	14 98       	mov	r8,r10
8000847e:	16 99       	mov	r9,r11
80008480:	fa ea 00 08 	ld.d	r10,sp[8]
80008484:	e0 a0 09 98 	rcall	800097b4 <__avr32_f64_sub>
80008488:	fa eb 00 08 	st.d	sp[8],r10
8000848c:	e4 c8 ff d0 	sub	r8,r2,-48
80008490:	0a c8       	st.b	r5++,r8
80008492:	fc 19 40 24 	movh	r9,0x4024
80008496:	30 08       	mov	r8,0
80008498:	02 34       	cp.w	r4,r1
8000849a:	c3 31       	brne	80008500 <_dtoa_r+0x734>
8000849c:	fa e8 00 08 	ld.d	r8,sp[8]
800084a0:	e0 a0 0a 58 	rcall	80009950 <__avr32_f64_add>
800084a4:	16 91       	mov	r1,r11
800084a6:	14 90       	mov	r0,r10
800084a8:	14 98       	mov	r8,r10
800084aa:	02 99       	mov	r9,r1
800084ac:	fa ea 00 10 	ld.d	r10,sp[16]
800084b0:	e0 a0 0b a8 	rcall	80009c00 <__avr32_f64_cmp_lt>
800084b4:	c1 a1       	brne	800084e8 <_dtoa_r+0x71c>
800084b6:	fa e8 00 10 	ld.d	r8,sp[16]
800084ba:	00 9a       	mov	r10,r0
800084bc:	02 9b       	mov	r11,r1
800084be:	e0 a0 0b 5a 	rcall	80009b72 <__avr32_f64_cmp_eq>
800084c2:	e0 80 02 5e 	breq	8000897e <_dtoa_r+0xbb2>
800084c6:	e5 d2 c0 01 	bfextu	r2,r2,0x0,0x1
800084ca:	c0 f1       	brne	800084e8 <_dtoa_r+0x71c>
800084cc:	e0 8f 02 59 	bral	8000897e <_dtoa_r+0xbb2>
800084d0:	40 8a       	lddsp	r10,sp[0x20]
800084d2:	14 38       	cp.w	r8,r10
800084d4:	c0 30       	breq	800084da <_dtoa_r+0x70e>
800084d6:	10 95       	mov	r5,r8
800084d8:	c0 98       	rjmp	800084ea <_dtoa_r+0x71e>
800084da:	33 08       	mov	r8,48
800084dc:	40 89       	lddsp	r9,sp[0x20]
800084de:	2f f6       	sub	r6,-1
800084e0:	b2 88       	st.b	r9[0x0],r8
800084e2:	40 88       	lddsp	r8,sp[0x20]
800084e4:	c0 88       	rjmp	800084f4 <_dtoa_r+0x728>
800084e6:	40 66       	lddsp	r6,sp[0x18]
800084e8:	33 99       	mov	r9,57
800084ea:	0a 98       	mov	r8,r5
800084ec:	11 7a       	ld.ub	r10,--r8
800084ee:	f2 0a 18 00 	cp.b	r10,r9
800084f2:	ce f0       	breq	800084d0 <_dtoa_r+0x704>
800084f4:	50 66       	stdsp	sp[0x18],r6
800084f6:	11 89       	ld.ub	r9,r8[0x0]
800084f8:	2f f9       	sub	r9,-1
800084fa:	b0 89       	st.b	r8[0x0],r9
800084fc:	e0 8f 02 42 	bral	80008980 <_dtoa_r+0xbb4>
80008500:	e0 a0 08 6e 	rcall	800095dc <__avr32_f64_mul>
80008504:	2f f4       	sub	r4,-1
80008506:	fa eb 00 08 	st.d	sp[8],r10
8000850a:	30 08       	mov	r8,0
8000850c:	30 09       	mov	r9,0
8000850e:	e0 a0 0b 32 	rcall	80009b72 <__avr32_f64_cmp_eq>
80008512:	ca 60       	breq	8000845e <_dtoa_r+0x692>
80008514:	e0 8f 02 35 	bral	8000897e <_dtoa_r+0xbb2>
80008518:	40 d8       	lddsp	r8,sp[0x34]
8000851a:	58 08       	cp.w	r8,0
8000851c:	c0 51       	brne	80008526 <_dtoa_r+0x75a>
8000851e:	04 98       	mov	r8,r2
80008520:	00 95       	mov	r5,r0
80008522:	40 d4       	lddsp	r4,sp[0x34]
80008524:	c3 78       	rjmp	80008592 <_dtoa_r+0x7c6>
80008526:	40 c5       	lddsp	r5,sp[0x30]
80008528:	58 15       	cp.w	r5,1
8000852a:	e0 89 00 0f 	brgt	80008548 <_dtoa_r+0x77c>
8000852e:	41 74       	lddsp	r4,sp[0x5c]
80008530:	58 04       	cp.w	r4,0
80008532:	c0 40       	breq	8000853a <_dtoa_r+0x76e>
80008534:	f4 c9 fb cd 	sub	r9,r10,-1075
80008538:	c0 48       	rjmp	80008540 <_dtoa_r+0x774>
8000853a:	41 99       	lddsp	r9,sp[0x64]
8000853c:	f2 09 11 36 	rsub	r9,r9,54
80008540:	04 98       	mov	r8,r2
80008542:	00 95       	mov	r5,r0
80008544:	c1 c8       	rjmp	8000857c <_dtoa_r+0x7b0>
80008546:	d7 03       	nop
80008548:	e2 c8 00 01 	sub	r8,r1,1
8000854c:	58 01       	cp.w	r1,0
8000854e:	e0 05 17 40 	movge	r5,r0
80008552:	e2 09 17 40 	movge	r9,r1
80008556:	e1 d1 e5 15 	sublt	r5,r0,r1
8000855a:	f9 b9 05 00 	movlt	r9,0
8000855e:	10 32       	cp.w	r2,r8
80008560:	e5 d8 e4 18 	subge	r8,r2,r8
80008564:	f1 d2 e5 18 	sublt	r8,r8,r2
80008568:	e5 d8 e5 02 	addlt	r2,r2,r8
8000856c:	fb fc 50 11 	ld.wlt	r12,sp[0x44]
80008570:	f9 d8 e5 0c 	addlt	r12,r12,r8
80008574:	fb fc 5a 11 	st.wlt	sp[0x44],r12
80008578:	f9 b8 05 00 	movlt	r8,0
8000857c:	40 4b       	lddsp	r11,sp[0x10]
8000857e:	12 0b       	add	r11,r9
80008580:	50 08       	stdsp	sp[0x0],r8
80008582:	50 4b       	stdsp	sp[0x10],r11
80008584:	12 00       	add	r0,r9
80008586:	30 1b       	mov	r11,1
80008588:	0e 9c       	mov	r12,r7
8000858a:	e0 a0 07 27 	rcall	800093d8 <__i2b>
8000858e:	40 08       	lddsp	r8,sp[0x0]
80008590:	18 94       	mov	r4,r12
80008592:	40 4a       	lddsp	r10,sp[0x10]
80008594:	58 05       	cp.w	r5,0
80008596:	5f 99       	srgt	r9
80008598:	58 0a       	cp.w	r10,0
8000859a:	5f 9a       	srgt	r10
8000859c:	f5 e9 00 09 	and	r9,r10,r9
800085a0:	c0 80       	breq	800085b0 <_dtoa_r+0x7e4>
800085a2:	40 4c       	lddsp	r12,sp[0x10]
800085a4:	f8 05 0d 49 	min	r9,r12,r5
800085a8:	12 1c       	sub	r12,r9
800085aa:	12 10       	sub	r0,r9
800085ac:	50 4c       	stdsp	sp[0x10],r12
800085ae:	12 15       	sub	r5,r9
800085b0:	58 02       	cp.w	r2,0
800085b2:	e0 8a 00 27 	brle	80008600 <_dtoa_r+0x834>
800085b6:	40 db       	lddsp	r11,sp[0x34]
800085b8:	58 0b       	cp.w	r11,0
800085ba:	c1 d0       	breq	800085f4 <_dtoa_r+0x828>
800085bc:	58 08       	cp.w	r8,0
800085be:	e0 8a 00 17 	brle	800085ec <_dtoa_r+0x820>
800085c2:	10 9a       	mov	r10,r8
800085c4:	50 08       	stdsp	sp[0x0],r8
800085c6:	08 9b       	mov	r11,r4
800085c8:	0e 9c       	mov	r12,r7
800085ca:	e0 a0 07 4d 	rcall	80009464 <__pow5mult>
800085ce:	06 9a       	mov	r10,r3
800085d0:	18 9b       	mov	r11,r12
800085d2:	18 94       	mov	r4,r12
800085d4:	0e 9c       	mov	r12,r7
800085d6:	e0 a0 06 81 	rcall	800092d8 <__multiply>
800085da:	18 99       	mov	r9,r12
800085dc:	06 9b       	mov	r11,r3
800085de:	50 19       	stdsp	sp[0x4],r9
800085e0:	0e 9c       	mov	r12,r7
800085e2:	e0 a0 05 2d 	rcall	8000903c <_Bfree>
800085e6:	40 19       	lddsp	r9,sp[0x4]
800085e8:	40 08       	lddsp	r8,sp[0x0]
800085ea:	12 93       	mov	r3,r9
800085ec:	e4 08 01 0a 	sub	r10,r2,r8
800085f0:	c0 80       	breq	80008600 <_dtoa_r+0x834>
800085f2:	c0 28       	rjmp	800085f6 <_dtoa_r+0x82a>
800085f4:	04 9a       	mov	r10,r2
800085f6:	06 9b       	mov	r11,r3
800085f8:	0e 9c       	mov	r12,r7
800085fa:	e0 a0 07 35 	rcall	80009464 <__pow5mult>
800085fe:	18 93       	mov	r3,r12
80008600:	30 1b       	mov	r11,1
80008602:	0e 9c       	mov	r12,r7
80008604:	e0 a0 06 ea 	rcall	800093d8 <__i2b>
80008608:	41 1a       	lddsp	r10,sp[0x44]
8000860a:	18 92       	mov	r2,r12
8000860c:	58 0a       	cp.w	r10,0
8000860e:	e0 8a 00 07 	brle	8000861c <_dtoa_r+0x850>
80008612:	18 9b       	mov	r11,r12
80008614:	0e 9c       	mov	r12,r7
80008616:	e0 a0 07 27 	rcall	80009464 <__pow5mult>
8000861a:	18 92       	mov	r2,r12
8000861c:	40 c9       	lddsp	r9,sp[0x30]
8000861e:	58 19       	cp.w	r9,1
80008620:	e0 89 00 14 	brgt	80008648 <_dtoa_r+0x87c>
80008624:	40 38       	lddsp	r8,sp[0xc]
80008626:	58 08       	cp.w	r8,0
80008628:	c1 01       	brne	80008648 <_dtoa_r+0x87c>
8000862a:	40 29       	lddsp	r9,sp[0x8]
8000862c:	f1 d9 c0 14 	bfextu	r8,r9,0x0,0x14
80008630:	c0 c1       	brne	80008648 <_dtoa_r+0x87c>
80008632:	12 98       	mov	r8,r9
80008634:	e6 18 7f f0 	andh	r8,0x7ff0,COH
80008638:	c0 80       	breq	80008648 <_dtoa_r+0x87c>
8000863a:	40 4c       	lddsp	r12,sp[0x10]
8000863c:	30 1b       	mov	r11,1
8000863e:	2f fc       	sub	r12,-1
80008640:	2f f0       	sub	r0,-1
80008642:	50 4c       	stdsp	sp[0x10],r12
80008644:	50 6b       	stdsp	sp[0x18],r11
80008646:	c0 38       	rjmp	8000864c <_dtoa_r+0x880>
80008648:	30 0a       	mov	r10,0
8000864a:	50 6a       	stdsp	sp[0x18],r10
8000864c:	41 19       	lddsp	r9,sp[0x44]
8000864e:	58 09       	cp.w	r9,0
80008650:	c0 31       	brne	80008656 <_dtoa_r+0x88a>
80008652:	30 1c       	mov	r12,1
80008654:	c0 98       	rjmp	80008666 <_dtoa_r+0x89a>
80008656:	64 48       	ld.w	r8,r2[0x10]
80008658:	2f c8       	sub	r8,-4
8000865a:	e4 08 03 2c 	ld.w	r12,r2[r8<<0x2]
8000865e:	e0 a0 04 5e 	rcall	80008f1a <__hi0bits>
80008662:	f8 0c 11 20 	rsub	r12,r12,32
80008666:	40 4b       	lddsp	r11,sp[0x10]
80008668:	f8 0b 00 08 	add	r8,r12,r11
8000866c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008670:	c0 c0       	breq	80008688 <_dtoa_r+0x8bc>
80008672:	f0 08 11 20 	rsub	r8,r8,32
80008676:	58 48       	cp.w	r8,4
80008678:	e0 8a 00 06 	brle	80008684 <_dtoa_r+0x8b8>
8000867c:	20 48       	sub	r8,4
8000867e:	10 0b       	add	r11,r8
80008680:	50 4b       	stdsp	sp[0x10],r11
80008682:	c0 78       	rjmp	80008690 <_dtoa_r+0x8c4>
80008684:	58 48       	cp.w	r8,4
80008686:	c0 70       	breq	80008694 <_dtoa_r+0x8c8>
80008688:	40 4a       	lddsp	r10,sp[0x10]
8000868a:	2e 48       	sub	r8,-28
8000868c:	10 0a       	add	r10,r8
8000868e:	50 4a       	stdsp	sp[0x10],r10
80008690:	10 00       	add	r0,r8
80008692:	10 05       	add	r5,r8
80008694:	58 00       	cp.w	r0,0
80008696:	e0 8a 00 08 	brle	800086a6 <_dtoa_r+0x8da>
8000869a:	06 9b       	mov	r11,r3
8000869c:	00 9a       	mov	r10,r0
8000869e:	0e 9c       	mov	r12,r7
800086a0:	e0 a0 05 d8 	rcall	80009250 <__lshift>
800086a4:	18 93       	mov	r3,r12
800086a6:	40 49       	lddsp	r9,sp[0x10]
800086a8:	58 09       	cp.w	r9,0
800086aa:	e0 8a 00 08 	brle	800086ba <_dtoa_r+0x8ee>
800086ae:	04 9b       	mov	r11,r2
800086b0:	12 9a       	mov	r10,r9
800086b2:	0e 9c       	mov	r12,r7
800086b4:	e0 a0 05 ce 	rcall	80009250 <__lshift>
800086b8:	18 92       	mov	r2,r12
800086ba:	41 48       	lddsp	r8,sp[0x50]
800086bc:	58 08       	cp.w	r8,0
800086be:	c1 b0       	breq	800086f4 <_dtoa_r+0x928>
800086c0:	04 9b       	mov	r11,r2
800086c2:	06 9c       	mov	r12,r3
800086c4:	e0 a0 04 a2 	rcall	80009008 <__mcmp>
800086c8:	c1 64       	brge	800086f4 <_dtoa_r+0x928>
800086ca:	06 9b       	mov	r11,r3
800086cc:	30 09       	mov	r9,0
800086ce:	30 aa       	mov	r10,10
800086d0:	0e 9c       	mov	r12,r7
800086d2:	e0 a0 06 8b 	rcall	800093e8 <__multadd>
800086d6:	20 16       	sub	r6,1
800086d8:	18 93       	mov	r3,r12
800086da:	40 dc       	lddsp	r12,sp[0x34]
800086dc:	58 0c       	cp.w	r12,0
800086de:	c0 31       	brne	800086e4 <_dtoa_r+0x918>
800086e0:	40 91       	lddsp	r1,sp[0x24]
800086e2:	c0 98       	rjmp	800086f4 <_dtoa_r+0x928>
800086e4:	08 9b       	mov	r11,r4
800086e6:	40 91       	lddsp	r1,sp[0x24]
800086e8:	30 09       	mov	r9,0
800086ea:	30 aa       	mov	r10,10
800086ec:	0e 9c       	mov	r12,r7
800086ee:	e0 a0 06 7d 	rcall	800093e8 <__multadd>
800086f2:	18 94       	mov	r4,r12
800086f4:	58 01       	cp.w	r1,0
800086f6:	5f a9       	srle	r9
800086f8:	40 cb       	lddsp	r11,sp[0x30]
800086fa:	58 2b       	cp.w	r11,2
800086fc:	5f 98       	srgt	r8
800086fe:	f3 e8 00 08 	and	r8,r9,r8
80008702:	c2 50       	breq	8000874c <_dtoa_r+0x980>
80008704:	58 01       	cp.w	r1,0
80008706:	c1 11       	brne	80008728 <_dtoa_r+0x95c>
80008708:	04 9b       	mov	r11,r2
8000870a:	02 99       	mov	r9,r1
8000870c:	30 5a       	mov	r10,5
8000870e:	0e 9c       	mov	r12,r7
80008710:	e0 a0 06 6c 	rcall	800093e8 <__multadd>
80008714:	18 92       	mov	r2,r12
80008716:	18 9b       	mov	r11,r12
80008718:	06 9c       	mov	r12,r3
8000871a:	e0 a0 04 77 	rcall	80009008 <__mcmp>
8000871e:	e0 89 00 0f 	brgt	8000873c <_dtoa_r+0x970>
80008722:	c0 38       	rjmp	80008728 <_dtoa_r+0x95c>
80008724:	30 02       	mov	r2,0
80008726:	04 94       	mov	r4,r2
80008728:	40 ea       	lddsp	r10,sp[0x38]
8000872a:	30 09       	mov	r9,0
8000872c:	5c da       	com	r10
8000872e:	40 85       	lddsp	r5,sp[0x20]
80008730:	50 6a       	stdsp	sp[0x18],r10
80008732:	50 49       	stdsp	sp[0x10],r9
80008734:	c0 f9       	rjmp	80008952 <_dtoa_r+0xb86>
80008736:	08 92       	mov	r2,r4
80008738:	40 66       	lddsp	r6,sp[0x18]
8000873a:	04 94       	mov	r4,r2
8000873c:	2f f6       	sub	r6,-1
8000873e:	50 66       	stdsp	sp[0x18],r6
80008740:	33 18       	mov	r8,49
80008742:	40 85       	lddsp	r5,sp[0x20]
80008744:	0a c8       	st.b	r5++,r8
80008746:	30 08       	mov	r8,0
80008748:	50 48       	stdsp	sp[0x10],r8
8000874a:	c0 49       	rjmp	80008952 <_dtoa_r+0xb86>
8000874c:	40 dc       	lddsp	r12,sp[0x34]
8000874e:	58 0c       	cp.w	r12,0
80008750:	e0 80 00 b5 	breq	800088ba <_dtoa_r+0xaee>
80008754:	58 05       	cp.w	r5,0
80008756:	e0 8a 00 08 	brle	80008766 <_dtoa_r+0x99a>
8000875a:	08 9b       	mov	r11,r4
8000875c:	0a 9a       	mov	r10,r5
8000875e:	0e 9c       	mov	r12,r7
80008760:	e0 a0 05 78 	rcall	80009250 <__lshift>
80008764:	18 94       	mov	r4,r12
80008766:	40 6b       	lddsp	r11,sp[0x18]
80008768:	58 0b       	cp.w	r11,0
8000876a:	c0 31       	brne	80008770 <_dtoa_r+0x9a4>
8000876c:	08 9c       	mov	r12,r4
8000876e:	c1 38       	rjmp	80008794 <_dtoa_r+0x9c8>
80008770:	68 1b       	ld.w	r11,r4[0x4]
80008772:	0e 9c       	mov	r12,r7
80008774:	e0 a0 04 7e 	rcall	80009070 <_Balloc>
80008778:	68 4a       	ld.w	r10,r4[0x10]
8000877a:	18 95       	mov	r5,r12
8000877c:	e8 cb ff f4 	sub	r11,r4,-12
80008780:	2f ea       	sub	r10,-2
80008782:	2f 4c       	sub	r12,-12
80008784:	a3 6a       	lsl	r10,0x2
80008786:	fe b0 e3 1d 	rcall	80004dc0 <memcpy>
8000878a:	0a 9b       	mov	r11,r5
8000878c:	30 1a       	mov	r10,1
8000878e:	0e 9c       	mov	r12,r7
80008790:	e0 a0 05 60 	rcall	80009250 <__lshift>
80008794:	50 44       	stdsp	sp[0x10],r4
80008796:	40 3a       	lddsp	r10,sp[0xc]
80008798:	30 19       	mov	r9,1
8000879a:	f5 da c0 01 	bfextu	r10,r10,0x0,0x1
8000879e:	18 94       	mov	r4,r12
800087a0:	50 da       	stdsp	sp[0x34],r10
800087a2:	40 85       	lddsp	r5,sp[0x20]
800087a4:	50 99       	stdsp	sp[0x24],r9
800087a6:	50 26       	stdsp	sp[0x8],r6
800087a8:	50 e1       	stdsp	sp[0x38],r1
800087aa:	04 9b       	mov	r11,r2
800087ac:	06 9c       	mov	r12,r3
800087ae:	fe b0 fa 7f 	rcall	80007cac <quorem>
800087b2:	40 4b       	lddsp	r11,sp[0x10]
800087b4:	f8 c0 ff d0 	sub	r0,r12,-48
800087b8:	06 9c       	mov	r12,r3
800087ba:	e0 a0 04 27 	rcall	80009008 <__mcmp>
800087be:	08 9a       	mov	r10,r4
800087c0:	50 6c       	stdsp	sp[0x18],r12
800087c2:	04 9b       	mov	r11,r2
800087c4:	0e 9c       	mov	r12,r7
800087c6:	e0 a0 04 dd 	rcall	80009180 <__mdiff>
800087ca:	18 91       	mov	r1,r12
800087cc:	78 38       	ld.w	r8,r12[0xc]
800087ce:	58 08       	cp.w	r8,0
800087d0:	c0 30       	breq	800087d6 <_dtoa_r+0xa0a>
800087d2:	30 16       	mov	r6,1
800087d4:	c0 68       	rjmp	800087e0 <_dtoa_r+0xa14>
800087d6:	18 9b       	mov	r11,r12
800087d8:	06 9c       	mov	r12,r3
800087da:	e0 a0 04 17 	rcall	80009008 <__mcmp>
800087de:	18 96       	mov	r6,r12
800087e0:	0e 9c       	mov	r12,r7
800087e2:	02 9b       	mov	r11,r1
800087e4:	e0 a0 04 2c 	rcall	8000903c <_Bfree>
800087e8:	40 cc       	lddsp	r12,sp[0x30]
800087ea:	ed ec 10 08 	or	r8,r6,r12
800087ee:	c0 d1       	brne	80008808 <_dtoa_r+0xa3c>
800087f0:	40 db       	lddsp	r11,sp[0x34]
800087f2:	58 0b       	cp.w	r11,0
800087f4:	c0 a1       	brne	80008808 <_dtoa_r+0xa3c>
800087f6:	40 26       	lddsp	r6,sp[0x8]
800087f8:	e0 40 00 39 	cp.w	r0,57
800087fc:	c3 00       	breq	8000885c <_dtoa_r+0xa90>
800087fe:	40 6a       	lddsp	r10,sp[0x18]
80008800:	58 0a       	cp.w	r10,0
80008802:	e0 89 00 24 	brgt	8000884a <_dtoa_r+0xa7e>
80008806:	c2 f8       	rjmp	80008864 <_dtoa_r+0xa98>
80008808:	40 69       	lddsp	r9,sp[0x18]
8000880a:	58 09       	cp.w	r9,0
8000880c:	c0 85       	brlt	8000881c <_dtoa_r+0xa50>
8000880e:	12 98       	mov	r8,r9
80008810:	40 cc       	lddsp	r12,sp[0x30]
80008812:	18 48       	or	r8,r12
80008814:	c1 d1       	brne	8000884e <_dtoa_r+0xa82>
80008816:	40 db       	lddsp	r11,sp[0x34]
80008818:	58 0b       	cp.w	r11,0
8000881a:	c1 a1       	brne	8000884e <_dtoa_r+0xa82>
8000881c:	0c 99       	mov	r9,r6
8000881e:	40 26       	lddsp	r6,sp[0x8]
80008820:	58 09       	cp.w	r9,0
80008822:	e0 8a 00 21 	brle	80008864 <_dtoa_r+0xa98>
80008826:	06 9b       	mov	r11,r3
80008828:	30 1a       	mov	r10,1
8000882a:	0e 9c       	mov	r12,r7
8000882c:	e0 a0 05 12 	rcall	80009250 <__lshift>
80008830:	04 9b       	mov	r11,r2
80008832:	18 93       	mov	r3,r12
80008834:	e0 a0 03 ea 	rcall	80009008 <__mcmp>
80008838:	e0 89 00 06 	brgt	80008844 <_dtoa_r+0xa78>
8000883c:	c1 41       	brne	80008864 <_dtoa_r+0xa98>
8000883e:	ed b0 00 00 	bld	r0,0x0
80008842:	c1 11       	brne	80008864 <_dtoa_r+0xa98>
80008844:	e0 40 00 39 	cp.w	r0,57
80008848:	c0 a0       	breq	8000885c <_dtoa_r+0xa90>
8000884a:	2f f0       	sub	r0,-1
8000884c:	c0 c8       	rjmp	80008864 <_dtoa_r+0xa98>
8000884e:	58 06       	cp.w	r6,0
80008850:	e0 8a 00 0c 	brle	80008868 <_dtoa_r+0xa9c>
80008854:	40 26       	lddsp	r6,sp[0x8]
80008856:	e0 40 00 39 	cp.w	r0,57
8000885a:	c0 41       	brne	80008862 <_dtoa_r+0xa96>
8000885c:	33 98       	mov	r8,57
8000885e:	0a c8       	st.b	r5++,r8
80008860:	c6 78       	rjmp	8000892e <_dtoa_r+0xb62>
80008862:	2f f0       	sub	r0,-1
80008864:	0a c0       	st.b	r5++,r0
80008866:	c7 58       	rjmp	80008950 <_dtoa_r+0xb84>
80008868:	0a c0       	st.b	r5++,r0
8000886a:	40 9a       	lddsp	r10,sp[0x24]
8000886c:	40 e9       	lddsp	r9,sp[0x38]
8000886e:	12 3a       	cp.w	r10,r9
80008870:	c4 30       	breq	800088f6 <_dtoa_r+0xb2a>
80008872:	06 9b       	mov	r11,r3
80008874:	30 09       	mov	r9,0
80008876:	30 aa       	mov	r10,10
80008878:	0e 9c       	mov	r12,r7
8000887a:	e0 a0 05 b7 	rcall	800093e8 <__multadd>
8000887e:	40 48       	lddsp	r8,sp[0x10]
80008880:	18 93       	mov	r3,r12
80008882:	08 38       	cp.w	r8,r4
80008884:	c0 91       	brne	80008896 <_dtoa_r+0xaca>
80008886:	10 9b       	mov	r11,r8
80008888:	30 09       	mov	r9,0
8000888a:	30 aa       	mov	r10,10
8000888c:	0e 9c       	mov	r12,r7
8000888e:	e0 a0 05 ad 	rcall	800093e8 <__multadd>
80008892:	50 4c       	stdsp	sp[0x10],r12
80008894:	c0 e8       	rjmp	800088b0 <_dtoa_r+0xae4>
80008896:	40 4b       	lddsp	r11,sp[0x10]
80008898:	30 09       	mov	r9,0
8000889a:	30 aa       	mov	r10,10
8000889c:	0e 9c       	mov	r12,r7
8000889e:	e0 a0 05 a5 	rcall	800093e8 <__multadd>
800088a2:	08 9b       	mov	r11,r4
800088a4:	50 4c       	stdsp	sp[0x10],r12
800088a6:	30 09       	mov	r9,0
800088a8:	30 aa       	mov	r10,10
800088aa:	0e 9c       	mov	r12,r7
800088ac:	e0 a0 05 9e 	rcall	800093e8 <__multadd>
800088b0:	18 94       	mov	r4,r12
800088b2:	40 9c       	lddsp	r12,sp[0x24]
800088b4:	2f fc       	sub	r12,-1
800088b6:	50 9c       	stdsp	sp[0x24],r12
800088b8:	c7 9b       	rjmp	800087aa <_dtoa_r+0x9de>
800088ba:	30 18       	mov	r8,1
800088bc:	06 90       	mov	r0,r3
800088be:	40 85       	lddsp	r5,sp[0x20]
800088c0:	08 93       	mov	r3,r4
800088c2:	0c 94       	mov	r4,r6
800088c4:	10 96       	mov	r6,r8
800088c6:	04 9b       	mov	r11,r2
800088c8:	00 9c       	mov	r12,r0
800088ca:	fe b0 f9 f1 	rcall	80007cac <quorem>
800088ce:	2d 0c       	sub	r12,-48
800088d0:	0a cc       	st.b	r5++,r12
800088d2:	02 36       	cp.w	r6,r1
800088d4:	c0 a4       	brge	800088e8 <_dtoa_r+0xb1c>
800088d6:	00 9b       	mov	r11,r0
800088d8:	30 09       	mov	r9,0
800088da:	30 aa       	mov	r10,10
800088dc:	0e 9c       	mov	r12,r7
800088de:	2f f6       	sub	r6,-1
800088e0:	e0 a0 05 84 	rcall	800093e8 <__multadd>
800088e4:	18 90       	mov	r0,r12
800088e6:	cf 0b       	rjmp	800088c6 <_dtoa_r+0xafa>
800088e8:	08 96       	mov	r6,r4
800088ea:	30 0b       	mov	r11,0
800088ec:	06 94       	mov	r4,r3
800088ee:	50 4b       	stdsp	sp[0x10],r11
800088f0:	00 93       	mov	r3,r0
800088f2:	18 90       	mov	r0,r12
800088f4:	c0 28       	rjmp	800088f8 <_dtoa_r+0xb2c>
800088f6:	40 26       	lddsp	r6,sp[0x8]
800088f8:	06 9b       	mov	r11,r3
800088fa:	30 1a       	mov	r10,1
800088fc:	0e 9c       	mov	r12,r7
800088fe:	e0 a0 04 a9 	rcall	80009250 <__lshift>
80008902:	04 9b       	mov	r11,r2
80008904:	18 93       	mov	r3,r12
80008906:	e0 a0 03 81 	rcall	80009008 <__mcmp>
8000890a:	e0 89 00 12 	brgt	8000892e <_dtoa_r+0xb62>
8000890e:	c1 b1       	brne	80008944 <_dtoa_r+0xb78>
80008910:	e1 d0 c0 01 	bfextu	r0,r0,0x0,0x1
80008914:	c0 d1       	brne	8000892e <_dtoa_r+0xb62>
80008916:	c1 78       	rjmp	80008944 <_dtoa_r+0xb78>
80008918:	40 89       	lddsp	r9,sp[0x20]
8000891a:	12 38       	cp.w	r8,r9
8000891c:	c0 30       	breq	80008922 <_dtoa_r+0xb56>
8000891e:	10 95       	mov	r5,r8
80008920:	c0 88       	rjmp	80008930 <_dtoa_r+0xb64>
80008922:	2f f6       	sub	r6,-1
80008924:	50 66       	stdsp	sp[0x18],r6
80008926:	33 18       	mov	r8,49
80008928:	40 8c       	lddsp	r12,sp[0x20]
8000892a:	b8 88       	st.b	r12[0x0],r8
8000892c:	c1 38       	rjmp	80008952 <_dtoa_r+0xb86>
8000892e:	33 9a       	mov	r10,57
80008930:	0a 98       	mov	r8,r5
80008932:	11 79       	ld.ub	r9,--r8
80008934:	f4 09 18 00 	cp.b	r9,r10
80008938:	cf 00       	breq	80008918 <_dtoa_r+0xb4c>
8000893a:	2f f9       	sub	r9,-1
8000893c:	b0 89       	st.b	r8[0x0],r9
8000893e:	c0 98       	rjmp	80008950 <_dtoa_r+0xb84>
80008940:	10 95       	mov	r5,r8
80008942:	c0 28       	rjmp	80008946 <_dtoa_r+0xb7a>
80008944:	33 09       	mov	r9,48
80008946:	0a 98       	mov	r8,r5
80008948:	11 7a       	ld.ub	r10,--r8
8000894a:	f2 0a 18 00 	cp.b	r10,r9
8000894e:	cf 90       	breq	80008940 <_dtoa_r+0xb74>
80008950:	50 66       	stdsp	sp[0x18],r6
80008952:	04 9b       	mov	r11,r2
80008954:	0e 9c       	mov	r12,r7
80008956:	e0 a0 03 73 	rcall	8000903c <_Bfree>
8000895a:	58 04       	cp.w	r4,0
8000895c:	c1 20       	breq	80008980 <_dtoa_r+0xbb4>
8000895e:	40 4b       	lddsp	r11,sp[0x10]
80008960:	08 3b       	cp.w	r11,r4
80008962:	5f 19       	srne	r9
80008964:	58 0b       	cp.w	r11,0
80008966:	5f 18       	srne	r8
80008968:	f3 e8 00 08 	and	r8,r9,r8
8000896c:	c0 40       	breq	80008974 <_dtoa_r+0xba8>
8000896e:	0e 9c       	mov	r12,r7
80008970:	e0 a0 03 66 	rcall	8000903c <_Bfree>
80008974:	08 9b       	mov	r11,r4
80008976:	0e 9c       	mov	r12,r7
80008978:	e0 a0 03 62 	rcall	8000903c <_Bfree>
8000897c:	c0 28       	rjmp	80008980 <_dtoa_r+0xbb4>
8000897e:	50 66       	stdsp	sp[0x18],r6
80008980:	0e 9c       	mov	r12,r7
80008982:	06 9b       	mov	r11,r3
80008984:	e0 a0 03 5c 	rcall	8000903c <_Bfree>
80008988:	30 08       	mov	r8,0
8000898a:	aa 88       	st.b	r5[0x0],r8
8000898c:	40 68       	lddsp	r8,sp[0x18]
8000898e:	41 5a       	lddsp	r10,sp[0x54]
80008990:	2f f8       	sub	r8,-1
80008992:	41 29       	lddsp	r9,sp[0x48]
80008994:	95 08       	st.w	r10[0x0],r8
80008996:	40 8c       	lddsp	r12,sp[0x20]
80008998:	58 09       	cp.w	r9,0
8000899a:	fb f8 10 12 	ld.wne	r8,sp[0x48]
8000899e:	f1 f5 1a 00 	st.wne	r8[0x0],r5
800089a2:	2e 6d       	sub	sp,-104
800089a4:	d8 32       	popm	r0-r7,pc
800089a6:	d7 03       	nop

800089a8 <_fclose_r>:
800089a8:	d4 21       	pushm	r4-r7,lr
800089aa:	18 96       	mov	r6,r12
800089ac:	16 97       	mov	r7,r11
800089ae:	58 0b       	cp.w	r11,0
800089b0:	c0 31       	brne	800089b6 <_fclose_r+0xe>
800089b2:	16 95       	mov	r5,r11
800089b4:	c5 28       	rjmp	80008a58 <_fclose_r+0xb0>
800089b6:	fe b0 e5 91 	rcall	800054d8 <__sfp_lock_acquire>
800089ba:	58 06       	cp.w	r6,0
800089bc:	c0 70       	breq	800089ca <_fclose_r+0x22>
800089be:	6c 68       	ld.w	r8,r6[0x18]
800089c0:	58 08       	cp.w	r8,0
800089c2:	c0 41       	brne	800089ca <_fclose_r+0x22>
800089c4:	0c 9c       	mov	r12,r6
800089c6:	fe b0 e5 db 	rcall	8000557c <__sinit>
800089ca:	fe c8 df ae 	sub	r8,pc,-8274
800089ce:	10 37       	cp.w	r7,r8
800089d0:	c0 31       	brne	800089d6 <_fclose_r+0x2e>
800089d2:	6c 07       	ld.w	r7,r6[0x0]
800089d4:	c0 c8       	rjmp	800089ec <_fclose_r+0x44>
800089d6:	fe c8 df 9a 	sub	r8,pc,-8294
800089da:	10 37       	cp.w	r7,r8
800089dc:	c0 31       	brne	800089e2 <_fclose_r+0x3a>
800089de:	6c 17       	ld.w	r7,r6[0x4]
800089e0:	c0 68       	rjmp	800089ec <_fclose_r+0x44>
800089e2:	fe c8 df 86 	sub	r8,pc,-8314
800089e6:	10 37       	cp.w	r7,r8
800089e8:	ed f7 00 02 	ld.weq	r7,r6[0x8]
800089ec:	8e 69       	ld.sh	r9,r7[0xc]
800089ee:	30 08       	mov	r8,0
800089f0:	f0 09 19 00 	cp.h	r9,r8
800089f4:	c0 51       	brne	800089fe <_fclose_r+0x56>
800089f6:	fe b0 e5 72 	rcall	800054da <__sfp_lock_release>
800089fa:	30 05       	mov	r5,0
800089fc:	c2 e8       	rjmp	80008a58 <_fclose_r+0xb0>
800089fe:	0e 9b       	mov	r11,r7
80008a00:	0c 9c       	mov	r12,r6
80008a02:	c3 5c       	rcall	80008a6c <_fflush_r>
80008a04:	6e c8       	ld.w	r8,r7[0x30]
80008a06:	18 95       	mov	r5,r12
80008a08:	58 08       	cp.w	r8,0
80008a0a:	c0 60       	breq	80008a16 <_fclose_r+0x6e>
80008a0c:	6e 8b       	ld.w	r11,r7[0x20]
80008a0e:	0c 9c       	mov	r12,r6
80008a10:	5d 18       	icall	r8
80008a12:	f9 b5 05 ff 	movlt	r5,-1
80008a16:	8e 68       	ld.sh	r8,r7[0xc]
80008a18:	ed b8 00 07 	bld	r8,0x7
80008a1c:	c0 51       	brne	80008a26 <_fclose_r+0x7e>
80008a1e:	6e 4b       	ld.w	r11,r7[0x10]
80008a20:	0c 9c       	mov	r12,r6
80008a22:	fe b0 e6 47 	rcall	800056b0 <_free_r>
80008a26:	6e db       	ld.w	r11,r7[0x34]
80008a28:	58 0b       	cp.w	r11,0
80008a2a:	c0 a0       	breq	80008a3e <_fclose_r+0x96>
80008a2c:	ee c8 ff bc 	sub	r8,r7,-68
80008a30:	10 3b       	cp.w	r11,r8
80008a32:	c0 40       	breq	80008a3a <_fclose_r+0x92>
80008a34:	0c 9c       	mov	r12,r6
80008a36:	fe b0 e6 3d 	rcall	800056b0 <_free_r>
80008a3a:	30 08       	mov	r8,0
80008a3c:	8f d8       	st.w	r7[0x34],r8
80008a3e:	6f 2b       	ld.w	r11,r7[0x48]
80008a40:	58 0b       	cp.w	r11,0
80008a42:	c0 70       	breq	80008a50 <_fclose_r+0xa8>
80008a44:	0c 9c       	mov	r12,r6
80008a46:	fe b0 e6 35 	rcall	800056b0 <_free_r>
80008a4a:	30 08       	mov	r8,0
80008a4c:	ef 48 00 48 	st.w	r7[72],r8
80008a50:	30 08       	mov	r8,0
80008a52:	ae 68       	st.h	r7[0xc],r8
80008a54:	fe b0 e5 43 	rcall	800054da <__sfp_lock_release>
80008a58:	0a 9c       	mov	r12,r5
80008a5a:	d8 22       	popm	r4-r7,pc

80008a5c <fclose>:
80008a5c:	d4 01       	pushm	lr
80008a5e:	e0 68 01 30 	mov	r8,304
80008a62:	18 9b       	mov	r11,r12
80008a64:	70 0c       	ld.w	r12,r8[0x0]
80008a66:	ca 1f       	rcall	800089a8 <_fclose_r>
80008a68:	d8 02       	popm	pc
80008a6a:	d7 03       	nop

80008a6c <_fflush_r>:
80008a6c:	d4 21       	pushm	r4-r7,lr
80008a6e:	16 97       	mov	r7,r11
80008a70:	18 96       	mov	r6,r12
80008a72:	76 48       	ld.w	r8,r11[0x10]
80008a74:	58 08       	cp.w	r8,0
80008a76:	e0 80 00 81 	breq	80008b78 <_fflush_r+0x10c>
80008a7a:	58 0c       	cp.w	r12,0
80008a7c:	c0 60       	breq	80008a88 <_fflush_r+0x1c>
80008a7e:	78 68       	ld.w	r8,r12[0x18]
80008a80:	58 08       	cp.w	r8,0
80008a82:	c0 31       	brne	80008a88 <_fflush_r+0x1c>
80008a84:	fe b0 e5 7c 	rcall	8000557c <__sinit>
80008a88:	fe c8 e0 6c 	sub	r8,pc,-8084
80008a8c:	10 37       	cp.w	r7,r8
80008a8e:	c0 31       	brne	80008a94 <_fflush_r+0x28>
80008a90:	6c 07       	ld.w	r7,r6[0x0]
80008a92:	c0 c8       	rjmp	80008aaa <_fflush_r+0x3e>
80008a94:	fe c8 e0 58 	sub	r8,pc,-8104
80008a98:	10 37       	cp.w	r7,r8
80008a9a:	c0 31       	brne	80008aa0 <_fflush_r+0x34>
80008a9c:	6c 17       	ld.w	r7,r6[0x4]
80008a9e:	c0 68       	rjmp	80008aaa <_fflush_r+0x3e>
80008aa0:	fe c8 e0 44 	sub	r8,pc,-8124
80008aa4:	10 37       	cp.w	r7,r8
80008aa6:	ed f7 00 02 	ld.weq	r7,r6[0x8]
80008aaa:	8e 6a       	ld.sh	r10,r7[0xc]
80008aac:	14 98       	mov	r8,r10
80008aae:	ed ba 00 03 	bld	r10,0x3
80008ab2:	c4 20       	breq	80008b36 <_fflush_r+0xca>
80008ab4:	ab ba       	sbr	r10,0xb
80008ab6:	ae 6a       	st.h	r7[0xc],r10
80008ab8:	6e 18       	ld.w	r8,r7[0x4]
80008aba:	58 08       	cp.w	r8,0
80008abc:	e0 89 00 06 	brgt	80008ac8 <_fflush_r+0x5c>
80008ac0:	6f 08       	ld.w	r8,r7[0x40]
80008ac2:	58 08       	cp.w	r8,0
80008ac4:	e0 8a 00 5a 	brle	80008b78 <_fflush_r+0x10c>
80008ac8:	6e b8       	ld.w	r8,r7[0x2c]
80008aca:	58 08       	cp.w	r8,0
80008acc:	c5 60       	breq	80008b78 <_fflush_r+0x10c>
80008ace:	e2 1a 10 00 	andl	r10,0x1000,COH
80008ad2:	c0 30       	breq	80008ad8 <_fflush_r+0x6c>
80008ad4:	6f 55       	ld.w	r5,r7[0x54]
80008ad6:	c0 f8       	rjmp	80008af4 <_fflush_r+0x88>
80008ad8:	30 19       	mov	r9,1
80008ada:	6e 8b       	ld.w	r11,r7[0x20]
80008adc:	0c 9c       	mov	r12,r6
80008ade:	5d 18       	icall	r8
80008ae0:	18 95       	mov	r5,r12
80008ae2:	5b fc       	cp.w	r12,-1
80008ae4:	c0 81       	brne	80008af4 <_fflush_r+0x88>
80008ae6:	6c 38       	ld.w	r8,r6[0xc]
80008ae8:	59 d8       	cp.w	r8,29
80008aea:	c4 70       	breq	80008b78 <_fflush_r+0x10c>
80008aec:	8e 68       	ld.sh	r8,r7[0xc]
80008aee:	a7 a8       	sbr	r8,0x6
80008af0:	ae 68       	st.h	r7[0xc],r8
80008af2:	d8 22       	popm	r4-r7,pc
80008af4:	8e 68       	ld.sh	r8,r7[0xc]
80008af6:	ed b8 00 02 	bld	r8,0x2
80008afa:	c0 91       	brne	80008b0c <_fflush_r+0xa0>
80008afc:	6e 18       	ld.w	r8,r7[0x4]
80008afe:	10 15       	sub	r5,r8
80008b00:	6e d8       	ld.w	r8,r7[0x34]
80008b02:	58 08       	cp.w	r8,0
80008b04:	ef f8 10 10 	ld.wne	r8,r7[0x40]
80008b08:	eb d8 e1 15 	subne	r5,r5,r8
80008b0c:	6e b8       	ld.w	r8,r7[0x2c]
80008b0e:	0c 9c       	mov	r12,r6
80008b10:	30 09       	mov	r9,0
80008b12:	0a 9a       	mov	r10,r5
80008b14:	6e 8b       	ld.w	r11,r7[0x20]
80008b16:	5d 18       	icall	r8
80008b18:	8e 68       	ld.sh	r8,r7[0xc]
80008b1a:	0a 3c       	cp.w	r12,r5
80008b1c:	c2 61       	brne	80008b68 <_fflush_r+0xfc>
80008b1e:	ab d8       	cbr	r8,0xb
80008b20:	30 0c       	mov	r12,0
80008b22:	6e 49       	ld.w	r9,r7[0x10]
80008b24:	ae 68       	st.h	r7[0xc],r8
80008b26:	8f 1c       	st.w	r7[0x4],r12
80008b28:	8f 09       	st.w	r7[0x0],r9
80008b2a:	ed b8 00 0c 	bld	r8,0xc
80008b2e:	c2 51       	brne	80008b78 <_fflush_r+0x10c>
80008b30:	ef 45 00 54 	st.w	r7[84],r5
80008b34:	d8 22       	popm	r4-r7,pc
80008b36:	6e 45       	ld.w	r5,r7[0x10]
80008b38:	58 05       	cp.w	r5,0
80008b3a:	c1 f0       	breq	80008b78 <_fflush_r+0x10c>
80008b3c:	6e 04       	ld.w	r4,r7[0x0]
80008b3e:	f5 da c0 02 	bfextu	r10,r10,0x0,0x2
80008b42:	8f 05       	st.w	r7[0x0],r5
80008b44:	f9 b8 01 00 	movne	r8,0
80008b48:	ef f8 00 05 	ld.weq	r8,r7[0x14]
80008b4c:	0a 14       	sub	r4,r5
80008b4e:	8f 28       	st.w	r7[0x8],r8
80008b50:	c1 18       	rjmp	80008b72 <_fflush_r+0x106>
80008b52:	08 99       	mov	r9,r4
80008b54:	0a 9a       	mov	r10,r5
80008b56:	6e a8       	ld.w	r8,r7[0x28]
80008b58:	6e 8b       	ld.w	r11,r7[0x20]
80008b5a:	0c 9c       	mov	r12,r6
80008b5c:	5d 18       	icall	r8
80008b5e:	18 14       	sub	r4,r12
80008b60:	58 0c       	cp.w	r12,0
80008b62:	e0 89 00 07 	brgt	80008b70 <_fflush_r+0x104>
80008b66:	8e 68       	ld.sh	r8,r7[0xc]
80008b68:	a7 a8       	sbr	r8,0x6
80008b6a:	3f fc       	mov	r12,-1
80008b6c:	ae 68       	st.h	r7[0xc],r8
80008b6e:	d8 22       	popm	r4-r7,pc
80008b70:	18 05       	add	r5,r12
80008b72:	58 04       	cp.w	r4,0
80008b74:	fe 99 ff ef 	brgt	80008b52 <_fflush_r+0xe6>
80008b78:	d8 2a       	popm	r4-r7,pc,r12=0
80008b7a:	d7 03       	nop

80008b7c <__sfvwrite_r>:
80008b7c:	d4 31       	pushm	r0-r7,lr
80008b7e:	20 3d       	sub	sp,12
80008b80:	14 94       	mov	r4,r10
80008b82:	18 95       	mov	r5,r12
80008b84:	16 97       	mov	r7,r11
80008b86:	74 28       	ld.w	r8,r10[0x8]
80008b88:	58 08       	cp.w	r8,0
80008b8a:	e0 80 01 43 	breq	80008e10 <__sfvwrite_r+0x294>
80008b8e:	96 68       	ld.sh	r8,r11[0xc]
80008b90:	ed b8 00 03 	bld	r8,0x3
80008b94:	c0 41       	brne	80008b9c <__sfvwrite_r+0x20>
80008b96:	76 48       	ld.w	r8,r11[0x10]
80008b98:	58 08       	cp.w	r8,0
80008b9a:	c0 c1       	brne	80008bb2 <__sfvwrite_r+0x36>
80008b9c:	0e 9b       	mov	r11,r7
80008b9e:	0a 9c       	mov	r12,r5
80008ba0:	fe b0 f8 08 	rcall	80007bb0 <__swsetup_r>
80008ba4:	c0 70       	breq	80008bb2 <__sfvwrite_r+0x36>
80008ba6:	8e 68       	ld.sh	r8,r7[0xc]
80008ba8:	a7 a8       	sbr	r8,0x6
80008baa:	ae 68       	st.h	r7[0xc],r8
80008bac:	30 98       	mov	r8,9
80008bae:	8b 38       	st.w	r5[0xc],r8
80008bb0:	c2 e9       	rjmp	80008e0c <__sfvwrite_r+0x290>
80008bb2:	8e 63       	ld.sh	r3,r7[0xc]
80008bb4:	68 00       	ld.w	r0,r4[0x0]
80008bb6:	06 96       	mov	r6,r3
80008bb8:	e2 16 00 02 	andl	r6,0x2,COH
80008bbc:	c2 10       	breq	80008bfe <__sfvwrite_r+0x82>
80008bbe:	30 03       	mov	r3,0
80008bc0:	e0 62 04 00 	mov	r2,1024
80008bc4:	06 96       	mov	r6,r3
80008bc6:	c0 48       	rjmp	80008bce <__sfvwrite_r+0x52>
80008bc8:	60 03       	ld.w	r3,r0[0x0]
80008bca:	60 16       	ld.w	r6,r0[0x4]
80008bcc:	2f 80       	sub	r0,-8
80008bce:	58 06       	cp.w	r6,0
80008bd0:	cf c0       	breq	80008bc8 <__sfvwrite_r+0x4c>
80008bd2:	e0 46 04 00 	cp.w	r6,1024
80008bd6:	ec 09 17 80 	movls	r9,r6
80008bda:	e4 09 17 b0 	movhi	r9,r2
80008bde:	06 9a       	mov	r10,r3
80008be0:	6e a8       	ld.w	r8,r7[0x28]
80008be2:	6e 8b       	ld.w	r11,r7[0x20]
80008be4:	0a 9c       	mov	r12,r5
80008be6:	5d 18       	icall	r8
80008be8:	18 16       	sub	r6,r12
80008bea:	58 0c       	cp.w	r12,0
80008bec:	e0 8a 01 0d 	brle	80008e06 <__sfvwrite_r+0x28a>
80008bf0:	68 28       	ld.w	r8,r4[0x8]
80008bf2:	18 18       	sub	r8,r12
80008bf4:	89 28       	st.w	r4[0x8],r8
80008bf6:	e0 80 01 0d 	breq	80008e10 <__sfvwrite_r+0x294>
80008bfa:	18 03       	add	r3,r12
80008bfc:	ce 9b       	rjmp	80008bce <__sfvwrite_r+0x52>
80008bfe:	e7 d3 c0 01 	bfextu	r3,r3,0x0,0x1
80008c02:	c0 70       	breq	80008c10 <__sfvwrite_r+0x94>
80008c04:	50 06       	stdsp	sp[0x0],r6
80008c06:	0c 93       	mov	r3,r6
80008c08:	0c 91       	mov	r1,r6
80008c0a:	50 15       	stdsp	sp[0x4],r5
80008c0c:	08 92       	mov	r2,r4
80008c0e:	c9 f8       	rjmp	80008d4c <__sfvwrite_r+0x1d0>
80008c10:	06 96       	mov	r6,r3
80008c12:	08 91       	mov	r1,r4
80008c14:	c0 48       	rjmp	80008c1c <__sfvwrite_r+0xa0>
80008c16:	60 03       	ld.w	r3,r0[0x0]
80008c18:	60 16       	ld.w	r6,r0[0x4]
80008c1a:	2f 80       	sub	r0,-8
80008c1c:	58 06       	cp.w	r6,0
80008c1e:	cf c0       	breq	80008c16 <__sfvwrite_r+0x9a>
80008c20:	8e 68       	ld.sh	r8,r7[0xc]
80008c22:	6e 24       	ld.w	r4,r7[0x8]
80008c24:	10 99       	mov	r9,r8
80008c26:	e2 19 02 00 	andl	r9,0x200,COH
80008c2a:	c5 70       	breq	80008cd8 <__sfvwrite_r+0x15c>
80008c2c:	08 36       	cp.w	r6,r4
80008c2e:	c4 53       	brcs	80008cb8 <__sfvwrite_r+0x13c>
80008c30:	10 99       	mov	r9,r8
80008c32:	e2 19 04 80 	andl	r9,0x480,COH
80008c36:	c4 10       	breq	80008cb8 <__sfvwrite_r+0x13c>
80008c38:	6e 4b       	ld.w	r11,r7[0x10]
80008c3a:	6e 09       	ld.w	r9,r7[0x0]
80008c3c:	16 19       	sub	r9,r11
80008c3e:	50 09       	stdsp	sp[0x0],r9
80008c40:	6e 59       	ld.w	r9,r7[0x14]
80008c42:	10 9c       	mov	r12,r8
80008c44:	f2 09 00 1a 	add	r10,r9,r9<<0x1
80008c48:	30 28       	mov	r8,2
80008c4a:	f4 08 0c 08 	divs	r8,r10,r8
80008c4e:	fa e9 00 04 	st.d	sp[4],r8
80008c52:	10 94       	mov	r4,r8
80008c54:	40 09       	lddsp	r9,sp[0x0]
80008c56:	e2 1c 04 00 	andl	r12,0x400,COH
80008c5a:	2f f9       	sub	r9,-1
80008c5c:	0c 09       	add	r9,r6
80008c5e:	12 38       	cp.w	r8,r9
80008c60:	f2 04 17 30 	movlo	r4,r9
80008c64:	58 0c       	cp.w	r12,0
80008c66:	c1 10       	breq	80008c88 <__sfvwrite_r+0x10c>
80008c68:	08 9b       	mov	r11,r4
80008c6a:	0a 9c       	mov	r12,r5
80008c6c:	fe b0 de 8e 	rcall	80004988 <_malloc_r>
80008c70:	18 92       	mov	r2,r12
80008c72:	c1 50       	breq	80008c9c <__sfvwrite_r+0x120>
80008c74:	40 0a       	lddsp	r10,sp[0x0]
80008c76:	6e 4b       	ld.w	r11,r7[0x10]
80008c78:	fe b0 e0 a4 	rcall	80004dc0 <memcpy>
80008c7c:	8e 68       	ld.sh	r8,r7[0xc]
80008c7e:	e0 18 fb 7f 	andl	r8,0xfb7f
80008c82:	a7 b8       	sbr	r8,0x7
80008c84:	ae 68       	st.h	r7[0xc],r8
80008c86:	c0 e8       	rjmp	80008ca2 <__sfvwrite_r+0x126>
80008c88:	08 9a       	mov	r10,r4
80008c8a:	0a 9c       	mov	r12,r5
80008c8c:	fe b0 e1 46 	rcall	80004f18 <_realloc_r>
80008c90:	18 92       	mov	r2,r12
80008c92:	c0 81       	brne	80008ca2 <__sfvwrite_r+0x126>
80008c94:	6e 4b       	ld.w	r11,r7[0x10]
80008c96:	0a 9c       	mov	r12,r5
80008c98:	fe b0 e5 0c 	rcall	800056b0 <_free_r>
80008c9c:	30 c8       	mov	r8,12
80008c9e:	8b 38       	st.w	r5[0xc],r8
80008ca0:	cb 38       	rjmp	80008e06 <__sfvwrite_r+0x28a>
80008ca2:	40 0a       	lddsp	r10,sp[0x0]
80008ca4:	40 09       	lddsp	r9,sp[0x0]
80008ca6:	e8 0a 01 0a 	sub	r10,r4,r10
80008caa:	e4 09 00 08 	add	r8,r2,r9
80008cae:	8f 54       	st.w	r7[0x14],r4
80008cb0:	8f 2a       	st.w	r7[0x8],r10
80008cb2:	8f 08       	st.w	r7[0x0],r8
80008cb4:	8f 42       	st.w	r7[0x10],r2
80008cb6:	0c 94       	mov	r4,r6
80008cb8:	08 36       	cp.w	r6,r4
80008cba:	ec 04 17 30 	movlo	r4,r6
80008cbe:	06 9b       	mov	r11,r3
80008cc0:	08 9a       	mov	r10,r4
80008cc2:	6e 0c       	ld.w	r12,r7[0x0]
80008cc4:	fe b0 e5 e0 	rcall	80005884 <memmove>
80008cc8:	6e 08       	ld.w	r8,r7[0x0]
80008cca:	08 08       	add	r8,r4
80008ccc:	8f 08       	st.w	r7[0x0],r8
80008cce:	6e 28       	ld.w	r8,r7[0x8]
80008cd0:	08 18       	sub	r8,r4
80008cd2:	0c 94       	mov	r4,r6
80008cd4:	8f 28       	st.w	r7[0x8],r8
80008cd6:	c2 f8       	rjmp	80008d34 <__sfvwrite_r+0x1b8>
80008cd8:	08 36       	cp.w	r6,r4
80008cda:	5f ba       	srhi	r10
80008cdc:	6e 0c       	ld.w	r12,r7[0x0]
80008cde:	6e 48       	ld.w	r8,r7[0x10]
80008ce0:	10 3c       	cp.w	r12,r8
80008ce2:	5f b8       	srhi	r8
80008ce4:	f5 e8 00 08 	and	r8,r10,r8
80008ce8:	f2 08 18 00 	cp.b	r8,r9
80008cec:	c0 d0       	breq	80008d06 <__sfvwrite_r+0x18a>
80008cee:	06 9b       	mov	r11,r3
80008cf0:	08 9a       	mov	r10,r4
80008cf2:	fe b0 e5 c9 	rcall	80005884 <memmove>
80008cf6:	6e 08       	ld.w	r8,r7[0x0]
80008cf8:	08 08       	add	r8,r4
80008cfa:	0e 9b       	mov	r11,r7
80008cfc:	8f 08       	st.w	r7[0x0],r8
80008cfe:	0a 9c       	mov	r12,r5
80008d00:	cb 6e       	rcall	80008a6c <_fflush_r>
80008d02:	c1 90       	breq	80008d34 <__sfvwrite_r+0x1b8>
80008d04:	c8 18       	rjmp	80008e06 <__sfvwrite_r+0x28a>
80008d06:	6e 59       	ld.w	r9,r7[0x14]
80008d08:	12 36       	cp.w	r6,r9
80008d0a:	c0 a3       	brcs	80008d1e <__sfvwrite_r+0x1a2>
80008d0c:	6e a8       	ld.w	r8,r7[0x28]
80008d0e:	06 9a       	mov	r10,r3
80008d10:	6e 8b       	ld.w	r11,r7[0x20]
80008d12:	0a 9c       	mov	r12,r5
80008d14:	5d 18       	icall	r8
80008d16:	18 94       	mov	r4,r12
80008d18:	e0 89 00 0e 	brgt	80008d34 <__sfvwrite_r+0x1b8>
80008d1c:	c7 58       	rjmp	80008e06 <__sfvwrite_r+0x28a>
80008d1e:	0c 9a       	mov	r10,r6
80008d20:	06 9b       	mov	r11,r3
80008d22:	fe b0 e5 b1 	rcall	80005884 <memmove>
80008d26:	6e 08       	ld.w	r8,r7[0x0]
80008d28:	0c 08       	add	r8,r6
80008d2a:	0c 94       	mov	r4,r6
80008d2c:	8f 08       	st.w	r7[0x0],r8
80008d2e:	6e 28       	ld.w	r8,r7[0x8]
80008d30:	0c 18       	sub	r8,r6
80008d32:	8f 28       	st.w	r7[0x8],r8
80008d34:	62 28       	ld.w	r8,r1[0x8]
80008d36:	08 18       	sub	r8,r4
80008d38:	83 28       	st.w	r1[0x8],r8
80008d3a:	c6 b0       	breq	80008e10 <__sfvwrite_r+0x294>
80008d3c:	08 16       	sub	r6,r4
80008d3e:	08 03       	add	r3,r4
80008d40:	c6 eb       	rjmp	80008c1c <__sfvwrite_r+0xa0>
80008d42:	60 03       	ld.w	r3,r0[0x0]
80008d44:	60 11       	ld.w	r1,r0[0x4]
80008d46:	30 08       	mov	r8,0
80008d48:	2f 80       	sub	r0,-8
80008d4a:	50 08       	stdsp	sp[0x0],r8
80008d4c:	58 01       	cp.w	r1,0
80008d4e:	cf a0       	breq	80008d42 <__sfvwrite_r+0x1c6>
80008d50:	40 0a       	lddsp	r10,sp[0x0]
80008d52:	58 0a       	cp.w	r10,0
80008d54:	c1 41       	brne	80008d7c <__sfvwrite_r+0x200>
80008d56:	e2 c6 ff ff 	sub	r6,r1,-1
80008d5a:	02 9a       	mov	r10,r1
80008d5c:	30 ab       	mov	r11,10
80008d5e:	06 9c       	mov	r12,r3
80008d60:	cd 2c       	rcall	80008f04 <memchr>
80008d62:	f8 c8 ff ff 	sub	r8,r12,-1
80008d66:	58 0c       	cp.w	r12,0
80008d68:	f1 d3 e1 16 	subne	r6,r8,r3
80008d6c:	f9 b9 01 01 	movne	r9,1
80008d70:	fb f9 1a 00 	st.wne	sp[0x0],r9
80008d74:	f9 b8 00 01 	moveq	r8,1
80008d78:	fb f8 0a 00 	st.weq	sp[0x0],r8
80008d7c:	02 36       	cp.w	r6,r1
80008d7e:	ec 04 17 80 	movls	r4,r6
80008d82:	e2 04 17 b0 	movhi	r4,r1
80008d86:	6e 59       	ld.w	r9,r7[0x14]
80008d88:	6e 25       	ld.w	r5,r7[0x8]
80008d8a:	f2 05 00 05 	add	r5,r9,r5
80008d8e:	0a 34       	cp.w	r4,r5
80008d90:	5f 9a       	srgt	r10
80008d92:	6e 0c       	ld.w	r12,r7[0x0]
80008d94:	6e 48       	ld.w	r8,r7[0x10]
80008d96:	10 3c       	cp.w	r12,r8
80008d98:	5f b8       	srhi	r8
80008d9a:	f5 e8 00 08 	and	r8,r10,r8
80008d9e:	30 0a       	mov	r10,0
80008da0:	f4 08 18 00 	cp.b	r8,r10
80008da4:	c0 d0       	breq	80008dbe <__sfvwrite_r+0x242>
80008da6:	06 9b       	mov	r11,r3
80008da8:	0a 9a       	mov	r10,r5
80008daa:	fe b0 e5 6d 	rcall	80005884 <memmove>
80008dae:	6e 08       	ld.w	r8,r7[0x0]
80008db0:	0a 08       	add	r8,r5
80008db2:	0e 9b       	mov	r11,r7
80008db4:	8f 08       	st.w	r7[0x0],r8
80008db6:	40 1c       	lddsp	r12,sp[0x4]
80008db8:	c5 ae       	rcall	80008a6c <_fflush_r>
80008dba:	c1 80       	breq	80008dea <__sfvwrite_r+0x26e>
80008dbc:	c2 58       	rjmp	80008e06 <__sfvwrite_r+0x28a>
80008dbe:	12 34       	cp.w	r4,r9
80008dc0:	c0 a5       	brlt	80008dd4 <__sfvwrite_r+0x258>
80008dc2:	6e a8       	ld.w	r8,r7[0x28]
80008dc4:	06 9a       	mov	r10,r3
80008dc6:	6e 8b       	ld.w	r11,r7[0x20]
80008dc8:	40 1c       	lddsp	r12,sp[0x4]
80008dca:	5d 18       	icall	r8
80008dcc:	18 95       	mov	r5,r12
80008dce:	e0 89 00 0e 	brgt	80008dea <__sfvwrite_r+0x26e>
80008dd2:	c1 a8       	rjmp	80008e06 <__sfvwrite_r+0x28a>
80008dd4:	08 9a       	mov	r10,r4
80008dd6:	06 9b       	mov	r11,r3
80008dd8:	fe b0 e5 56 	rcall	80005884 <memmove>
80008ddc:	6e 08       	ld.w	r8,r7[0x0]
80008dde:	08 08       	add	r8,r4
80008de0:	08 95       	mov	r5,r4
80008de2:	8f 08       	st.w	r7[0x0],r8
80008de4:	6e 28       	ld.w	r8,r7[0x8]
80008de6:	08 18       	sub	r8,r4
80008de8:	8f 28       	st.w	r7[0x8],r8
80008dea:	0a 16       	sub	r6,r5
80008dec:	c0 61       	brne	80008df8 <__sfvwrite_r+0x27c>
80008dee:	0e 9b       	mov	r11,r7
80008df0:	40 1c       	lddsp	r12,sp[0x4]
80008df2:	c3 de       	rcall	80008a6c <_fflush_r>
80008df4:	c0 91       	brne	80008e06 <__sfvwrite_r+0x28a>
80008df6:	50 06       	stdsp	sp[0x0],r6
80008df8:	64 28       	ld.w	r8,r2[0x8]
80008dfa:	0a 18       	sub	r8,r5
80008dfc:	85 28       	st.w	r2[0x8],r8
80008dfe:	c0 90       	breq	80008e10 <__sfvwrite_r+0x294>
80008e00:	0a 11       	sub	r1,r5
80008e02:	0a 03       	add	r3,r5
80008e04:	ca 4b       	rjmp	80008d4c <__sfvwrite_r+0x1d0>
80008e06:	8e 68       	ld.sh	r8,r7[0xc]
80008e08:	a7 a8       	sbr	r8,0x6
80008e0a:	ae 68       	st.h	r7[0xc],r8
80008e0c:	3f fc       	mov	r12,-1
80008e0e:	c0 28       	rjmp	80008e12 <__sfvwrite_r+0x296>
80008e10:	30 0c       	mov	r12,0
80008e12:	2f dd       	sub	sp,-12
80008e14:	d8 32       	popm	r0-r7,pc
80008e16:	d7 03       	nop

80008e18 <_localeconv_r>:
80008e18:	fe cc df b8 	sub	r12,pc,-8264
80008e1c:	5e fc       	retal	r12
80008e1e:	d7 03       	nop

80008e20 <_lseek_r>:
80008e20:	d4 21       	pushm	r4-r7,lr
80008e22:	16 98       	mov	r8,r11
80008e24:	18 97       	mov	r7,r12
80008e26:	10 9c       	mov	r12,r8
80008e28:	30 08       	mov	r8,0
80008e2a:	14 9b       	mov	r11,r10
80008e2c:	e0 66 08 34 	mov	r6,2100
80008e30:	12 9a       	mov	r10,r9
80008e32:	8d 08       	st.w	r6[0x0],r8
80008e34:	fe b0 e2 12 	rcall	80005258 <_lseek>
80008e38:	5b fc       	cp.w	r12,-1
80008e3a:	c0 51       	brne	80008e44 <_lseek_r+0x24>
80008e3c:	6c 08       	ld.w	r8,r6[0x0]
80008e3e:	58 08       	cp.w	r8,0
80008e40:	ef f8 1a 03 	st.wne	r7[0xc],r8
80008e44:	d8 22       	popm	r4-r7,pc
80008e46:	d7 03       	nop

80008e48 <__smakebuf_r>:
80008e48:	d4 21       	pushm	r4-r7,lr
80008e4a:	20 fd       	sub	sp,60
80008e4c:	96 68       	ld.sh	r8,r11[0xc]
80008e4e:	16 97       	mov	r7,r11
80008e50:	18 96       	mov	r6,r12
80008e52:	e2 18 00 02 	andl	r8,0x2,COH
80008e56:	c3 d1       	brne	80008ed0 <__smakebuf_r+0x88>
80008e58:	96 7b       	ld.sh	r11,r11[0xe]
80008e5a:	f0 0b 19 00 	cp.h	r11,r8
80008e5e:	c0 55       	brlt	80008e68 <__smakebuf_r+0x20>
80008e60:	1a 9a       	mov	r10,sp
80008e62:	e0 a0 03 ab 	rcall	800095b8 <_fstat_r>
80008e66:	c0 f4       	brge	80008e84 <__smakebuf_r+0x3c>
80008e68:	8e 65       	ld.sh	r5,r7[0xc]
80008e6a:	0a 98       	mov	r8,r5
80008e6c:	ab b8       	sbr	r8,0xb
80008e6e:	e2 15 00 80 	andl	r5,0x80,COH
80008e72:	ae 68       	st.h	r7[0xc],r8
80008e74:	30 04       	mov	r4,0
80008e76:	e0 68 04 00 	mov	r8,1024
80008e7a:	f9 b5 01 40 	movne	r5,64
80008e7e:	f0 05 17 00 	moveq	r5,r8
80008e82:	c1 c8       	rjmp	80008eba <__smakebuf_r+0x72>
80008e84:	40 18       	lddsp	r8,sp[0x4]
80008e86:	e2 18 f0 00 	andl	r8,0xf000,COH
80008e8a:	e0 48 20 00 	cp.w	r8,8192
80008e8e:	5f 04       	sreq	r4
80008e90:	e0 48 80 00 	cp.w	r8,32768
80008e94:	c0 e1       	brne	80008eb0 <__smakebuf_r+0x68>
80008e96:	6e b9       	ld.w	r9,r7[0x2c]
80008e98:	fe c8 35 c8 	sub	r8,pc,13768
80008e9c:	10 39       	cp.w	r9,r8
80008e9e:	c0 91       	brne	80008eb0 <__smakebuf_r+0x68>
80008ea0:	8e 68       	ld.sh	r8,r7[0xc]
80008ea2:	e0 65 04 00 	mov	r5,1024
80008ea6:	ab a8       	sbr	r8,0xa
80008ea8:	ef 45 00 50 	st.w	r7[80],r5
80008eac:	ae 68       	st.h	r7[0xc],r8
80008eae:	c0 68       	rjmp	80008eba <__smakebuf_r+0x72>
80008eb0:	8e 68       	ld.sh	r8,r7[0xc]
80008eb2:	e0 65 04 00 	mov	r5,1024
80008eb6:	ab b8       	sbr	r8,0xb
80008eb8:	ae 68       	st.h	r7[0xc],r8
80008eba:	0a 9b       	mov	r11,r5
80008ebc:	0c 9c       	mov	r12,r6
80008ebe:	fe b0 dd 65 	rcall	80004988 <_malloc_r>
80008ec2:	8e 68       	ld.sh	r8,r7[0xc]
80008ec4:	c0 d1       	brne	80008ede <__smakebuf_r+0x96>
80008ec6:	ed b8 00 09 	bld	r8,0x9
80008eca:	c1 b0       	breq	80008f00 <__smakebuf_r+0xb8>
80008ecc:	a1 b8       	sbr	r8,0x1
80008ece:	ae 68       	st.h	r7[0xc],r8
80008ed0:	ee c8 ff b9 	sub	r8,r7,-71
80008ed4:	8f 48       	st.w	r7[0x10],r8
80008ed6:	8f 08       	st.w	r7[0x0],r8
80008ed8:	30 18       	mov	r8,1
80008eda:	8f 58       	st.w	r7[0x14],r8
80008edc:	c1 28       	rjmp	80008f00 <__smakebuf_r+0xb8>
80008ede:	a7 b8       	sbr	r8,0x7
80008ee0:	8f 4c       	st.w	r7[0x10],r12
80008ee2:	ae 68       	st.h	r7[0xc],r8
80008ee4:	8f 55       	st.w	r7[0x14],r5
80008ee6:	fe c8 3a 0a 	sub	r8,pc,14858
80008eea:	8f 0c       	st.w	r7[0x0],r12
80008eec:	8d a8       	st.w	r6[0x28],r8
80008eee:	58 04       	cp.w	r4,0
80008ef0:	c0 80       	breq	80008f00 <__smakebuf_r+0xb8>
80008ef2:	8e 7c       	ld.sh	r12,r7[0xe]
80008ef4:	fe b0 e1 bc 	rcall	8000526c <isatty>
80008ef8:	c0 40       	breq	80008f00 <__smakebuf_r+0xb8>
80008efa:	8e 68       	ld.sh	r8,r7[0xc]
80008efc:	a1 a8       	sbr	r8,0x0
80008efe:	ae 68       	st.h	r7[0xc],r8
80008f00:	2f 1d       	sub	sp,-60
80008f02:	d8 22       	popm	r4-r7,pc

80008f04 <memchr>:
80008f04:	f7 db c0 08 	bfextu	r11,r11,0x0,0x8
80008f08:	c0 68       	rjmp	80008f14 <memchr+0x10>
80008f0a:	20 1a       	sub	r10,1
80008f0c:	19 88       	ld.ub	r8,r12[0x0]
80008f0e:	16 38       	cp.w	r8,r11
80008f10:	5e 0c       	reteq	r12
80008f12:	2f fc       	sub	r12,-1
80008f14:	58 0a       	cp.w	r10,0
80008f16:	cf a1       	brne	80008f0a <memchr+0x6>
80008f18:	5e fa       	retal	r10

80008f1a <__hi0bits>:
80008f1a:	18 98       	mov	r8,r12
80008f1c:	e0 1c 00 00 	andl	r12,0x0
80008f20:	f0 09 15 10 	lsl	r9,r8,0x10
80008f24:	58 0c       	cp.w	r12,0
80008f26:	f2 08 17 00 	moveq	r8,r9
80008f2a:	f9 bc 00 10 	moveq	r12,16
80008f2e:	f9 bc 01 00 	movne	r12,0
80008f32:	10 9a       	mov	r10,r8
80008f34:	f0 09 15 08 	lsl	r9,r8,0x8
80008f38:	e6 1a ff 00 	andh	r10,0xff00,COH
80008f3c:	f7 bc 00 f8 	subeq	r12,-8
80008f40:	f2 08 17 00 	moveq	r8,r9
80008f44:	10 9a       	mov	r10,r8
80008f46:	f0 09 15 04 	lsl	r9,r8,0x4
80008f4a:	e6 1a f0 00 	andh	r10,0xf000,COH
80008f4e:	f7 bc 00 fc 	subeq	r12,-4
80008f52:	f2 08 17 00 	moveq	r8,r9
80008f56:	10 9a       	mov	r10,r8
80008f58:	f0 09 15 02 	lsl	r9,r8,0x2
80008f5c:	e6 1a c0 00 	andh	r10,0xc000,COH
80008f60:	f7 bc 00 fe 	subeq	r12,-2
80008f64:	f2 08 17 00 	moveq	r8,r9
80008f68:	58 08       	cp.w	r8,0
80008f6a:	5e 5c       	retlt	r12
80008f6c:	ed b8 00 1e 	bld	r8,0x1e
80008f70:	f9 bc 01 20 	movne	r12,32
80008f74:	f7 bc 00 ff 	subeq	r12,-1
80008f78:	5e fc       	retal	r12

80008f7a <__lo0bits>:
80008f7a:	18 99       	mov	r9,r12
80008f7c:	78 08       	ld.w	r8,r12[0x0]
80008f7e:	f9 d8 c0 03 	bfextu	r12,r8,0x0,0x3
80008f82:	c1 50       	breq	80008fac <__lo0bits+0x32>
80008f84:	ed b8 00 00 	bld	r8,0x0
80008f88:	c0 21       	brne	80008f8c <__lo0bits+0x12>
80008f8a:	5e fd       	retal	0
80008f8c:	10 9b       	mov	r11,r8
80008f8e:	f0 0a 16 01 	lsr	r10,r8,0x1
80008f92:	e2 1b 00 02 	andl	r11,0x2,COH
80008f96:	a3 88       	lsr	r8,0x2
80008f98:	58 0b       	cp.w	r11,0
80008f9a:	f3 fa 1a 00 	st.wne	r9[0x0],r10
80008f9e:	f9 bc 01 01 	movne	r12,1
80008fa2:	f3 f8 0a 00 	st.weq	r9[0x0],r8
80008fa6:	f9 bc 00 02 	moveq	r12,2
80008faa:	5e fc       	retal	r12
80008fac:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
80008fb0:	f0 0b 16 10 	lsr	r11,r8,0x10
80008fb4:	58 0a       	cp.w	r10,0
80008fb6:	f6 08 17 00 	moveq	r8,r11
80008fba:	f9 bc 00 10 	moveq	r12,16
80008fbe:	f7 d8 c0 08 	bfextu	r11,r8,0x0,0x8
80008fc2:	f0 0a 16 08 	lsr	r10,r8,0x8
80008fc6:	58 0b       	cp.w	r11,0
80008fc8:	f7 bc 00 f8 	subeq	r12,-8
80008fcc:	f4 08 17 00 	moveq	r8,r10
80008fd0:	f7 d8 c0 04 	bfextu	r11,r8,0x0,0x4
80008fd4:	f0 0a 16 04 	lsr	r10,r8,0x4
80008fd8:	58 0b       	cp.w	r11,0
80008fda:	f7 bc 00 fc 	subeq	r12,-4
80008fde:	f4 08 17 00 	moveq	r8,r10
80008fe2:	f7 d8 c0 02 	bfextu	r11,r8,0x0,0x2
80008fe6:	f0 0a 16 02 	lsr	r10,r8,0x2
80008fea:	58 0b       	cp.w	r11,0
80008fec:	f7 bc 00 fe 	subeq	r12,-2
80008ff0:	f4 08 17 00 	moveq	r8,r10
80008ff4:	ed b8 00 00 	bld	r8,0x0
80008ff8:	c0 60       	breq	80009004 <__lo0bits+0x8a>
80008ffa:	a1 98       	lsr	r8,0x1
80008ffc:	c0 31       	brne	80009002 <__lo0bits+0x88>
80008ffe:	32 0c       	mov	r12,32
80009000:	5e fc       	retal	r12
80009002:	2f fc       	sub	r12,-1
80009004:	93 08       	st.w	r9[0x0],r8
80009006:	5e fc       	retal	r12

80009008 <__mcmp>:
80009008:	d4 01       	pushm	lr
8000900a:	18 98       	mov	r8,r12
8000900c:	76 49       	ld.w	r9,r11[0x10]
8000900e:	78 4c       	ld.w	r12,r12[0x10]
80009010:	12 1c       	sub	r12,r9
80009012:	c1 31       	brne	80009038 <__mcmp+0x30>
80009014:	2f b9       	sub	r9,-5
80009016:	a3 69       	lsl	r9,0x2
80009018:	12 0b       	add	r11,r9
8000901a:	f0 09 00 09 	add	r9,r8,r9
8000901e:	2e c8       	sub	r8,-20
80009020:	13 4e       	ld.w	lr,--r9
80009022:	17 4a       	ld.w	r10,--r11
80009024:	14 3e       	cp.w	lr,r10
80009026:	c0 60       	breq	80009032 <__mcmp+0x2a>
80009028:	f9 bc 03 ff 	movlo	r12,-1
8000902c:	f9 bc 02 01 	movhs	r12,1
80009030:	d8 02       	popm	pc
80009032:	10 39       	cp.w	r9,r8
80009034:	fe 9b ff f6 	brhi	80009020 <__mcmp+0x18>
80009038:	d8 02       	popm	pc
8000903a:	d7 03       	nop

8000903c <_Bfree>:
8000903c:	d4 21       	pushm	r4-r7,lr
8000903e:	18 97       	mov	r7,r12
80009040:	16 95       	mov	r5,r11
80009042:	78 96       	ld.w	r6,r12[0x24]
80009044:	58 06       	cp.w	r6,0
80009046:	c0 91       	brne	80009058 <_Bfree+0x1c>
80009048:	31 0c       	mov	r12,16
8000904a:	fe b0 dc 97 	rcall	80004978 <malloc>
8000904e:	99 36       	st.w	r12[0xc],r6
80009050:	8f 9c       	st.w	r7[0x24],r12
80009052:	99 16       	st.w	r12[0x4],r6
80009054:	99 26       	st.w	r12[0x8],r6
80009056:	99 06       	st.w	r12[0x0],r6
80009058:	58 05       	cp.w	r5,0
8000905a:	c0 90       	breq	8000906c <_Bfree+0x30>
8000905c:	6a 19       	ld.w	r9,r5[0x4]
8000905e:	6e 98       	ld.w	r8,r7[0x24]
80009060:	70 38       	ld.w	r8,r8[0xc]
80009062:	f0 09 03 2a 	ld.w	r10,r8[r9<<0x2]
80009066:	8b 0a       	st.w	r5[0x0],r10
80009068:	f0 09 09 25 	st.w	r8[r9<<0x2],r5
8000906c:	d8 22       	popm	r4-r7,pc
8000906e:	d7 03       	nop

80009070 <_Balloc>:
80009070:	d4 21       	pushm	r4-r7,lr
80009072:	18 97       	mov	r7,r12
80009074:	16 96       	mov	r6,r11
80009076:	78 95       	ld.w	r5,r12[0x24]
80009078:	58 05       	cp.w	r5,0
8000907a:	c0 91       	brne	8000908c <_Balloc+0x1c>
8000907c:	31 0c       	mov	r12,16
8000907e:	fe b0 dc 7d 	rcall	80004978 <malloc>
80009082:	99 35       	st.w	r12[0xc],r5
80009084:	8f 9c       	st.w	r7[0x24],r12
80009086:	99 15       	st.w	r12[0x4],r5
80009088:	99 25       	st.w	r12[0x8],r5
8000908a:	99 05       	st.w	r12[0x0],r5
8000908c:	6e 95       	ld.w	r5,r7[0x24]
8000908e:	6a 38       	ld.w	r8,r5[0xc]
80009090:	58 08       	cp.w	r8,0
80009092:	c0 b1       	brne	800090a8 <_Balloc+0x38>
80009094:	31 0a       	mov	r10,16
80009096:	30 4b       	mov	r11,4
80009098:	0e 9c       	mov	r12,r7
8000909a:	e0 a0 02 63 	rcall	80009560 <_calloc_r>
8000909e:	8b 3c       	st.w	r5[0xc],r12
800090a0:	6e 98       	ld.w	r8,r7[0x24]
800090a2:	70 3c       	ld.w	r12,r8[0xc]
800090a4:	58 0c       	cp.w	r12,0
800090a6:	c1 b0       	breq	800090dc <_Balloc+0x6c>
800090a8:	6e 98       	ld.w	r8,r7[0x24]
800090aa:	70 38       	ld.w	r8,r8[0xc]
800090ac:	f0 06 00 28 	add	r8,r8,r6<<0x2
800090b0:	70 0c       	ld.w	r12,r8[0x0]
800090b2:	58 0c       	cp.w	r12,0
800090b4:	c0 40       	breq	800090bc <_Balloc+0x4c>
800090b6:	78 09       	ld.w	r9,r12[0x0]
800090b8:	91 09       	st.w	r8[0x0],r9
800090ba:	c0 e8       	rjmp	800090d6 <_Balloc+0x66>
800090bc:	0e 9c       	mov	r12,r7
800090be:	30 17       	mov	r7,1
800090c0:	0e 9b       	mov	r11,r7
800090c2:	ee 06 09 47 	lsl	r7,r7,r6
800090c6:	ee ca ff fb 	sub	r10,r7,-5
800090ca:	a3 6a       	lsl	r10,0x2
800090cc:	e0 a0 02 4a 	rcall	80009560 <_calloc_r>
800090d0:	c0 60       	breq	800090dc <_Balloc+0x6c>
800090d2:	99 16       	st.w	r12[0x4],r6
800090d4:	99 27       	st.w	r12[0x8],r7
800090d6:	30 08       	mov	r8,0
800090d8:	99 38       	st.w	r12[0xc],r8
800090da:	99 48       	st.w	r12[0x10],r8
800090dc:	d8 22       	popm	r4-r7,pc
800090de:	d7 03       	nop

800090e0 <__d2b>:
800090e0:	d4 31       	pushm	r0-r7,lr
800090e2:	20 2d       	sub	sp,8
800090e4:	16 93       	mov	r3,r11
800090e6:	12 96       	mov	r6,r9
800090e8:	10 95       	mov	r5,r8
800090ea:	14 92       	mov	r2,r10
800090ec:	30 1b       	mov	r11,1
800090ee:	cc 1f       	rcall	80009070 <_Balloc>
800090f0:	f3 d3 c0 14 	bfextu	r9,r3,0x0,0x14
800090f4:	50 09       	stdsp	sp[0x0],r9
800090f6:	f1 d3 c0 1f 	bfextu	r8,r3,0x0,0x1f
800090fa:	b5 a9       	sbr	r9,0x14
800090fc:	f0 01 16 14 	lsr	r1,r8,0x14
80009100:	fb f9 1a 00 	st.wne	sp[0x0],r9
80009104:	18 94       	mov	r4,r12
80009106:	58 02       	cp.w	r2,0
80009108:	c1 d0       	breq	80009142 <__d2b+0x62>
8000910a:	fa cc ff f8 	sub	r12,sp,-8
8000910e:	18 d2       	st.w	--r12,r2
80009110:	c3 5f       	rcall	80008f7a <__lo0bits>
80009112:	40 18       	lddsp	r8,sp[0x4]
80009114:	c0 d0       	breq	8000912e <__d2b+0x4e>
80009116:	40 09       	lddsp	r9,sp[0x0]
80009118:	f8 0a 11 20 	rsub	r10,r12,32
8000911c:	f2 0a 09 4a 	lsl	r10,r9,r10
80009120:	f5 e8 10 08 	or	r8,r10,r8
80009124:	89 58       	st.w	r4[0x14],r8
80009126:	f2 0c 0a 49 	lsr	r9,r9,r12
8000912a:	50 09       	stdsp	sp[0x0],r9
8000912c:	c0 28       	rjmp	80009130 <__d2b+0x50>
8000912e:	89 58       	st.w	r4[0x14],r8
80009130:	40 08       	lddsp	r8,sp[0x0]
80009132:	58 08       	cp.w	r8,0
80009134:	f9 b3 01 02 	movne	r3,2
80009138:	f9 b3 00 01 	moveq	r3,1
8000913c:	89 68       	st.w	r4[0x18],r8
8000913e:	89 43       	st.w	r4[0x10],r3
80009140:	c0 88       	rjmp	80009150 <__d2b+0x70>
80009142:	1a 9c       	mov	r12,sp
80009144:	c1 bf       	rcall	80008f7a <__lo0bits>
80009146:	30 13       	mov	r3,1
80009148:	40 08       	lddsp	r8,sp[0x0]
8000914a:	2e 0c       	sub	r12,-32
8000914c:	89 43       	st.w	r4[0x10],r3
8000914e:	89 58       	st.w	r4[0x14],r8
80009150:	58 01       	cp.w	r1,0
80009152:	c0 90       	breq	80009164 <__d2b+0x84>
80009154:	e2 c1 04 33 	sub	r1,r1,1075
80009158:	18 01       	add	r1,r12
8000915a:	8d 01       	st.w	r6[0x0],r1
8000915c:	f8 0c 11 35 	rsub	r12,r12,53
80009160:	8b 0c       	st.w	r5[0x0],r12
80009162:	c0 c8       	rjmp	8000917a <__d2b+0x9a>
80009164:	e6 c8 ff fc 	sub	r8,r3,-4
80009168:	f8 cc 04 32 	sub	r12,r12,1074
8000916c:	a5 73       	lsl	r3,0x5
8000916e:	8d 0c       	st.w	r6[0x0],r12
80009170:	e8 08 03 2c 	ld.w	r12,r4[r8<<0x2]
80009174:	cd 3e       	rcall	80008f1a <__hi0bits>
80009176:	18 13       	sub	r3,r12
80009178:	8b 03       	st.w	r5[0x0],r3
8000917a:	08 9c       	mov	r12,r4
8000917c:	2f ed       	sub	sp,-8
8000917e:	d8 32       	popm	r0-r7,pc

80009180 <__mdiff>:
80009180:	d4 31       	pushm	r0-r7,lr
80009182:	74 48       	ld.w	r8,r10[0x10]
80009184:	76 45       	ld.w	r5,r11[0x10]
80009186:	16 97       	mov	r7,r11
80009188:	14 96       	mov	r6,r10
8000918a:	10 15       	sub	r5,r8
8000918c:	c1 31       	brne	800091b2 <__mdiff+0x32>
8000918e:	2f b8       	sub	r8,-5
80009190:	ee ce ff ec 	sub	lr,r7,-20
80009194:	a3 68       	lsl	r8,0x2
80009196:	f4 08 00 0b 	add	r11,r10,r8
8000919a:	ee 08 00 08 	add	r8,r7,r8
8000919e:	11 4a       	ld.w	r10,--r8
800091a0:	17 49       	ld.w	r9,--r11
800091a2:	12 3a       	cp.w	r10,r9
800091a4:	c0 30       	breq	800091aa <__mdiff+0x2a>
800091a6:	c0 e2       	brcc	800091c2 <__mdiff+0x42>
800091a8:	c0 78       	rjmp	800091b6 <__mdiff+0x36>
800091aa:	1c 38       	cp.w	r8,lr
800091ac:	fe 9b ff f9 	brhi	8000919e <__mdiff+0x1e>
800091b0:	c4 98       	rjmp	80009242 <__mdiff+0xc2>
800091b2:	58 05       	cp.w	r5,0
800091b4:	c0 64       	brge	800091c0 <__mdiff+0x40>
800091b6:	0e 98       	mov	r8,r7
800091b8:	30 15       	mov	r5,1
800091ba:	0c 97       	mov	r7,r6
800091bc:	10 96       	mov	r6,r8
800091be:	c0 28       	rjmp	800091c2 <__mdiff+0x42>
800091c0:	30 05       	mov	r5,0
800091c2:	6e 1b       	ld.w	r11,r7[0x4]
800091c4:	c5 6f       	rcall	80009070 <_Balloc>
800091c6:	6e 49       	ld.w	r9,r7[0x10]
800091c8:	6c 44       	ld.w	r4,r6[0x10]
800091ca:	99 35       	st.w	r12[0xc],r5
800091cc:	2f b4       	sub	r4,-5
800091ce:	f2 c5 ff fb 	sub	r5,r9,-5
800091d2:	ec 04 00 24 	add	r4,r6,r4<<0x2
800091d6:	ee 05 00 25 	add	r5,r7,r5<<0x2
800091da:	2e c6       	sub	r6,-20
800091dc:	2e c7       	sub	r7,-20
800091de:	f8 c8 ff ec 	sub	r8,r12,-20
800091e2:	30 0a       	mov	r10,0
800091e4:	0f 0e       	ld.w	lr,r7++
800091e6:	0d 0b       	ld.w	r11,r6++
800091e8:	fc 02 16 10 	lsr	r2,lr,0x10
800091ec:	f6 03 16 10 	lsr	r3,r11,0x10
800091f0:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
800091f4:	e4 03 01 03 	sub	r3,r2,r3
800091f8:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
800091fc:	fc 0b 01 0b 	sub	r11,lr,r11
80009200:	f6 0a 00 0a 	add	r10,r11,r10
80009204:	b0 1a       	st.h	r8[0x2],r10
80009206:	b1 4a       	asr	r10,0x10
80009208:	e6 0a 00 0a 	add	r10,r3,r10
8000920c:	b0 0a       	st.h	r8[0x0],r10
8000920e:	2f c8       	sub	r8,-4
80009210:	b1 4a       	asr	r10,0x10
80009212:	08 36       	cp.w	r6,r4
80009214:	ce 83       	brcs	800091e4 <__mdiff+0x64>
80009216:	c0 d8       	rjmp	80009230 <__mdiff+0xb0>
80009218:	0f 0b       	ld.w	r11,r7++
8000921a:	f6 0e 16 10 	lsr	lr,r11,0x10
8000921e:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
80009222:	16 0a       	add	r10,r11
80009224:	b0 1a       	st.h	r8[0x2],r10
80009226:	b1 4a       	asr	r10,0x10
80009228:	1c 0a       	add	r10,lr
8000922a:	b0 0a       	st.h	r8[0x0],r10
8000922c:	2f c8       	sub	r8,-4
8000922e:	b1 4a       	asr	r10,0x10
80009230:	0a 37       	cp.w	r7,r5
80009232:	cf 33       	brcs	80009218 <__mdiff+0x98>
80009234:	c0 28       	rjmp	80009238 <__mdiff+0xb8>
80009236:	20 19       	sub	r9,1
80009238:	11 4a       	ld.w	r10,--r8
8000923a:	58 0a       	cp.w	r10,0
8000923c:	cf d0       	breq	80009236 <__mdiff+0xb6>
8000923e:	99 49       	st.w	r12[0x10],r9
80009240:	d8 32       	popm	r0-r7,pc
80009242:	30 0b       	mov	r11,0
80009244:	c1 6f       	rcall	80009070 <_Balloc>
80009246:	30 18       	mov	r8,1
80009248:	99 48       	st.w	r12[0x10],r8
8000924a:	30 08       	mov	r8,0
8000924c:	99 58       	st.w	r12[0x14],r8
8000924e:	d8 32       	popm	r0-r7,pc

80009250 <__lshift>:
80009250:	d4 31       	pushm	r0-r7,lr
80009252:	16 97       	mov	r7,r11
80009254:	76 46       	ld.w	r6,r11[0x10]
80009256:	f4 02 14 05 	asr	r2,r10,0x5
8000925a:	2f f6       	sub	r6,-1
8000925c:	14 93       	mov	r3,r10
8000925e:	18 94       	mov	r4,r12
80009260:	04 06       	add	r6,r2
80009262:	76 1b       	ld.w	r11,r11[0x4]
80009264:	6e 28       	ld.w	r8,r7[0x8]
80009266:	c0 38       	rjmp	8000926c <__lshift+0x1c>
80009268:	2f fb       	sub	r11,-1
8000926a:	a1 78       	lsl	r8,0x1
8000926c:	10 36       	cp.w	r6,r8
8000926e:	fe 99 ff fd 	brgt	80009268 <__lshift+0x18>
80009272:	08 9c       	mov	r12,r4
80009274:	cf ee       	rcall	80009070 <_Balloc>
80009276:	30 09       	mov	r9,0
80009278:	18 95       	mov	r5,r12
8000927a:	f8 c8 ff ec 	sub	r8,r12,-20
8000927e:	12 9a       	mov	r10,r9
80009280:	c0 38       	rjmp	80009286 <__lshift+0x36>
80009282:	10 aa       	st.w	r8++,r10
80009284:	2f f9       	sub	r9,-1
80009286:	04 39       	cp.w	r9,r2
80009288:	cf d5       	brlt	80009282 <__lshift+0x32>
8000928a:	6e 4b       	ld.w	r11,r7[0x10]
8000928c:	e7 d3 c0 05 	bfextu	r3,r3,0x0,0x5
80009290:	2f bb       	sub	r11,-5
80009292:	ee c9 ff ec 	sub	r9,r7,-20
80009296:	ee 0b 00 2b 	add	r11,r7,r11<<0x2
8000929a:	58 03       	cp.w	r3,0
8000929c:	c1 30       	breq	800092c2 <__lshift+0x72>
8000929e:	e6 0c 11 20 	rsub	r12,r3,32
800092a2:	30 0a       	mov	r10,0
800092a4:	72 02       	ld.w	r2,r9[0x0]
800092a6:	e4 03 09 42 	lsl	r2,r2,r3
800092aa:	04 4a       	or	r10,r2
800092ac:	10 aa       	st.w	r8++,r10
800092ae:	13 0a       	ld.w	r10,r9++
800092b0:	f4 0c 0a 4a 	lsr	r10,r10,r12
800092b4:	16 39       	cp.w	r9,r11
800092b6:	cf 73       	brcs	800092a4 <__lshift+0x54>
800092b8:	91 0a       	st.w	r8[0x0],r10
800092ba:	58 0a       	cp.w	r10,0
800092bc:	c0 70       	breq	800092ca <__lshift+0x7a>
800092be:	2f f6       	sub	r6,-1
800092c0:	c0 58       	rjmp	800092ca <__lshift+0x7a>
800092c2:	13 0a       	ld.w	r10,r9++
800092c4:	10 aa       	st.w	r8++,r10
800092c6:	16 39       	cp.w	r9,r11
800092c8:	cf d3       	brcs	800092c2 <__lshift+0x72>
800092ca:	08 9c       	mov	r12,r4
800092cc:	20 16       	sub	r6,1
800092ce:	0e 9b       	mov	r11,r7
800092d0:	8b 46       	st.w	r5[0x10],r6
800092d2:	cb 5e       	rcall	8000903c <_Bfree>
800092d4:	0a 9c       	mov	r12,r5
800092d6:	d8 32       	popm	r0-r7,pc

800092d8 <__multiply>:
800092d8:	d4 31       	pushm	r0-r7,lr
800092da:	20 2d       	sub	sp,8
800092dc:	76 49       	ld.w	r9,r11[0x10]
800092de:	74 48       	ld.w	r8,r10[0x10]
800092e0:	16 96       	mov	r6,r11
800092e2:	14 95       	mov	r5,r10
800092e4:	10 39       	cp.w	r9,r8
800092e6:	ec 08 17 50 	movlt	r8,r6
800092ea:	ea 06 17 50 	movlt	r6,r5
800092ee:	f0 05 17 50 	movlt	r5,r8
800092f2:	6c 28       	ld.w	r8,r6[0x8]
800092f4:	76 43       	ld.w	r3,r11[0x10]
800092f6:	74 42       	ld.w	r2,r10[0x10]
800092f8:	76 1b       	ld.w	r11,r11[0x4]
800092fa:	e4 03 00 07 	add	r7,r2,r3
800092fe:	10 37       	cp.w	r7,r8
80009300:	f7 bb 09 ff 	subgt	r11,-1
80009304:	cb 6e       	rcall	80009070 <_Balloc>
80009306:	ee c4 ff fb 	sub	r4,r7,-5
8000930a:	f8 c9 ff ec 	sub	r9,r12,-20
8000930e:	f8 04 00 24 	add	r4,r12,r4<<0x2
80009312:	30 0a       	mov	r10,0
80009314:	12 98       	mov	r8,r9
80009316:	c0 28       	rjmp	8000931a <__multiply+0x42>
80009318:	10 aa       	st.w	r8++,r10
8000931a:	08 38       	cp.w	r8,r4
8000931c:	cf e3       	brcs	80009318 <__multiply+0x40>
8000931e:	2f b3       	sub	r3,-5
80009320:	2f b2       	sub	r2,-5
80009322:	ec 03 00 23 	add	r3,r6,r3<<0x2
80009326:	ea 02 00 22 	add	r2,r5,r2<<0x2
8000932a:	ec cb ff ec 	sub	r11,r6,-20
8000932e:	50 12       	stdsp	sp[0x4],r2
80009330:	ea ca ff ec 	sub	r10,r5,-20
80009334:	c4 48       	rjmp	800093bc <__multiply+0xe4>
80009336:	94 95       	ld.uh	r5,r10[0x2]
80009338:	58 05       	cp.w	r5,0
8000933a:	c2 00       	breq	8000937a <__multiply+0xa2>
8000933c:	12 98       	mov	r8,r9
8000933e:	16 96       	mov	r6,r11
80009340:	30 0e       	mov	lr,0
80009342:	50 09       	stdsp	sp[0x0],r9
80009344:	0d 02       	ld.w	r2,r6++
80009346:	e4 00 16 10 	lsr	r0,r2,0x10
8000934a:	70 01       	ld.w	r1,r8[0x0]
8000934c:	70 09       	ld.w	r9,r8[0x0]
8000934e:	b1 81       	lsr	r1,0x10
80009350:	e5 d2 c0 10 	bfextu	r2,r2,0x0,0x10
80009354:	e0 05 03 41 	mac	r1,r0,r5
80009358:	ab 32       	mul	r2,r5
8000935a:	e1 d9 c0 10 	bfextu	r0,r9,0x0,0x10
8000935e:	00 02       	add	r2,r0
80009360:	e4 0e 00 0e 	add	lr,r2,lr
80009364:	b0 1e       	st.h	r8[0x2],lr
80009366:	b1 8e       	lsr	lr,0x10
80009368:	1c 01       	add	r1,lr
8000936a:	b0 01       	st.h	r8[0x0],r1
8000936c:	e2 0e 16 10 	lsr	lr,r1,0x10
80009370:	2f c8       	sub	r8,-4
80009372:	06 36       	cp.w	r6,r3
80009374:	ce 83       	brcs	80009344 <__multiply+0x6c>
80009376:	40 09       	lddsp	r9,sp[0x0]
80009378:	91 0e       	st.w	r8[0x0],lr
8000937a:	94 86       	ld.uh	r6,r10[0x0]
8000937c:	58 06       	cp.w	r6,0
8000937e:	c1 d0       	breq	800093b8 <__multiply+0xe0>
80009380:	72 02       	ld.w	r2,r9[0x0]
80009382:	12 98       	mov	r8,r9
80009384:	16 9e       	mov	lr,r11
80009386:	30 05       	mov	r5,0
80009388:	b0 12       	st.h	r8[0x2],r2
8000938a:	1d 01       	ld.w	r1,lr++
8000938c:	90 82       	ld.uh	r2,r8[0x0]
8000938e:	e1 d1 c0 10 	bfextu	r0,r1,0x0,0x10
80009392:	ad 30       	mul	r0,r6
80009394:	e0 02 00 02 	add	r2,r0,r2
80009398:	e4 05 00 05 	add	r5,r2,r5
8000939c:	b0 05       	st.h	r8[0x0],r5
8000939e:	b1 85       	lsr	r5,0x10
800093a0:	b1 81       	lsr	r1,0x10
800093a2:	2f c8       	sub	r8,-4
800093a4:	ad 31       	mul	r1,r6
800093a6:	90 92       	ld.uh	r2,r8[0x2]
800093a8:	e2 02 00 02 	add	r2,r1,r2
800093ac:	0a 02       	add	r2,r5
800093ae:	e4 05 16 10 	lsr	r5,r2,0x10
800093b2:	06 3e       	cp.w	lr,r3
800093b4:	ce a3       	brcs	80009388 <__multiply+0xb0>
800093b6:	91 02       	st.w	r8[0x0],r2
800093b8:	2f ca       	sub	r10,-4
800093ba:	2f c9       	sub	r9,-4
800093bc:	40 18       	lddsp	r8,sp[0x4]
800093be:	10 3a       	cp.w	r10,r8
800093c0:	cb b3       	brcs	80009336 <__multiply+0x5e>
800093c2:	c0 28       	rjmp	800093c6 <__multiply+0xee>
800093c4:	20 17       	sub	r7,1
800093c6:	58 07       	cp.w	r7,0
800093c8:	e0 8a 00 05 	brle	800093d2 <__multiply+0xfa>
800093cc:	09 48       	ld.w	r8,--r4
800093ce:	58 08       	cp.w	r8,0
800093d0:	cf a0       	breq	800093c4 <__multiply+0xec>
800093d2:	99 47       	st.w	r12[0x10],r7
800093d4:	2f ed       	sub	sp,-8
800093d6:	d8 32       	popm	r0-r7,pc

800093d8 <__i2b>:
800093d8:	d4 21       	pushm	r4-r7,lr
800093da:	16 97       	mov	r7,r11
800093dc:	30 1b       	mov	r11,1
800093de:	c4 9e       	rcall	80009070 <_Balloc>
800093e0:	30 19       	mov	r9,1
800093e2:	99 57       	st.w	r12[0x14],r7
800093e4:	99 49       	st.w	r12[0x10],r9
800093e6:	d8 22       	popm	r4-r7,pc

800093e8 <__multadd>:
800093e8:	d4 31       	pushm	r0-r7,lr
800093ea:	30 08       	mov	r8,0
800093ec:	12 95       	mov	r5,r9
800093ee:	16 97       	mov	r7,r11
800093f0:	18 96       	mov	r6,r12
800093f2:	76 44       	ld.w	r4,r11[0x10]
800093f4:	f6 c9 ff ec 	sub	r9,r11,-20
800093f8:	72 0b       	ld.w	r11,r9[0x0]
800093fa:	f6 0c 16 10 	lsr	r12,r11,0x10
800093fe:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
80009402:	f4 0c 02 4c 	mul	r12,r10,r12
80009406:	f4 0b 03 45 	mac	r5,r10,r11
8000940a:	f7 d5 c0 10 	bfextu	r11,r5,0x0,0x10
8000940e:	b1 85       	lsr	r5,0x10
80009410:	18 05       	add	r5,r12
80009412:	ea 0c 15 10 	lsl	r12,r5,0x10
80009416:	f8 0b 00 0b 	add	r11,r12,r11
8000941a:	12 ab       	st.w	r9++,r11
8000941c:	2f f8       	sub	r8,-1
8000941e:	b1 85       	lsr	r5,0x10
80009420:	08 38       	cp.w	r8,r4
80009422:	ce b5       	brlt	800093f8 <__multadd+0x10>
80009424:	58 05       	cp.w	r5,0
80009426:	c1 c0       	breq	8000945e <__multadd+0x76>
80009428:	6e 28       	ld.w	r8,r7[0x8]
8000942a:	10 34       	cp.w	r4,r8
8000942c:	c1 35       	brlt	80009452 <__multadd+0x6a>
8000942e:	6e 1b       	ld.w	r11,r7[0x4]
80009430:	0c 9c       	mov	r12,r6
80009432:	2f fb       	sub	r11,-1
80009434:	c1 ee       	rcall	80009070 <_Balloc>
80009436:	6e 4a       	ld.w	r10,r7[0x10]
80009438:	ee cb ff f4 	sub	r11,r7,-12
8000943c:	18 93       	mov	r3,r12
8000943e:	2f ea       	sub	r10,-2
80009440:	2f 4c       	sub	r12,-12
80009442:	a3 6a       	lsl	r10,0x2
80009444:	fe b0 dc be 	rcall	80004dc0 <memcpy>
80009448:	0e 9b       	mov	r11,r7
8000944a:	0c 9c       	mov	r12,r6
8000944c:	fe b0 fd f8 	rcall	8000903c <_Bfree>
80009450:	06 97       	mov	r7,r3
80009452:	e8 c8 ff ff 	sub	r8,r4,-1
80009456:	2f b4       	sub	r4,-5
80009458:	8f 48       	st.w	r7[0x10],r8
8000945a:	ee 04 09 25 	st.w	r7[r4<<0x2],r5
8000945e:	0e 9c       	mov	r12,r7
80009460:	d8 32       	popm	r0-r7,pc
80009462:	d7 03       	nop

80009464 <__pow5mult>:
80009464:	d4 31       	pushm	r0-r7,lr
80009466:	14 96       	mov	r6,r10
80009468:	18 97       	mov	r7,r12
8000946a:	16 94       	mov	r4,r11
8000946c:	f1 da c0 02 	bfextu	r8,r10,0x0,0x2
80009470:	c0 90       	breq	80009482 <__pow5mult+0x1e>
80009472:	20 18       	sub	r8,1
80009474:	fe c9 e5 d4 	sub	r9,pc,-6700
80009478:	f2 08 03 2a 	ld.w	r10,r9[r8<<0x2]
8000947c:	30 09       	mov	r9,0
8000947e:	cb 5f       	rcall	800093e8 <__multadd>
80009480:	18 94       	mov	r4,r12
80009482:	a3 46       	asr	r6,0x2
80009484:	c3 40       	breq	800094ec <__pow5mult+0x88>
80009486:	6e 95       	ld.w	r5,r7[0x24]
80009488:	58 05       	cp.w	r5,0
8000948a:	c0 91       	brne	8000949c <__pow5mult+0x38>
8000948c:	31 0c       	mov	r12,16
8000948e:	fe b0 da 75 	rcall	80004978 <malloc>
80009492:	99 35       	st.w	r12[0xc],r5
80009494:	8f 9c       	st.w	r7[0x24],r12
80009496:	99 15       	st.w	r12[0x4],r5
80009498:	99 25       	st.w	r12[0x8],r5
8000949a:	99 05       	st.w	r12[0x0],r5
8000949c:	6e 93       	ld.w	r3,r7[0x24]
8000949e:	66 25       	ld.w	r5,r3[0x8]
800094a0:	58 05       	cp.w	r5,0
800094a2:	c0 c1       	brne	800094ba <__pow5mult+0x56>
800094a4:	e0 6b 02 71 	mov	r11,625
800094a8:	0e 9c       	mov	r12,r7
800094aa:	c9 7f       	rcall	800093d8 <__i2b>
800094ac:	87 2c       	st.w	r3[0x8],r12
800094ae:	30 08       	mov	r8,0
800094b0:	18 95       	mov	r5,r12
800094b2:	99 08       	st.w	r12[0x0],r8
800094b4:	c0 38       	rjmp	800094ba <__pow5mult+0x56>
800094b6:	06 9c       	mov	r12,r3
800094b8:	18 95       	mov	r5,r12
800094ba:	ed b6 00 00 	bld	r6,0x0
800094be:	c0 b1       	brne	800094d4 <__pow5mult+0x70>
800094c0:	08 9b       	mov	r11,r4
800094c2:	0a 9a       	mov	r10,r5
800094c4:	0e 9c       	mov	r12,r7
800094c6:	c0 9f       	rcall	800092d8 <__multiply>
800094c8:	08 9b       	mov	r11,r4
800094ca:	18 93       	mov	r3,r12
800094cc:	0e 9c       	mov	r12,r7
800094ce:	06 94       	mov	r4,r3
800094d0:	fe b0 fd b6 	rcall	8000903c <_Bfree>
800094d4:	a1 56       	asr	r6,0x1
800094d6:	c0 b0       	breq	800094ec <__pow5mult+0x88>
800094d8:	6a 03       	ld.w	r3,r5[0x0]
800094da:	58 03       	cp.w	r3,0
800094dc:	ce d1       	brne	800094b6 <__pow5mult+0x52>
800094de:	0a 9a       	mov	r10,r5
800094e0:	0a 9b       	mov	r11,r5
800094e2:	0e 9c       	mov	r12,r7
800094e4:	cf ae       	rcall	800092d8 <__multiply>
800094e6:	8b 0c       	st.w	r5[0x0],r12
800094e8:	99 03       	st.w	r12[0x0],r3
800094ea:	ce 7b       	rjmp	800094b8 <__pow5mult+0x54>
800094ec:	08 9c       	mov	r12,r4
800094ee:	d8 32       	popm	r0-r7,pc

800094f0 <_read_r>:
800094f0:	d4 21       	pushm	r4-r7,lr
800094f2:	16 98       	mov	r8,r11
800094f4:	18 97       	mov	r7,r12
800094f6:	10 9c       	mov	r12,r8
800094f8:	30 08       	mov	r8,0
800094fa:	14 9b       	mov	r11,r10
800094fc:	e0 66 08 34 	mov	r6,2100
80009500:	12 9a       	mov	r10,r9
80009502:	8d 08       	st.w	r6[0x0],r8
80009504:	fe b0 d2 e4 	rcall	80003acc <_read>
80009508:	5b fc       	cp.w	r12,-1
8000950a:	c0 51       	brne	80009514 <_read_r+0x24>
8000950c:	6c 08       	ld.w	r8,r6[0x0]
8000950e:	58 08       	cp.w	r8,0
80009510:	ef f8 1a 03 	st.wne	r7[0xc],r8
80009514:	d8 22       	popm	r4-r7,pc
80009516:	d7 03       	nop

80009518 <__isinfd>:
80009518:	14 98       	mov	r8,r10
8000951a:	fc 19 7f f0 	movh	r9,0x7ff0
8000951e:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
80009522:	f0 0b 11 00 	rsub	r11,r8,0
80009526:	f7 e8 10 08 	or	r8,r11,r8
8000952a:	f5 e8 13 f8 	or	r8,r10,r8>>0x1f
8000952e:	f2 08 01 08 	sub	r8,r9,r8
80009532:	f0 0c 11 00 	rsub	r12,r8,0
80009536:	f9 e8 10 08 	or	r8,r12,r8
8000953a:	f0 0c 14 1f 	asr	r12,r8,0x1f
8000953e:	2f fc       	sub	r12,-1
80009540:	5e fc       	retal	r12

80009542 <__isnand>:
80009542:	14 98       	mov	r8,r10
80009544:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
80009548:	f0 0c 11 00 	rsub	r12,r8,0
8000954c:	10 4c       	or	r12,r8
8000954e:	fc 18 7f f0 	movh	r8,0x7ff0
80009552:	f5 ec 13 fc 	or	r12,r10,r12>>0x1f
80009556:	f0 0c 01 0c 	sub	r12,r8,r12
8000955a:	bf 9c       	lsr	r12,0x1f
8000955c:	5e fc       	retal	r12
8000955e:	d7 03       	nop

80009560 <_calloc_r>:
80009560:	d4 21       	pushm	r4-r7,lr
80009562:	f4 0b 02 4b 	mul	r11,r10,r11
80009566:	fe b0 da 11 	rcall	80004988 <_malloc_r>
8000956a:	18 97       	mov	r7,r12
8000956c:	c2 30       	breq	800095b2 <_calloc_r+0x52>
8000956e:	f8 fa ff fc 	ld.w	r10,r12[-4]
80009572:	e0 1a ff fc 	andl	r10,0xfffc
80009576:	20 4a       	sub	r10,4
80009578:	e0 4a 00 24 	cp.w	r10,36
8000957c:	e0 8b 00 18 	brhi	800095ac <_calloc_r+0x4c>
80009580:	18 98       	mov	r8,r12
80009582:	59 3a       	cp.w	r10,19
80009584:	e0 88 00 0f 	brls	800095a2 <_calloc_r+0x42>
80009588:	30 09       	mov	r9,0
8000958a:	10 a9       	st.w	r8++,r9
8000958c:	10 a9       	st.w	r8++,r9
8000958e:	59 ba       	cp.w	r10,27
80009590:	e0 88 00 09 	brls	800095a2 <_calloc_r+0x42>
80009594:	10 a9       	st.w	r8++,r9
80009596:	10 a9       	st.w	r8++,r9
80009598:	e0 4a 00 24 	cp.w	r10,36
8000959c:	c0 31       	brne	800095a2 <_calloc_r+0x42>
8000959e:	10 a9       	st.w	r8++,r9
800095a0:	10 a9       	st.w	r8++,r9
800095a2:	30 09       	mov	r9,0
800095a4:	10 a9       	st.w	r8++,r9
800095a6:	91 19       	st.w	r8[0x4],r9
800095a8:	91 09       	st.w	r8[0x0],r9
800095aa:	c0 48       	rjmp	800095b2 <_calloc_r+0x52>
800095ac:	30 0b       	mov	r11,0
800095ae:	fe b0 dc ad 	rcall	80004f08 <memset>
800095b2:	0e 9c       	mov	r12,r7
800095b4:	d8 22       	popm	r4-r7,pc
800095b6:	d7 03       	nop

800095b8 <_fstat_r>:
800095b8:	d4 21       	pushm	r4-r7,lr
800095ba:	16 98       	mov	r8,r11
800095bc:	18 97       	mov	r7,r12
800095be:	10 9c       	mov	r12,r8
800095c0:	30 08       	mov	r8,0
800095c2:	e0 66 08 34 	mov	r6,2100
800095c6:	14 9b       	mov	r11,r10
800095c8:	8d 08       	st.w	r6[0x0],r8
800095ca:	fe b0 de 65 	rcall	80005294 <_fstat>
800095ce:	5b fc       	cp.w	r12,-1
800095d0:	c0 51       	brne	800095da <_fstat_r+0x22>
800095d2:	6c 08       	ld.w	r8,r6[0x0]
800095d4:	58 08       	cp.w	r8,0
800095d6:	ef f8 1a 03 	st.wne	r7[0xc],r8
800095da:	d8 22       	popm	r4-r7,pc

800095dc <__avr32_f64_mul>:
800095dc:	f5 eb 10 1c 	or	r12,r10,r11<<0x1
800095e0:	e0 80 00 dc 	breq	80009798 <__avr32_f64_mul_op1_zero>
800095e4:	d4 21       	pushm	r4-r7,lr
800095e6:	f7 e9 20 0e 	eor	lr,r11,r9
800095ea:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
800095ee:	30 15       	mov	r5,1
800095f0:	c4 30       	breq	80009676 <__avr32_f64_mul_op1_subnormal>
800095f2:	ab 6b       	lsl	r11,0xa
800095f4:	f7 ea 13 6b 	or	r11,r11,r10>>0x16
800095f8:	ab 6a       	lsl	r10,0xa
800095fa:	f7 d5 d3 c2 	bfins	r11,r5,0x1e,0x2
800095fe:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
80009602:	c5 c0       	breq	800096ba <__avr32_f64_mul_op2_subnormal>
80009604:	a1 78       	lsl	r8,0x1
80009606:	5c f9       	rol	r9
80009608:	f3 d5 d2 ab 	bfins	r9,r5,0x15,0xb
8000960c:	e0 47 07 ff 	cp.w	r7,2047
80009610:	c7 70       	breq	800096fe <__avr32_f64_mul_op_nan_or_inf>
80009612:	e0 46 07 ff 	cp.w	r6,2047
80009616:	c7 40       	breq	800096fe <__avr32_f64_mul_op_nan_or_inf>
80009618:	ee 06 00 0c 	add	r12,r7,r6
8000961c:	e0 2c 03 fe 	sub	r12,1022
80009620:	f6 08 06 44 	mulu.d	r4,r11,r8
80009624:	f4 09 07 44 	macu.d	r4,r10,r9
80009628:	f4 08 06 46 	mulu.d	r6,r10,r8
8000962c:	f6 09 06 4a 	mulu.d	r10,r11,r9
80009630:	08 07       	add	r7,r4
80009632:	f4 05 00 4a 	adc	r10,r10,r5
80009636:	5c 0b       	acr	r11
80009638:	ed bb 00 14 	bld	r11,0x14
8000963c:	c0 50       	breq	80009646 <__avr32_f64_mul+0x6a>
8000963e:	a1 77       	lsl	r7,0x1
80009640:	5c fa       	rol	r10
80009642:	5c fb       	rol	r11
80009644:	20 1c       	sub	r12,1
80009646:	58 0c       	cp.w	r12,0
80009648:	e0 8a 00 6f 	brle	80009726 <__avr32_f64_mul_res_subnormal>
8000964c:	e0 4c 07 ff 	cp.w	r12,2047
80009650:	e0 84 00 9c 	brge	80009788 <__avr32_f64_mul_res_inf>
80009654:	f7 dc d2 8b 	bfins	r11,r12,0x14,0xb
80009658:	ed ea 11 f6 	or	r6,r6,r10<<0x1f
8000965c:	ef e6 12 17 	or	r7,r7,r6>>0x1
80009660:	ee 17 80 00 	eorh	r7,0x8000
80009664:	f1 b7 04 20 	satu	r7,0x1
80009668:	0e 0a       	add	r10,r7
8000966a:	5c 0b       	acr	r11
8000966c:	ed be 00 1f 	bld	lr,0x1f
80009670:	ef bb 00 1f 	bst	r11,0x1f
80009674:	d8 22       	popm	r4-r7,pc

80009676 <__avr32_f64_mul_op1_subnormal>:
80009676:	e4 1b 00 0f 	andh	r11,0xf
8000967a:	f4 0c 12 00 	clz	r12,r10
8000967e:	f6 06 12 00 	clz	r6,r11
80009682:	f7 bc 03 e1 	sublo	r12,-31
80009686:	f8 06 17 30 	movlo	r6,r12
8000968a:	f7 b6 02 01 	subhs	r6,1
8000968e:	e0 46 00 20 	cp.w	r6,32
80009692:	c0 d4       	brge	800096ac <__avr32_f64_mul_op1_subnormal+0x36>
80009694:	ec 0c 11 20 	rsub	r12,r6,32
80009698:	f6 06 09 4b 	lsl	r11,r11,r6
8000969c:	f4 0c 0a 4c 	lsr	r12,r10,r12
800096a0:	18 4b       	or	r11,r12
800096a2:	f4 06 09 4a 	lsl	r10,r10,r6
800096a6:	20 b6       	sub	r6,11
800096a8:	0c 17       	sub	r7,r6
800096aa:	ca ab       	rjmp	800095fe <__avr32_f64_mul+0x22>
800096ac:	f4 06 09 4b 	lsl	r11,r10,r6
800096b0:	c6 40       	breq	80009778 <__avr32_f64_mul_res_zero>
800096b2:	30 0a       	mov	r10,0
800096b4:	20 b6       	sub	r6,11
800096b6:	0c 17       	sub	r7,r6
800096b8:	ca 3b       	rjmp	800095fe <__avr32_f64_mul+0x22>

800096ba <__avr32_f64_mul_op2_subnormal>:
800096ba:	e4 19 00 0f 	andh	r9,0xf
800096be:	f0 0c 12 00 	clz	r12,r8
800096c2:	f2 05 12 00 	clz	r5,r9
800096c6:	f7 bc 03 ea 	sublo	r12,-22
800096ca:	f8 05 17 30 	movlo	r5,r12
800096ce:	f7 b5 02 0a 	subhs	r5,10
800096d2:	e0 45 00 20 	cp.w	r5,32
800096d6:	c0 d4       	brge	800096f0 <__avr32_f64_mul_op2_subnormal+0x36>
800096d8:	ea 0c 11 20 	rsub	r12,r5,32
800096dc:	f2 05 09 49 	lsl	r9,r9,r5
800096e0:	f0 0c 0a 4c 	lsr	r12,r8,r12
800096e4:	18 49       	or	r9,r12
800096e6:	f0 05 09 48 	lsl	r8,r8,r5
800096ea:	20 25       	sub	r5,2
800096ec:	0a 16       	sub	r6,r5
800096ee:	c8 fb       	rjmp	8000960c <__avr32_f64_mul+0x30>
800096f0:	f0 05 09 49 	lsl	r9,r8,r5
800096f4:	c4 20       	breq	80009778 <__avr32_f64_mul_res_zero>
800096f6:	30 08       	mov	r8,0
800096f8:	20 25       	sub	r5,2
800096fa:	0a 16       	sub	r6,r5
800096fc:	c8 8b       	rjmp	8000960c <__avr32_f64_mul+0x30>

800096fe <__avr32_f64_mul_op_nan_or_inf>:
800096fe:	e4 19 00 0f 	andh	r9,0xf
80009702:	e4 1b 00 0f 	andh	r11,0xf
80009706:	14 4b       	or	r11,r10
80009708:	10 49       	or	r9,r8
8000970a:	e0 47 07 ff 	cp.w	r7,2047
8000970e:	c0 91       	brne	80009720 <__avr32_f64_mul_op1_not_naninf>
80009710:	58 0b       	cp.w	r11,0
80009712:	c3 81       	brne	80009782 <__avr32_f64_mul_res_nan>
80009714:	e0 46 07 ff 	cp.w	r6,2047
80009718:	c3 81       	brne	80009788 <__avr32_f64_mul_res_inf>
8000971a:	58 09       	cp.w	r9,0
8000971c:	c3 60       	breq	80009788 <__avr32_f64_mul_res_inf>
8000971e:	c3 28       	rjmp	80009782 <__avr32_f64_mul_res_nan>

80009720 <__avr32_f64_mul_op1_not_naninf>:
80009720:	58 09       	cp.w	r9,0
80009722:	c3 30       	breq	80009788 <__avr32_f64_mul_res_inf>
80009724:	c2 f8       	rjmp	80009782 <__avr32_f64_mul_res_nan>

80009726 <__avr32_f64_mul_res_subnormal>:
80009726:	5c 3c       	neg	r12
80009728:	2f fc       	sub	r12,-1
8000972a:	f1 bc 04 c0 	satu	r12,0x6
8000972e:	e0 4c 00 20 	cp.w	r12,32
80009732:	c1 14       	brge	80009754 <__avr32_f64_mul_res_subnormal+0x2e>
80009734:	f8 08 11 20 	rsub	r8,r12,32
80009738:	0e 46       	or	r6,r7
8000973a:	ee 0c 0a 47 	lsr	r7,r7,r12
8000973e:	f4 08 09 49 	lsl	r9,r10,r8
80009742:	12 47       	or	r7,r9
80009744:	f4 0c 0a 4a 	lsr	r10,r10,r12
80009748:	f6 08 09 49 	lsl	r9,r11,r8
8000974c:	12 4a       	or	r10,r9
8000974e:	f6 0c 0a 4b 	lsr	r11,r11,r12
80009752:	c8 3b       	rjmp	80009658 <__avr32_f64_mul+0x7c>
80009754:	f8 08 11 20 	rsub	r8,r12,32
80009758:	f9 b9 00 00 	moveq	r9,0
8000975c:	c0 30       	breq	80009762 <__avr32_f64_mul_res_subnormal+0x3c>
8000975e:	f6 08 09 49 	lsl	r9,r11,r8
80009762:	0e 46       	or	r6,r7
80009764:	ed ea 10 16 	or	r6,r6,r10<<0x1
80009768:	f4 0c 0a 4a 	lsr	r10,r10,r12
8000976c:	f3 ea 10 07 	or	r7,r9,r10
80009770:	f6 0c 0a 4a 	lsr	r10,r11,r12
80009774:	30 0b       	mov	r11,0
80009776:	c7 1b       	rjmp	80009658 <__avr32_f64_mul+0x7c>

80009778 <__avr32_f64_mul_res_zero>:
80009778:	1c 9b       	mov	r11,lr
8000977a:	e6 1b 80 00 	andh	r11,0x8000,COH
8000977e:	30 0a       	mov	r10,0
80009780:	d8 22       	popm	r4-r7,pc

80009782 <__avr32_f64_mul_res_nan>:
80009782:	3f fb       	mov	r11,-1
80009784:	3f fa       	mov	r10,-1
80009786:	d8 22       	popm	r4-r7,pc

80009788 <__avr32_f64_mul_res_inf>:
80009788:	f0 6b 00 00 	mov	r11,-1048576
8000978c:	ed be 00 1f 	bld	lr,0x1f
80009790:	ef bb 00 1f 	bst	r11,0x1f
80009794:	30 0a       	mov	r10,0
80009796:	d8 22       	popm	r4-r7,pc

80009798 <__avr32_f64_mul_op1_zero>:
80009798:	f7 e9 20 0b 	eor	r11,r11,r9
8000979c:	e6 1b 80 00 	andh	r11,0x8000,COH
800097a0:	f9 d9 c2 8b 	bfextu	r12,r9,0x14,0xb
800097a4:	e0 4c 07 ff 	cp.w	r12,2047
800097a8:	5e 1c       	retne	r12
800097aa:	3f fa       	mov	r10,-1
800097ac:	3f fb       	mov	r11,-1
800097ae:	5e fc       	retal	r12

800097b0 <__avr32_f64_sub_from_add>:
800097b0:	ee 19 80 00 	eorh	r9,0x8000

800097b4 <__avr32_f64_sub>:
800097b4:	f7 e9 20 0c 	eor	r12,r11,r9
800097b8:	e0 86 00 ca 	brmi	8000994c <__avr32_f64_add_from_sub>
800097bc:	eb cd 40 e0 	pushm	r5-r7,lr
800097c0:	16 9c       	mov	r12,r11
800097c2:	e6 1c 80 00 	andh	r12,0x8000,COH
800097c6:	bf db       	cbr	r11,0x1f
800097c8:	bf d9       	cbr	r9,0x1f
800097ca:	10 3a       	cp.w	r10,r8
800097cc:	f2 0b 13 00 	cpc	r11,r9
800097d0:	c0 92       	brcc	800097e2 <__avr32_f64_sub+0x2e>
800097d2:	16 97       	mov	r7,r11
800097d4:	12 9b       	mov	r11,r9
800097d6:	0e 99       	mov	r9,r7
800097d8:	14 97       	mov	r7,r10
800097da:	10 9a       	mov	r10,r8
800097dc:	0e 98       	mov	r8,r7
800097de:	ee 1c 80 00 	eorh	r12,0x8000
800097e2:	f6 07 16 14 	lsr	r7,r11,0x14
800097e6:	ab 7b       	lsl	r11,0xb
800097e8:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
800097ec:	ab 7a       	lsl	r10,0xb
800097ee:	bf bb       	sbr	r11,0x1f
800097f0:	f2 06 16 14 	lsr	r6,r9,0x14
800097f4:	c4 40       	breq	8000987c <__avr32_f64_sub_opL_subnormal>
800097f6:	ab 79       	lsl	r9,0xb
800097f8:	f3 e8 13 59 	or	r9,r9,r8>>0x15
800097fc:	ab 78       	lsl	r8,0xb
800097fe:	bf b9       	sbr	r9,0x1f

80009800 <__avr32_f64_sub_opL_subnormal_done>:
80009800:	e0 47 07 ff 	cp.w	r7,2047
80009804:	c4 f0       	breq	800098a2 <__avr32_f64_sub_opH_nan_or_inf>
80009806:	0e 26       	rsub	r6,r7
80009808:	c1 20       	breq	8000982c <__avr32_f64_sub_shift_done>
8000980a:	ec 05 11 20 	rsub	r5,r6,32
8000980e:	e0 46 00 20 	cp.w	r6,32
80009812:	c7 c2       	brcc	8000990a <__avr32_f64_sub_longshift>
80009814:	f0 05 09 4e 	lsl	lr,r8,r5
80009818:	f2 05 09 45 	lsl	r5,r9,r5
8000981c:	f0 06 0a 48 	lsr	r8,r8,r6
80009820:	f2 06 0a 49 	lsr	r9,r9,r6
80009824:	0a 48       	or	r8,r5
80009826:	58 0e       	cp.w	lr,0
80009828:	5f 1e       	srne	lr
8000982a:	1c 48       	or	r8,lr

8000982c <__avr32_f64_sub_shift_done>:
8000982c:	10 1a       	sub	r10,r8
8000982e:	f6 09 01 4b 	sbc	r11,r11,r9
80009832:	f6 06 12 00 	clz	r6,r11
80009836:	c0 e0       	breq	80009852 <__avr32_f64_sub_longnormalize_done>
80009838:	c7 83       	brcs	80009928 <__avr32_f64_sub_longnormalize>
8000983a:	ec 0e 11 20 	rsub	lr,r6,32
8000983e:	f6 06 09 4b 	lsl	r11,r11,r6
80009842:	f4 0e 0a 4e 	lsr	lr,r10,lr
80009846:	1c 4b       	or	r11,lr
80009848:	f4 06 09 4a 	lsl	r10,r10,r6
8000984c:	0c 17       	sub	r7,r6
8000984e:	e0 8a 00 39 	brle	800098c0 <__avr32_f64_sub_subnormal_result>

80009852 <__avr32_f64_sub_longnormalize_done>:
80009852:	f4 09 15 15 	lsl	r9,r10,0x15
80009856:	ab 9a       	lsr	r10,0xb
80009858:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
8000985c:	ab 9b       	lsr	r11,0xb
8000985e:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
80009862:	18 4b       	or	r11,r12

80009864 <__avr32_f64_sub_round>:
80009864:	fc 17 80 00 	movh	r7,0x8000
80009868:	ed ba 00 00 	bld	r10,0x0
8000986c:	f7 b7 01 ff 	subne	r7,-1
80009870:	0e 39       	cp.w	r9,r7
80009872:	5f 29       	srhs	r9
80009874:	12 0a       	add	r10,r9
80009876:	5c 0b       	acr	r11
80009878:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000987c <__avr32_f64_sub_opL_subnormal>:
8000987c:	ab 79       	lsl	r9,0xb
8000987e:	f3 e8 13 59 	or	r9,r9,r8>>0x15
80009882:	ab 78       	lsl	r8,0xb
80009884:	f3 e8 10 0e 	or	lr,r9,r8
80009888:	f9 b6 01 01 	movne	r6,1
8000988c:	ee 0e 11 00 	rsub	lr,r7,0
80009890:	f9 b7 00 01 	moveq	r7,1
80009894:	ef bb 00 1f 	bst	r11,0x1f
80009898:	f7 ea 10 0e 	or	lr,r11,r10
8000989c:	f9 b7 00 00 	moveq	r7,0
800098a0:	cb 0b       	rjmp	80009800 <__avr32_f64_sub_opL_subnormal_done>

800098a2 <__avr32_f64_sub_opH_nan_or_inf>:
800098a2:	bf db       	cbr	r11,0x1f
800098a4:	f7 ea 10 0e 	or	lr,r11,r10
800098a8:	c0 81       	brne	800098b8 <__avr32_f64_sub_return_nan>
800098aa:	e0 46 07 ff 	cp.w	r6,2047
800098ae:	c0 50       	breq	800098b8 <__avr32_f64_sub_return_nan>
800098b0:	f9 e7 11 4b 	or	r11,r12,r7<<0x14
800098b4:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800098b8 <__avr32_f64_sub_return_nan>:
800098b8:	3f fa       	mov	r10,-1
800098ba:	3f fb       	mov	r11,-1
800098bc:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800098c0 <__avr32_f64_sub_subnormal_result>:
800098c0:	5c 37       	neg	r7
800098c2:	2f f7       	sub	r7,-1
800098c4:	f1 b7 04 c0 	satu	r7,0x6
800098c8:	e0 47 00 20 	cp.w	r7,32
800098cc:	c1 14       	brge	800098ee <__avr32_f64_sub_subnormal_result+0x2e>
800098ce:	ee 08 11 20 	rsub	r8,r7,32
800098d2:	f4 08 09 49 	lsl	r9,r10,r8
800098d6:	5f 16       	srne	r6
800098d8:	f4 07 0a 4a 	lsr	r10,r10,r7
800098dc:	0c 4a       	or	r10,r6
800098de:	f6 08 09 49 	lsl	r9,r11,r8
800098e2:	f5 e9 10 0a 	or	r10,r10,r9
800098e6:	f4 07 0a 4b 	lsr	r11,r10,r7
800098ea:	30 07       	mov	r7,0
800098ec:	cb 3b       	rjmp	80009852 <__avr32_f64_sub_longnormalize_done>
800098ee:	ee 08 11 40 	rsub	r8,r7,64
800098f2:	f6 08 09 49 	lsl	r9,r11,r8
800098f6:	14 49       	or	r9,r10
800098f8:	5f 16       	srne	r6
800098fa:	f6 07 0a 4a 	lsr	r10,r11,r7
800098fe:	0c 4a       	or	r10,r6
80009900:	30 0b       	mov	r11,0
80009902:	30 07       	mov	r7,0
80009904:	ca 7b       	rjmp	80009852 <__avr32_f64_sub_longnormalize_done>
80009906:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000990a <__avr32_f64_sub_longshift>:
8000990a:	f1 b6 04 c0 	satu	r6,0x6
8000990e:	f0 0e 17 00 	moveq	lr,r8
80009912:	c0 40       	breq	8000991a <__avr32_f64_sub_longshift+0x10>
80009914:	f2 05 09 4e 	lsl	lr,r9,r5
80009918:	10 4e       	or	lr,r8
8000991a:	f2 06 0a 48 	lsr	r8,r9,r6
8000991e:	30 09       	mov	r9,0
80009920:	58 0e       	cp.w	lr,0
80009922:	5f 1e       	srne	lr
80009924:	1c 48       	or	r8,lr
80009926:	c8 3b       	rjmp	8000982c <__avr32_f64_sub_shift_done>

80009928 <__avr32_f64_sub_longnormalize>:
80009928:	f4 06 12 00 	clz	r6,r10
8000992c:	f9 b7 03 00 	movlo	r7,0
80009930:	f9 b6 03 00 	movlo	r6,0
80009934:	f9 bc 03 00 	movlo	r12,0
80009938:	f7 b6 02 e0 	subhs	r6,-32
8000993c:	f4 06 09 4b 	lsl	r11,r10,r6
80009940:	30 0a       	mov	r10,0
80009942:	0c 17       	sub	r7,r6
80009944:	fe 9a ff be 	brle	800098c0 <__avr32_f64_sub_subnormal_result>
80009948:	c8 5b       	rjmp	80009852 <__avr32_f64_sub_longnormalize_done>
8000994a:	d7 03       	nop

8000994c <__avr32_f64_add_from_sub>:
8000994c:	ee 19 80 00 	eorh	r9,0x8000

80009950 <__avr32_f64_add>:
80009950:	f7 e9 20 0c 	eor	r12,r11,r9
80009954:	fe 96 ff 2e 	brmi	800097b0 <__avr32_f64_sub_from_add>
80009958:	eb cd 40 e0 	pushm	r5-r7,lr
8000995c:	16 9c       	mov	r12,r11
8000995e:	e6 1c 80 00 	andh	r12,0x8000,COH
80009962:	bf db       	cbr	r11,0x1f
80009964:	bf d9       	cbr	r9,0x1f
80009966:	12 3b       	cp.w	r11,r9
80009968:	c0 72       	brcc	80009976 <__avr32_f64_add+0x26>
8000996a:	16 97       	mov	r7,r11
8000996c:	12 9b       	mov	r11,r9
8000996e:	0e 99       	mov	r9,r7
80009970:	14 97       	mov	r7,r10
80009972:	10 9a       	mov	r10,r8
80009974:	0e 98       	mov	r8,r7
80009976:	30 0e       	mov	lr,0
80009978:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
8000997c:	f7 db c0 14 	bfextu	r11,r11,0x0,0x14
80009980:	b5 ab       	sbr	r11,0x14
80009982:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
80009986:	c6 20       	breq	80009a4a <__avr32_f64_add_op2_subnormal>
80009988:	f3 d9 c0 14 	bfextu	r9,r9,0x0,0x14
8000998c:	b5 a9       	sbr	r9,0x14
8000998e:	e0 47 07 ff 	cp.w	r7,2047
80009992:	c2 80       	breq	800099e2 <__avr32_f64_add_opH_nan_or_inf>
80009994:	0e 26       	rsub	r6,r7
80009996:	c1 20       	breq	800099ba <__avr32_f64_add_shift_done>
80009998:	e0 46 00 36 	cp.w	r6,54
8000999c:	c1 52       	brcc	800099c6 <__avr32_f64_add_res_of_done>
8000999e:	ec 05 11 20 	rsub	r5,r6,32
800099a2:	e0 46 00 20 	cp.w	r6,32
800099a6:	c3 52       	brcc	80009a10 <__avr32_f64_add_longshift>
800099a8:	f0 05 09 4e 	lsl	lr,r8,r5
800099ac:	f2 05 09 45 	lsl	r5,r9,r5
800099b0:	f0 06 0a 48 	lsr	r8,r8,r6
800099b4:	f2 06 0a 49 	lsr	r9,r9,r6
800099b8:	0a 48       	or	r8,r5

800099ba <__avr32_f64_add_shift_done>:
800099ba:	10 0a       	add	r10,r8
800099bc:	f6 09 00 4b 	adc	r11,r11,r9
800099c0:	ed bb 00 15 	bld	r11,0x15
800099c4:	c3 40       	breq	80009a2c <__avr32_f64_add_res_of>

800099c6 <__avr32_f64_add_res_of_done>:
800099c6:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
800099ca:	18 4b       	or	r11,r12

800099cc <__avr32_f64_add_round>:
800099cc:	f9 da c0 01 	bfextu	r12,r10,0x0,0x1
800099d0:	18 4e       	or	lr,r12
800099d2:	ee 1e 80 00 	eorh	lr,0x8000
800099d6:	f1 be 04 20 	satu	lr,0x1
800099da:	1c 0a       	add	r10,lr
800099dc:	5c 0b       	acr	r11
800099de:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800099e2 <__avr32_f64_add_opH_nan_or_inf>:
800099e2:	b5 cb       	cbr	r11,0x14
800099e4:	f7 ea 10 0e 	or	lr,r11,r10
800099e8:	c1 01       	brne	80009a08 <__avr32_f64_add_return_nan>
800099ea:	e0 46 07 ff 	cp.w	r6,2047
800099ee:	c0 30       	breq	800099f4 <__avr32_f64_add_opL_nan_or_inf>
800099f0:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800099f4 <__avr32_f64_add_opL_nan_or_inf>:
800099f4:	b5 c9       	cbr	r9,0x14
800099f6:	f3 e8 10 0e 	or	lr,r9,r8
800099fa:	c0 71       	brne	80009a08 <__avr32_f64_add_return_nan>
800099fc:	30 0a       	mov	r10,0
800099fe:	fc 1b 7f f0 	movh	r11,0x7ff0
80009a02:	18 4b       	or	r11,r12
80009a04:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80009a08 <__avr32_f64_add_return_nan>:
80009a08:	3f fa       	mov	r10,-1
80009a0a:	3f fb       	mov	r11,-1
80009a0c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80009a10 <__avr32_f64_add_longshift>:
80009a10:	f1 b6 04 c0 	satu	r6,0x6
80009a14:	f0 0e 17 00 	moveq	lr,r8
80009a18:	c0 60       	breq	80009a24 <__avr32_f64_add_longshift+0x14>
80009a1a:	f2 05 09 4e 	lsl	lr,r9,r5
80009a1e:	58 08       	cp.w	r8,0
80009a20:	5f 18       	srne	r8
80009a22:	10 4e       	or	lr,r8
80009a24:	f2 06 0a 48 	lsr	r8,r9,r6
80009a28:	30 09       	mov	r9,0
80009a2a:	cc 8b       	rjmp	800099ba <__avr32_f64_add_shift_done>

80009a2c <__avr32_f64_add_res_of>:
80009a2c:	fd ee 10 1e 	or	lr,lr,lr<<0x1
80009a30:	a1 9b       	lsr	r11,0x1
80009a32:	5d 0a       	ror	r10
80009a34:	5d 0e       	ror	lr
80009a36:	2f f7       	sub	r7,-1
80009a38:	e0 47 07 ff 	cp.w	r7,2047
80009a3c:	f9 ba 00 00 	moveq	r10,0
80009a40:	f9 bb 00 00 	moveq	r11,0
80009a44:	f9 be 00 00 	moveq	lr,0
80009a48:	cb fb       	rjmp	800099c6 <__avr32_f64_add_res_of_done>

80009a4a <__avr32_f64_add_op2_subnormal>:
80009a4a:	30 16       	mov	r6,1
80009a4c:	58 07       	cp.w	r7,0
80009a4e:	ca 01       	brne	8000998e <__avr32_f64_add+0x3e>
80009a50:	b5 cb       	cbr	r11,0x14
80009a52:	10 0a       	add	r10,r8
80009a54:	f6 09 00 4b 	adc	r11,r11,r9
80009a58:	18 4b       	or	r11,r12
80009a5a:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80009a5e:	d7 03       	nop

80009a60 <__avr32_f64_to_u32>:
80009a60:	58 0b       	cp.w	r11,0
80009a62:	5e 6d       	retmi	0

80009a64 <__avr32_f64_to_s32>:
80009a64:	f6 0c 15 01 	lsl	r12,r11,0x1
80009a68:	b5 9c       	lsr	r12,0x15
80009a6a:	e0 2c 03 ff 	sub	r12,1023
80009a6e:	5e 3d       	retlo	0
80009a70:	f8 0c 11 1f 	rsub	r12,r12,31
80009a74:	16 99       	mov	r9,r11
80009a76:	ab 7b       	lsl	r11,0xb
80009a78:	bf bb       	sbr	r11,0x1f
80009a7a:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
80009a7e:	f6 0c 0a 4b 	lsr	r11,r11,r12
80009a82:	a1 79       	lsl	r9,0x1
80009a84:	5e 2b       	reths	r11
80009a86:	5c 3b       	neg	r11
80009a88:	5e fb       	retal	r11

80009a8a <__avr32_u32_to_f64>:
80009a8a:	f8 cb 00 00 	sub	r11,r12,0
80009a8e:	30 0c       	mov	r12,0
80009a90:	c0 38       	rjmp	80009a96 <__avr32_s32_to_f64+0x4>

80009a92 <__avr32_s32_to_f64>:
80009a92:	18 9b       	mov	r11,r12
80009a94:	5c 4b       	abs	r11
80009a96:	30 0a       	mov	r10,0
80009a98:	5e 0b       	reteq	r11
80009a9a:	d4 01       	pushm	lr
80009a9c:	e0 69 04 1e 	mov	r9,1054
80009aa0:	f6 08 12 00 	clz	r8,r11
80009aa4:	c1 70       	breq	80009ad2 <__avr32_s32_to_f64+0x40>
80009aa6:	c0 c3       	brcs	80009abe <__avr32_s32_to_f64+0x2c>
80009aa8:	f0 0e 11 20 	rsub	lr,r8,32
80009aac:	f6 08 09 4b 	lsl	r11,r11,r8
80009ab0:	f4 0e 0a 4e 	lsr	lr,r10,lr
80009ab4:	1c 4b       	or	r11,lr
80009ab6:	f4 08 09 4a 	lsl	r10,r10,r8
80009aba:	10 19       	sub	r9,r8
80009abc:	c0 b8       	rjmp	80009ad2 <__avr32_s32_to_f64+0x40>
80009abe:	f4 08 12 00 	clz	r8,r10
80009ac2:	f9 b8 03 00 	movlo	r8,0
80009ac6:	f7 b8 02 e0 	subhs	r8,-32
80009aca:	f4 08 09 4b 	lsl	r11,r10,r8
80009ace:	30 0a       	mov	r10,0
80009ad0:	10 19       	sub	r9,r8
80009ad2:	58 09       	cp.w	r9,0
80009ad4:	e0 89 00 30 	brgt	80009b34 <__avr32_s32_to_f64+0xa2>
80009ad8:	5c 39       	neg	r9
80009ada:	2f f9       	sub	r9,-1
80009adc:	e0 49 00 36 	cp.w	r9,54
80009ae0:	c0 43       	brcs	80009ae8 <__avr32_s32_to_f64+0x56>
80009ae2:	30 0b       	mov	r11,0
80009ae4:	30 0a       	mov	r10,0
80009ae6:	c2 68       	rjmp	80009b32 <__avr32_s32_to_f64+0xa0>
80009ae8:	2f 69       	sub	r9,-10
80009aea:	f2 08 11 20 	rsub	r8,r9,32
80009aee:	e0 49 00 20 	cp.w	r9,32
80009af2:	c0 b2       	brcc	80009b08 <__avr32_s32_to_f64+0x76>
80009af4:	f4 08 09 4e 	lsl	lr,r10,r8
80009af8:	f6 08 09 48 	lsl	r8,r11,r8
80009afc:	f4 09 0a 4a 	lsr	r10,r10,r9
80009b00:	f6 09 0a 4b 	lsr	r11,r11,r9
80009b04:	10 4b       	or	r11,r8
80009b06:	c0 88       	rjmp	80009b16 <__avr32_s32_to_f64+0x84>
80009b08:	f6 08 09 4e 	lsl	lr,r11,r8
80009b0c:	14 4e       	or	lr,r10
80009b0e:	16 9a       	mov	r10,r11
80009b10:	30 0b       	mov	r11,0
80009b12:	f4 09 0a 4a 	lsr	r10,r10,r9
80009b16:	ed ba 00 00 	bld	r10,0x0
80009b1a:	c0 92       	brcc	80009b2c <__avr32_s32_to_f64+0x9a>
80009b1c:	1c 7e       	tst	lr,lr
80009b1e:	c0 41       	brne	80009b26 <__avr32_s32_to_f64+0x94>
80009b20:	ed ba 00 01 	bld	r10,0x1
80009b24:	c0 42       	brcc	80009b2c <__avr32_s32_to_f64+0x9a>
80009b26:	2f fa       	sub	r10,-1
80009b28:	f7 bb 02 ff 	subhs	r11,-1
80009b2c:	5c fc       	rol	r12
80009b2e:	5d 0b       	ror	r11
80009b30:	5d 0a       	ror	r10
80009b32:	d8 02       	popm	pc
80009b34:	e0 68 03 ff 	mov	r8,1023
80009b38:	ed ba 00 0b 	bld	r10,0xb
80009b3c:	f7 b8 00 ff 	subeq	r8,-1
80009b40:	10 0a       	add	r10,r8
80009b42:	5c 0b       	acr	r11
80009b44:	f7 b9 03 fe 	sublo	r9,-2
80009b48:	e0 49 07 ff 	cp.w	r9,2047
80009b4c:	c0 55       	brlt	80009b56 <__avr32_s32_to_f64+0xc4>
80009b4e:	30 0a       	mov	r10,0
80009b50:	fc 1b ff e0 	movh	r11,0xffe0
80009b54:	c0 c8       	rjmp	80009b6c <__floatsidf_return_op1>
80009b56:	ed bb 00 1f 	bld	r11,0x1f
80009b5a:	f7 b9 01 01 	subne	r9,1
80009b5e:	ab 9a       	lsr	r10,0xb
80009b60:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
80009b64:	a1 7b       	lsl	r11,0x1
80009b66:	ab 9b       	lsr	r11,0xb
80009b68:	f7 e9 11 5b 	or	r11,r11,r9<<0x15

80009b6c <__floatsidf_return_op1>:
80009b6c:	a1 7c       	lsl	r12,0x1
80009b6e:	5d 0b       	ror	r11
80009b70:	d8 02       	popm	pc

80009b72 <__avr32_f64_cmp_eq>:
80009b72:	10 3a       	cp.w	r10,r8
80009b74:	f2 0b 13 00 	cpc	r11,r9
80009b78:	c0 80       	breq	80009b88 <__avr32_f64_cmp_eq+0x16>
80009b7a:	a1 7b       	lsl	r11,0x1
80009b7c:	a1 79       	lsl	r9,0x1
80009b7e:	14 4b       	or	r11,r10
80009b80:	12 4b       	or	r11,r9
80009b82:	10 4b       	or	r11,r8
80009b84:	5e 0f       	reteq	1
80009b86:	5e fd       	retal	0
80009b88:	a1 7b       	lsl	r11,0x1
80009b8a:	fc 1c ff e0 	movh	r12,0xffe0
80009b8e:	58 0a       	cp.w	r10,0
80009b90:	f8 0b 13 00 	cpc	r11,r12
80009b94:	5e 8f       	retls	1
80009b96:	5e fd       	retal	0

80009b98 <__avr32_f64_cmp_ge>:
80009b98:	1a de       	st.w	--sp,lr
80009b9a:	1a d7       	st.w	--sp,r7
80009b9c:	a1 7b       	lsl	r11,0x1
80009b9e:	5f 3c       	srlo	r12
80009ba0:	a1 79       	lsl	r9,0x1
80009ba2:	5f 37       	srlo	r7
80009ba4:	5c fc       	rol	r12
80009ba6:	fc 1e ff e0 	movh	lr,0xffe0
80009baa:	58 0a       	cp.w	r10,0
80009bac:	fc 0b 13 00 	cpc	r11,lr
80009bb0:	e0 8b 00 1d 	brhi	80009bea <__avr32_f64_cmp_ge+0x52>
80009bb4:	58 08       	cp.w	r8,0
80009bb6:	fc 09 13 00 	cpc	r9,lr
80009bba:	e0 8b 00 18 	brhi	80009bea <__avr32_f64_cmp_ge+0x52>
80009bbe:	58 0b       	cp.w	r11,0
80009bc0:	f5 ba 00 00 	subfeq	r10,0
80009bc4:	c1 50       	breq	80009bee <__avr32_f64_cmp_ge+0x56>
80009bc6:	1b 07       	ld.w	r7,sp++
80009bc8:	1b 0e       	ld.w	lr,sp++
80009bca:	58 3c       	cp.w	r12,3
80009bcc:	c0 a0       	breq	80009be0 <__avr32_f64_cmp_ge+0x48>
80009bce:	58 1c       	cp.w	r12,1
80009bd0:	c0 33       	brcs	80009bd6 <__avr32_f64_cmp_ge+0x3e>
80009bd2:	5e 0f       	reteq	1
80009bd4:	5e 1d       	retne	0
80009bd6:	10 3a       	cp.w	r10,r8
80009bd8:	f2 0b 13 00 	cpc	r11,r9
80009bdc:	5e 2f       	reths	1
80009bde:	5e 3d       	retlo	0
80009be0:	14 38       	cp.w	r8,r10
80009be2:	f6 09 13 00 	cpc	r9,r11
80009be6:	5e 2f       	reths	1
80009be8:	5e 3d       	retlo	0
80009bea:	1b 07       	ld.w	r7,sp++
80009bec:	d8 0a       	popm	pc,r12=0
80009bee:	58 17       	cp.w	r7,1
80009bf0:	5f 0c       	sreq	r12
80009bf2:	58 09       	cp.w	r9,0
80009bf4:	f5 b8 00 00 	subfeq	r8,0
80009bf8:	1b 07       	ld.w	r7,sp++
80009bfa:	1b 0e       	ld.w	lr,sp++
80009bfc:	5e 0f       	reteq	1
80009bfe:	5e fc       	retal	r12

80009c00 <__avr32_f64_cmp_lt>:
80009c00:	1a de       	st.w	--sp,lr
80009c02:	1a d7       	st.w	--sp,r7
80009c04:	a1 7b       	lsl	r11,0x1
80009c06:	5f 3c       	srlo	r12
80009c08:	a1 79       	lsl	r9,0x1
80009c0a:	5f 37       	srlo	r7
80009c0c:	5c fc       	rol	r12
80009c0e:	fc 1e ff e0 	movh	lr,0xffe0
80009c12:	58 0a       	cp.w	r10,0
80009c14:	fc 0b 13 00 	cpc	r11,lr
80009c18:	e0 8b 00 1d 	brhi	80009c52 <__avr32_f64_cmp_lt+0x52>
80009c1c:	58 08       	cp.w	r8,0
80009c1e:	fc 09 13 00 	cpc	r9,lr
80009c22:	e0 8b 00 18 	brhi	80009c52 <__avr32_f64_cmp_lt+0x52>
80009c26:	58 0b       	cp.w	r11,0
80009c28:	f5 ba 00 00 	subfeq	r10,0
80009c2c:	c1 50       	breq	80009c56 <__avr32_f64_cmp_lt+0x56>
80009c2e:	1b 07       	ld.w	r7,sp++
80009c30:	1b 0e       	ld.w	lr,sp++
80009c32:	58 3c       	cp.w	r12,3
80009c34:	c0 a0       	breq	80009c48 <__avr32_f64_cmp_lt+0x48>
80009c36:	58 1c       	cp.w	r12,1
80009c38:	c0 33       	brcs	80009c3e <__avr32_f64_cmp_lt+0x3e>
80009c3a:	5e 0d       	reteq	0
80009c3c:	5e 1f       	retne	1
80009c3e:	10 3a       	cp.w	r10,r8
80009c40:	f2 0b 13 00 	cpc	r11,r9
80009c44:	5e 2d       	reths	0
80009c46:	5e 3f       	retlo	1
80009c48:	14 38       	cp.w	r8,r10
80009c4a:	f6 09 13 00 	cpc	r9,r11
80009c4e:	5e 2d       	reths	0
80009c50:	5e 3f       	retlo	1
80009c52:	1b 07       	ld.w	r7,sp++
80009c54:	d8 0a       	popm	pc,r12=0
80009c56:	58 17       	cp.w	r7,1
80009c58:	5f 1c       	srne	r12
80009c5a:	58 09       	cp.w	r9,0
80009c5c:	f5 b8 00 00 	subfeq	r8,0
80009c60:	1b 07       	ld.w	r7,sp++
80009c62:	1b 0e       	ld.w	lr,sp++
80009c64:	5e 0d       	reteq	0
80009c66:	5e fc       	retal	r12

80009c68 <__avr32_f64_div>:
80009c68:	eb cd 40 ff 	pushm	r0-r7,lr
80009c6c:	f7 e9 20 0e 	eor	lr,r11,r9
80009c70:	f6 07 16 14 	lsr	r7,r11,0x14
80009c74:	a9 7b       	lsl	r11,0x9
80009c76:	f7 ea 13 7b 	or	r11,r11,r10>>0x17
80009c7a:	a9 7a       	lsl	r10,0x9
80009c7c:	bd bb       	sbr	r11,0x1d
80009c7e:	e4 1b 3f ff 	andh	r11,0x3fff
80009c82:	ab d7       	cbr	r7,0xb
80009c84:	e0 80 00 cc 	breq	80009e1c <__avr32_f64_div_round_subnormal+0x54>
80009c88:	e0 47 07 ff 	cp.w	r7,2047
80009c8c:	e0 84 00 b5 	brge	80009df6 <__avr32_f64_div_round_subnormal+0x2e>
80009c90:	f2 06 16 14 	lsr	r6,r9,0x14
80009c94:	a9 79       	lsl	r9,0x9
80009c96:	f3 e8 13 79 	or	r9,r9,r8>>0x17
80009c9a:	a9 78       	lsl	r8,0x9
80009c9c:	bd b9       	sbr	r9,0x1d
80009c9e:	e4 19 3f ff 	andh	r9,0x3fff
80009ca2:	ab d6       	cbr	r6,0xb
80009ca4:	e0 80 00 e2 	breq	80009e68 <__avr32_f64_div_round_subnormal+0xa0>
80009ca8:	e0 46 07 ff 	cp.w	r6,2047
80009cac:	e0 84 00 b2 	brge	80009e10 <__avr32_f64_div_round_subnormal+0x48>
80009cb0:	0c 17       	sub	r7,r6
80009cb2:	fe 37 fc 01 	sub	r7,-1023
80009cb6:	fc 1c 80 00 	movh	r12,0x8000
80009cba:	f8 03 16 01 	lsr	r3,r12,0x1
80009cbe:	e9 d9 c3 62 	bfextu	r4,r9,0x1b,0x2
80009cc2:	5c d4       	com	r4
80009cc4:	e7 d4 d3 82 	bfins	r3,r4,0x1c,0x2
80009cc8:	e6 09 06 44 	mulu.d	r4,r3,r9
80009ccc:	f8 05 01 25 	sub	r5,r12,r5<<0x2
80009cd0:	e6 05 06 44 	mulu.d	r4,r3,r5
80009cd4:	ea 03 15 02 	lsl	r3,r5,0x2
80009cd8:	e6 09 06 44 	mulu.d	r4,r3,r9
80009cdc:	f8 05 01 25 	sub	r5,r12,r5<<0x2
80009ce0:	e6 05 06 44 	mulu.d	r4,r3,r5
80009ce4:	ea 03 15 02 	lsl	r3,r5,0x2
80009ce8:	e6 09 06 44 	mulu.d	r4,r3,r9
80009cec:	f8 05 01 25 	sub	r5,r12,r5<<0x2
80009cf0:	e6 05 06 44 	mulu.d	r4,r3,r5
80009cf4:	ea 03 15 02 	lsl	r3,r5,0x2
80009cf8:	e6 08 06 40 	mulu.d	r0,r3,r8
80009cfc:	e4 09 07 40 	macu.d	r0,r2,r9
80009d00:	e6 09 06 44 	mulu.d	r4,r3,r9
80009d04:	02 04       	add	r4,r1
80009d06:	5c 05       	acr	r5
80009d08:	a3 65       	lsl	r5,0x2
80009d0a:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
80009d0e:	a3 64       	lsl	r4,0x2
80009d10:	5c 34       	neg	r4
80009d12:	f8 05 01 45 	sbc	r5,r12,r5
80009d16:	e6 04 06 40 	mulu.d	r0,r3,r4
80009d1a:	e4 05 07 40 	macu.d	r0,r2,r5
80009d1e:	e6 05 06 44 	mulu.d	r4,r3,r5
80009d22:	02 04       	add	r4,r1
80009d24:	5c 05       	acr	r5
80009d26:	ea 03 15 02 	lsl	r3,r5,0x2
80009d2a:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
80009d2e:	e8 02 15 02 	lsl	r2,r4,0x2
80009d32:	e6 08 06 40 	mulu.d	r0,r3,r8
80009d36:	e4 09 07 40 	macu.d	r0,r2,r9
80009d3a:	e6 09 06 44 	mulu.d	r4,r3,r9
80009d3e:	02 04       	add	r4,r1
80009d40:	5c 05       	acr	r5
80009d42:	a3 65       	lsl	r5,0x2
80009d44:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
80009d48:	a3 64       	lsl	r4,0x2
80009d4a:	5c 34       	neg	r4
80009d4c:	f8 05 01 45 	sbc	r5,r12,r5
80009d50:	e6 04 06 40 	mulu.d	r0,r3,r4
80009d54:	e4 05 07 40 	macu.d	r0,r2,r5
80009d58:	e6 05 06 44 	mulu.d	r4,r3,r5
80009d5c:	02 04       	add	r4,r1
80009d5e:	5c 05       	acr	r5
80009d60:	ea 03 15 02 	lsl	r3,r5,0x2
80009d64:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
80009d68:	e8 02 15 02 	lsl	r2,r4,0x2
80009d6c:	e6 0a 06 40 	mulu.d	r0,r3,r10
80009d70:	e4 0b 07 40 	macu.d	r0,r2,r11
80009d74:	e6 0b 06 42 	mulu.d	r2,r3,r11
80009d78:	02 02       	add	r2,r1
80009d7a:	5c 03       	acr	r3
80009d7c:	ed b3 00 1c 	bld	r3,0x1c
80009d80:	c0 90       	breq	80009d92 <__avr32_f64_div+0x12a>
80009d82:	a1 72       	lsl	r2,0x1
80009d84:	5c f3       	rol	r3
80009d86:	20 17       	sub	r7,1
80009d88:	a3 9a       	lsr	r10,0x3
80009d8a:	f5 eb 11 da 	or	r10,r10,r11<<0x1d
80009d8e:	a3 9b       	lsr	r11,0x3
80009d90:	c0 58       	rjmp	80009d9a <__avr32_f64_div+0x132>
80009d92:	a5 8a       	lsr	r10,0x4
80009d94:	f5 eb 11 ca 	or	r10,r10,r11<<0x1c
80009d98:	a5 8b       	lsr	r11,0x4
80009d9a:	58 07       	cp.w	r7,0
80009d9c:	e0 8a 00 8b 	brle	80009eb2 <__avr32_f64_div_res_subnormal>
80009da0:	e0 12 ff 00 	andl	r2,0xff00
80009da4:	e8 12 00 80 	orl	r2,0x80
80009da8:	e6 08 06 40 	mulu.d	r0,r3,r8
80009dac:	e4 09 07 40 	macu.d	r0,r2,r9
80009db0:	e4 08 06 44 	mulu.d	r4,r2,r8
80009db4:	e6 09 06 48 	mulu.d	r8,r3,r9
80009db8:	00 05       	add	r5,r0
80009dba:	f0 01 00 48 	adc	r8,r8,r1
80009dbe:	5c 09       	acr	r9
80009dc0:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
80009dc4:	58 04       	cp.w	r4,0
80009dc6:	5c 25       	cpc	r5

80009dc8 <__avr32_f64_div_round_subnormal>:
80009dc8:	f4 08 13 00 	cpc	r8,r10
80009dcc:	f6 09 13 00 	cpc	r9,r11
80009dd0:	5f 36       	srlo	r6
80009dd2:	f8 06 17 00 	moveq	r6,r12
80009dd6:	e4 0a 16 08 	lsr	r10,r2,0x8
80009dda:	f5 e3 11 8a 	or	r10,r10,r3<<0x18
80009dde:	e6 0b 16 08 	lsr	r11,r3,0x8
80009de2:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
80009de6:	ed be 00 1f 	bld	lr,0x1f
80009dea:	ef bb 00 1f 	bst	r11,0x1f
80009dee:	0c 0a       	add	r10,r6
80009df0:	5c 0b       	acr	r11
80009df2:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
80009df6:	e4 1b 00 0f 	andh	r11,0xf
80009dfa:	14 4b       	or	r11,r10
80009dfc:	e0 81 00 a7 	brne	80009f4a <__avr32_f64_div_res_subnormal+0x98>
80009e00:	f2 06 16 14 	lsr	r6,r9,0x14
80009e04:	ab d6       	cbr	r6,0xb
80009e06:	e0 46 07 ff 	cp.w	r6,2047
80009e0a:	e0 81 00 a4 	brne	80009f52 <__avr32_f64_div_res_subnormal+0xa0>
80009e0e:	c9 e8       	rjmp	80009f4a <__avr32_f64_div_res_subnormal+0x98>
80009e10:	e4 19 00 0f 	andh	r9,0xf
80009e14:	10 49       	or	r9,r8
80009e16:	e0 81 00 9a 	brne	80009f4a <__avr32_f64_div_res_subnormal+0x98>
80009e1a:	c9 28       	rjmp	80009f3e <__avr32_f64_div_res_subnormal+0x8c>
80009e1c:	a3 7b       	lsl	r11,0x3
80009e1e:	f7 ea 13 db 	or	r11,r11,r10>>0x1d
80009e22:	a3 7a       	lsl	r10,0x3
80009e24:	f5 eb 10 04 	or	r4,r10,r11
80009e28:	e0 80 00 a0 	breq	80009f68 <__avr32_f64_div_op1_zero>
80009e2c:	f6 04 12 00 	clz	r4,r11
80009e30:	c1 70       	breq	80009e5e <__avr32_f64_div_round_subnormal+0x96>
80009e32:	c0 c3       	brcs	80009e4a <__avr32_f64_div_round_subnormal+0x82>
80009e34:	e8 05 11 20 	rsub	r5,r4,32
80009e38:	f6 04 09 4b 	lsl	r11,r11,r4
80009e3c:	f4 05 0a 45 	lsr	r5,r10,r5
80009e40:	0a 4b       	or	r11,r5
80009e42:	f4 04 09 4a 	lsl	r10,r10,r4
80009e46:	08 17       	sub	r7,r4
80009e48:	c0 b8       	rjmp	80009e5e <__avr32_f64_div_round_subnormal+0x96>
80009e4a:	f4 04 12 00 	clz	r4,r10
80009e4e:	f9 b4 03 00 	movlo	r4,0
80009e52:	f7 b4 02 e0 	subhs	r4,-32
80009e56:	f4 04 09 4b 	lsl	r11,r10,r4
80009e5a:	30 0a       	mov	r10,0
80009e5c:	08 17       	sub	r7,r4
80009e5e:	a3 8a       	lsr	r10,0x2
80009e60:	f5 eb 11 ea 	or	r10,r10,r11<<0x1e
80009e64:	a3 8b       	lsr	r11,0x2
80009e66:	c1 1b       	rjmp	80009c88 <__avr32_f64_div+0x20>
80009e68:	a3 79       	lsl	r9,0x3
80009e6a:	f3 e8 13 d9 	or	r9,r9,r8>>0x1d
80009e6e:	a3 78       	lsl	r8,0x3
80009e70:	f3 e8 10 04 	or	r4,r9,r8
80009e74:	c6 f0       	breq	80009f52 <__avr32_f64_div_res_subnormal+0xa0>
80009e76:	f2 04 12 00 	clz	r4,r9
80009e7a:	c1 70       	breq	80009ea8 <__avr32_f64_div_round_subnormal+0xe0>
80009e7c:	c0 c3       	brcs	80009e94 <__avr32_f64_div_round_subnormal+0xcc>
80009e7e:	e8 05 11 20 	rsub	r5,r4,32
80009e82:	f2 04 09 49 	lsl	r9,r9,r4
80009e86:	f0 05 0a 45 	lsr	r5,r8,r5
80009e8a:	0a 49       	or	r9,r5
80009e8c:	f0 04 09 48 	lsl	r8,r8,r4
80009e90:	08 16       	sub	r6,r4
80009e92:	c0 b8       	rjmp	80009ea8 <__avr32_f64_div_round_subnormal+0xe0>
80009e94:	f0 04 12 00 	clz	r4,r8
80009e98:	f9 b4 03 00 	movlo	r4,0
80009e9c:	f7 b4 02 e0 	subhs	r4,-32
80009ea0:	f0 04 09 49 	lsl	r9,r8,r4
80009ea4:	30 08       	mov	r8,0
80009ea6:	08 16       	sub	r6,r4
80009ea8:	a3 88       	lsr	r8,0x2
80009eaa:	f1 e9 11 e8 	or	r8,r8,r9<<0x1e
80009eae:	a3 89       	lsr	r9,0x2
80009eb0:	cf ca       	rjmp	80009ca8 <__avr32_f64_div+0x40>

80009eb2 <__avr32_f64_div_res_subnormal>:
80009eb2:	5c 37       	neg	r7
80009eb4:	2f f7       	sub	r7,-1
80009eb6:	f1 b7 04 c0 	satu	r7,0x6
80009eba:	e0 47 00 20 	cp.w	r7,32
80009ebe:	c1 54       	brge	80009ee8 <__avr32_f64_div_res_subnormal+0x36>
80009ec0:	ee 06 11 20 	rsub	r6,r7,32
80009ec4:	e4 07 0a 42 	lsr	r2,r2,r7
80009ec8:	e6 06 09 4c 	lsl	r12,r3,r6
80009ecc:	18 42       	or	r2,r12
80009ece:	e6 07 0a 43 	lsr	r3,r3,r7
80009ed2:	f4 06 09 41 	lsl	r1,r10,r6
80009ed6:	f4 07 0a 4a 	lsr	r10,r10,r7
80009eda:	f6 06 09 4c 	lsl	r12,r11,r6
80009ede:	18 4a       	or	r10,r12
80009ee0:	f6 07 0a 4b 	lsr	r11,r11,r7
80009ee4:	30 00       	mov	r0,0
80009ee6:	c1 58       	rjmp	80009f10 <__avr32_f64_div_res_subnormal+0x5e>
80009ee8:	ee 06 11 20 	rsub	r6,r7,32
80009eec:	f9 b0 00 00 	moveq	r0,0
80009ef0:	f9 bc 00 00 	moveq	r12,0
80009ef4:	c0 50       	breq	80009efe <__avr32_f64_div_res_subnormal+0x4c>
80009ef6:	f4 06 09 40 	lsl	r0,r10,r6
80009efa:	f6 06 09 4c 	lsl	r12,r11,r6
80009efe:	e6 07 0a 42 	lsr	r2,r3,r7
80009f02:	30 03       	mov	r3,0
80009f04:	f4 07 0a 41 	lsr	r1,r10,r7
80009f08:	18 41       	or	r1,r12
80009f0a:	f6 07 0a 4a 	lsr	r10,r11,r7
80009f0e:	30 0b       	mov	r11,0
80009f10:	e0 12 ff 00 	andl	r2,0xff00
80009f14:	e8 12 00 80 	orl	r2,0x80
80009f18:	e6 08 06 46 	mulu.d	r6,r3,r8
80009f1c:	e4 09 07 46 	macu.d	r6,r2,r9
80009f20:	e4 08 06 44 	mulu.d	r4,r2,r8
80009f24:	e6 09 06 48 	mulu.d	r8,r3,r9
80009f28:	0c 05       	add	r5,r6
80009f2a:	f0 07 00 48 	adc	r8,r8,r7
80009f2e:	5c 09       	acr	r9
80009f30:	30 07       	mov	r7,0
80009f32:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
80009f36:	00 34       	cp.w	r4,r0
80009f38:	e2 05 13 00 	cpc	r5,r1
80009f3c:	c4 6b       	rjmp	80009dc8 <__avr32_f64_div_round_subnormal>
80009f3e:	1c 9b       	mov	r11,lr
80009f40:	e6 1b 80 00 	andh	r11,0x8000,COH
80009f44:	30 0a       	mov	r10,0
80009f46:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
80009f4a:	3f fb       	mov	r11,-1
80009f4c:	30 0a       	mov	r10,0
80009f4e:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
80009f52:	f5 eb 10 04 	or	r4,r10,r11
80009f56:	c0 90       	breq	80009f68 <__avr32_f64_div_op1_zero>
80009f58:	1c 9b       	mov	r11,lr
80009f5a:	e6 1b 80 00 	andh	r11,0x8000,COH
80009f5e:	ea 1b 7f f0 	orh	r11,0x7ff0
80009f62:	30 0a       	mov	r10,0
80009f64:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc

80009f68 <__avr32_f64_div_op1_zero>:
80009f68:	f1 e9 10 15 	or	r5,r8,r9<<0x1
80009f6c:	ce f0       	breq	80009f4a <__avr32_f64_div_res_subnormal+0x98>
80009f6e:	e9 d9 c2 8b 	bfextu	r4,r9,0x14,0xb
80009f72:	e0 44 07 ff 	cp.w	r4,2047
80009f76:	ce 41       	brne	80009f3e <__avr32_f64_div_res_subnormal+0x8c>
80009f78:	f1 e9 10 c5 	or	r5,r8,r9<<0xc
80009f7c:	ce 10       	breq	80009f3e <__avr32_f64_div_res_subnormal+0x8c>
80009f7e:	ce 6b       	rjmp	80009f4a <__avr32_f64_div_res_subnormal+0x98>

80009f80 <__avr32_udiv64>:
80009f80:	d4 31       	pushm	r0-r7,lr
80009f82:	1a 97       	mov	r7,sp
80009f84:	20 3d       	sub	sp,12
80009f86:	10 9c       	mov	r12,r8
80009f88:	12 9e       	mov	lr,r9
80009f8a:	14 93       	mov	r3,r10
80009f8c:	58 09       	cp.w	r9,0
80009f8e:	e0 81 00 bd 	brne	8000a108 <__avr32_udiv64+0x188>
80009f92:	16 38       	cp.w	r8,r11
80009f94:	e0 88 00 40 	brls	8000a014 <__avr32_udiv64+0x94>
80009f98:	f0 08 12 00 	clz	r8,r8
80009f9c:	c0 d0       	breq	80009fb6 <__avr32_udiv64+0x36>
80009f9e:	f6 08 09 4b 	lsl	r11,r11,r8
80009fa2:	f0 09 11 20 	rsub	r9,r8,32
80009fa6:	f8 08 09 4c 	lsl	r12,r12,r8
80009faa:	f4 09 0a 49 	lsr	r9,r10,r9
80009fae:	f4 08 09 43 	lsl	r3,r10,r8
80009fb2:	f3 eb 10 0b 	or	r11,r9,r11
80009fb6:	f8 0e 16 10 	lsr	lr,r12,0x10
80009fba:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
80009fbe:	f6 0e 0d 00 	divu	r0,r11,lr
80009fc2:	e6 0b 16 10 	lsr	r11,r3,0x10
80009fc6:	00 99       	mov	r9,r0
80009fc8:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80009fcc:	e0 0a 02 48 	mul	r8,r0,r10
80009fd0:	10 3b       	cp.w	r11,r8
80009fd2:	c0 a2       	brcc	80009fe6 <__avr32_udiv64+0x66>
80009fd4:	20 19       	sub	r9,1
80009fd6:	18 0b       	add	r11,r12
80009fd8:	18 3b       	cp.w	r11,r12
80009fda:	c0 63       	brcs	80009fe6 <__avr32_udiv64+0x66>
80009fdc:	10 3b       	cp.w	r11,r8
80009fde:	f7 b9 03 01 	sublo	r9,1
80009fe2:	f7 dc e3 0b 	addcs	r11,r11,r12
80009fe6:	f6 08 01 01 	sub	r1,r11,r8
80009fea:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
80009fee:	e2 0e 0d 00 	divu	r0,r1,lr
80009ff2:	e7 e1 11 03 	or	r3,r3,r1<<0x10
80009ff6:	00 98       	mov	r8,r0
80009ff8:	e0 0a 02 4a 	mul	r10,r0,r10
80009ffc:	14 33       	cp.w	r3,r10
80009ffe:	c0 82       	brcc	8000a00e <__avr32_udiv64+0x8e>
8000a000:	20 18       	sub	r8,1
8000a002:	18 03       	add	r3,r12
8000a004:	18 33       	cp.w	r3,r12
8000a006:	c0 43       	brcs	8000a00e <__avr32_udiv64+0x8e>
8000a008:	14 33       	cp.w	r3,r10
8000a00a:	f7 b8 03 01 	sublo	r8,1
8000a00e:	f1 e9 11 08 	or	r8,r8,r9<<0x10
8000a012:	cd f8       	rjmp	8000a1d0 <__avr32_udiv64+0x250>
8000a014:	58 08       	cp.w	r8,0
8000a016:	c0 51       	brne	8000a020 <__avr32_udiv64+0xa0>
8000a018:	30 19       	mov	r9,1
8000a01a:	f2 08 0d 08 	divu	r8,r9,r8
8000a01e:	10 9c       	mov	r12,r8
8000a020:	f8 06 12 00 	clz	r6,r12
8000a024:	c0 41       	brne	8000a02c <__avr32_udiv64+0xac>
8000a026:	18 1b       	sub	r11,r12
8000a028:	30 19       	mov	r9,1
8000a02a:	c4 08       	rjmp	8000a0aa <__avr32_udiv64+0x12a>
8000a02c:	ec 01 11 20 	rsub	r1,r6,32
8000a030:	f4 01 0a 49 	lsr	r9,r10,r1
8000a034:	f8 06 09 4c 	lsl	r12,r12,r6
8000a038:	f6 06 09 48 	lsl	r8,r11,r6
8000a03c:	f6 01 0a 41 	lsr	r1,r11,r1
8000a040:	f3 e8 10 08 	or	r8,r9,r8
8000a044:	f8 03 16 10 	lsr	r3,r12,0x10
8000a048:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
8000a04c:	e2 03 0d 00 	divu	r0,r1,r3
8000a050:	f0 0b 16 10 	lsr	r11,r8,0x10
8000a054:	00 9e       	mov	lr,r0
8000a056:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000a05a:	e0 05 02 49 	mul	r9,r0,r5
8000a05e:	12 3b       	cp.w	r11,r9
8000a060:	c0 a2       	brcc	8000a074 <__avr32_udiv64+0xf4>
8000a062:	20 1e       	sub	lr,1
8000a064:	18 0b       	add	r11,r12
8000a066:	18 3b       	cp.w	r11,r12
8000a068:	c0 63       	brcs	8000a074 <__avr32_udiv64+0xf4>
8000a06a:	12 3b       	cp.w	r11,r9
8000a06c:	f7 be 03 01 	sublo	lr,1
8000a070:	f7 dc e3 0b 	addcs	r11,r11,r12
8000a074:	12 1b       	sub	r11,r9
8000a076:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
8000a07a:	f6 03 0d 02 	divu	r2,r11,r3
8000a07e:	f1 e3 11 08 	or	r8,r8,r3<<0x10
8000a082:	04 99       	mov	r9,r2
8000a084:	e4 05 02 4b 	mul	r11,r2,r5
8000a088:	16 38       	cp.w	r8,r11
8000a08a:	c0 a2       	brcc	8000a09e <__avr32_udiv64+0x11e>
8000a08c:	20 19       	sub	r9,1
8000a08e:	18 08       	add	r8,r12
8000a090:	18 38       	cp.w	r8,r12
8000a092:	c0 63       	brcs	8000a09e <__avr32_udiv64+0x11e>
8000a094:	16 38       	cp.w	r8,r11
8000a096:	f7 b9 03 01 	sublo	r9,1
8000a09a:	f1 dc e3 08 	addcs	r8,r8,r12
8000a09e:	f4 06 09 43 	lsl	r3,r10,r6
8000a0a2:	f0 0b 01 0b 	sub	r11,r8,r11
8000a0a6:	f3 ee 11 09 	or	r9,r9,lr<<0x10
8000a0aa:	f8 06 16 10 	lsr	r6,r12,0x10
8000a0ae:	fd dc c0 10 	bfextu	lr,r12,0x0,0x10
8000a0b2:	f6 06 0d 00 	divu	r0,r11,r6
8000a0b6:	e6 0b 16 10 	lsr	r11,r3,0x10
8000a0ba:	00 9a       	mov	r10,r0
8000a0bc:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000a0c0:	e0 0e 02 48 	mul	r8,r0,lr
8000a0c4:	10 3b       	cp.w	r11,r8
8000a0c6:	c0 a2       	brcc	8000a0da <__avr32_udiv64+0x15a>
8000a0c8:	20 1a       	sub	r10,1
8000a0ca:	18 0b       	add	r11,r12
8000a0cc:	18 3b       	cp.w	r11,r12
8000a0ce:	c0 63       	brcs	8000a0da <__avr32_udiv64+0x15a>
8000a0d0:	10 3b       	cp.w	r11,r8
8000a0d2:	f7 ba 03 01 	sublo	r10,1
8000a0d6:	f7 dc e3 0b 	addcs	r11,r11,r12
8000a0da:	f6 08 01 01 	sub	r1,r11,r8
8000a0de:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
8000a0e2:	e2 06 0d 00 	divu	r0,r1,r6
8000a0e6:	e7 e1 11 03 	or	r3,r3,r1<<0x10
8000a0ea:	00 98       	mov	r8,r0
8000a0ec:	e0 0e 02 4b 	mul	r11,r0,lr
8000a0f0:	16 33       	cp.w	r3,r11
8000a0f2:	c0 82       	brcc	8000a102 <__avr32_udiv64+0x182>
8000a0f4:	20 18       	sub	r8,1
8000a0f6:	18 03       	add	r3,r12
8000a0f8:	18 33       	cp.w	r3,r12
8000a0fa:	c0 43       	brcs	8000a102 <__avr32_udiv64+0x182>
8000a0fc:	16 33       	cp.w	r3,r11
8000a0fe:	f7 b8 03 01 	sublo	r8,1
8000a102:	f1 ea 11 08 	or	r8,r8,r10<<0x10
8000a106:	c6 98       	rjmp	8000a1d8 <__avr32_udiv64+0x258>
8000a108:	16 39       	cp.w	r9,r11
8000a10a:	e0 8b 00 65 	brhi	8000a1d4 <__avr32_udiv64+0x254>
8000a10e:	f2 09 12 00 	clz	r9,r9
8000a112:	c0 b1       	brne	8000a128 <__avr32_udiv64+0x1a8>
8000a114:	10 3a       	cp.w	r10,r8
8000a116:	5f 2a       	srhs	r10
8000a118:	1c 3b       	cp.w	r11,lr
8000a11a:	5f b8       	srhi	r8
8000a11c:	10 4a       	or	r10,r8
8000a11e:	f2 0a 18 00 	cp.b	r10,r9
8000a122:	c5 90       	breq	8000a1d4 <__avr32_udiv64+0x254>
8000a124:	30 18       	mov	r8,1
8000a126:	c5 98       	rjmp	8000a1d8 <__avr32_udiv64+0x258>
8000a128:	f0 09 09 46 	lsl	r6,r8,r9
8000a12c:	f2 03 11 20 	rsub	r3,r9,32
8000a130:	fc 09 09 4e 	lsl	lr,lr,r9
8000a134:	f0 03 0a 48 	lsr	r8,r8,r3
8000a138:	f6 09 09 4c 	lsl	r12,r11,r9
8000a13c:	f4 03 0a 42 	lsr	r2,r10,r3
8000a140:	ef 46 ff f4 	st.w	r7[-12],r6
8000a144:	f6 03 0a 43 	lsr	r3,r11,r3
8000a148:	18 42       	or	r2,r12
8000a14a:	f1 ee 10 0c 	or	r12,r8,lr
8000a14e:	f8 01 16 10 	lsr	r1,r12,0x10
8000a152:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
8000a156:	e6 01 0d 04 	divu	r4,r3,r1
8000a15a:	e4 03 16 10 	lsr	r3,r2,0x10
8000a15e:	08 9e       	mov	lr,r4
8000a160:	e7 e5 11 03 	or	r3,r3,r5<<0x10
8000a164:	e8 06 02 48 	mul	r8,r4,r6
8000a168:	10 33       	cp.w	r3,r8
8000a16a:	c0 a2       	brcc	8000a17e <__avr32_udiv64+0x1fe>
8000a16c:	20 1e       	sub	lr,1
8000a16e:	18 03       	add	r3,r12
8000a170:	18 33       	cp.w	r3,r12
8000a172:	c0 63       	brcs	8000a17e <__avr32_udiv64+0x1fe>
8000a174:	10 33       	cp.w	r3,r8
8000a176:	f7 be 03 01 	sublo	lr,1
8000a17a:	e7 dc e3 03 	addcs	r3,r3,r12
8000a17e:	10 13       	sub	r3,r8
8000a180:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
8000a184:	e6 01 0d 00 	divu	r0,r3,r1
8000a188:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000a18c:	00 98       	mov	r8,r0
8000a18e:	e0 06 02 46 	mul	r6,r0,r6
8000a192:	0c 3b       	cp.w	r11,r6
8000a194:	c0 a2       	brcc	8000a1a8 <__avr32_udiv64+0x228>
8000a196:	20 18       	sub	r8,1
8000a198:	18 0b       	add	r11,r12
8000a19a:	18 3b       	cp.w	r11,r12
8000a19c:	c0 63       	brcs	8000a1a8 <__avr32_udiv64+0x228>
8000a19e:	0c 3b       	cp.w	r11,r6
8000a1a0:	f7 dc e3 0b 	addcs	r11,r11,r12
8000a1a4:	f7 b8 03 01 	sublo	r8,1
8000a1a8:	f1 ee 11 08 	or	r8,r8,lr<<0x10
8000a1ac:	ee f4 ff f4 	ld.w	r4,r7[-12]
8000a1b0:	0c 1b       	sub	r11,r6
8000a1b2:	f0 04 06 42 	mulu.d	r2,r8,r4
8000a1b6:	06 95       	mov	r5,r3
8000a1b8:	16 35       	cp.w	r5,r11
8000a1ba:	e0 8b 00 0a 	brhi	8000a1ce <__avr32_udiv64+0x24e>
8000a1be:	5f 0b       	sreq	r11
8000a1c0:	f4 09 09 49 	lsl	r9,r10,r9
8000a1c4:	12 32       	cp.w	r2,r9
8000a1c6:	5f b9       	srhi	r9
8000a1c8:	f7 e9 00 09 	and	r9,r11,r9
8000a1cc:	c0 60       	breq	8000a1d8 <__avr32_udiv64+0x258>
8000a1ce:	20 18       	sub	r8,1
8000a1d0:	30 09       	mov	r9,0
8000a1d2:	c0 38       	rjmp	8000a1d8 <__avr32_udiv64+0x258>
8000a1d4:	30 09       	mov	r9,0
8000a1d6:	12 98       	mov	r8,r9
8000a1d8:	10 9a       	mov	r10,r8
8000a1da:	12 93       	mov	r3,r9
8000a1dc:	10 92       	mov	r2,r8
8000a1de:	12 9b       	mov	r11,r9
8000a1e0:	2f dd       	sub	sp,-12
8000a1e2:	d8 32       	popm	r0-r7,pc

8000a1e4 <__avr32_umod64>:
8000a1e4:	d4 31       	pushm	r0-r7,lr
8000a1e6:	1a 97       	mov	r7,sp
8000a1e8:	20 3d       	sub	sp,12
8000a1ea:	10 9c       	mov	r12,r8
8000a1ec:	12 95       	mov	r5,r9
8000a1ee:	14 9e       	mov	lr,r10
8000a1f0:	16 91       	mov	r1,r11
8000a1f2:	16 96       	mov	r6,r11
8000a1f4:	58 09       	cp.w	r9,0
8000a1f6:	e0 81 00 81 	brne	8000a2f8 <__avr32_umod64+0x114>
8000a1fa:	16 38       	cp.w	r8,r11
8000a1fc:	e0 88 00 12 	brls	8000a220 <__avr32_umod64+0x3c>
8000a200:	f0 08 12 00 	clz	r8,r8
8000a204:	c4 e0       	breq	8000a2a0 <__avr32_umod64+0xbc>
8000a206:	f6 08 09 46 	lsl	r6,r11,r8
8000a20a:	f8 08 09 4c 	lsl	r12,r12,r8
8000a20e:	f0 0b 11 20 	rsub	r11,r8,32
8000a212:	f4 08 09 4e 	lsl	lr,r10,r8
8000a216:	f4 0b 0a 4b 	lsr	r11,r10,r11
8000a21a:	f7 e6 10 06 	or	r6,r11,r6
8000a21e:	c4 18       	rjmp	8000a2a0 <__avr32_umod64+0xbc>
8000a220:	58 08       	cp.w	r8,0
8000a222:	c0 51       	brne	8000a22c <__avr32_umod64+0x48>
8000a224:	30 19       	mov	r9,1
8000a226:	f2 08 0d 08 	divu	r8,r9,r8
8000a22a:	10 9c       	mov	r12,r8
8000a22c:	f8 08 12 00 	clz	r8,r12
8000a230:	c0 31       	brne	8000a236 <__avr32_umod64+0x52>
8000a232:	18 16       	sub	r6,r12
8000a234:	c3 68       	rjmp	8000a2a0 <__avr32_umod64+0xbc>
8000a236:	f0 03 11 20 	rsub	r3,r8,32
8000a23a:	f4 03 0a 4b 	lsr	r11,r10,r3
8000a23e:	f8 08 09 4c 	lsl	r12,r12,r8
8000a242:	ec 08 09 49 	lsl	r9,r6,r8
8000a246:	ec 03 0a 43 	lsr	r3,r6,r3
8000a24a:	f7 e9 10 09 	or	r9,r11,r9
8000a24e:	f8 05 16 10 	lsr	r5,r12,0x10
8000a252:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
8000a256:	e6 05 0d 02 	divu	r2,r3,r5
8000a25a:	f2 0e 16 10 	lsr	lr,r9,0x10
8000a25e:	ec 02 02 4b 	mul	r11,r6,r2
8000a262:	fd e3 11 0e 	or	lr,lr,r3<<0x10
8000a266:	16 3e       	cp.w	lr,r11
8000a268:	c0 72       	brcc	8000a276 <__avr32_umod64+0x92>
8000a26a:	18 0e       	add	lr,r12
8000a26c:	18 3e       	cp.w	lr,r12
8000a26e:	c0 43       	brcs	8000a276 <__avr32_umod64+0x92>
8000a270:	16 3e       	cp.w	lr,r11
8000a272:	fd dc e3 0e 	addcs	lr,lr,r12
8000a276:	fc 0b 01 03 	sub	r3,lr,r11
8000a27a:	f3 d9 c0 10 	bfextu	r9,r9,0x0,0x10
8000a27e:	e6 05 0d 02 	divu	r2,r3,r5
8000a282:	f3 e3 11 09 	or	r9,r9,r3<<0x10
8000a286:	a5 36       	mul	r6,r2
8000a288:	0c 39       	cp.w	r9,r6
8000a28a:	c0 72       	brcc	8000a298 <__avr32_umod64+0xb4>
8000a28c:	18 09       	add	r9,r12
8000a28e:	18 39       	cp.w	r9,r12
8000a290:	c0 43       	brcs	8000a298 <__avr32_umod64+0xb4>
8000a292:	0c 39       	cp.w	r9,r6
8000a294:	f3 dc e3 09 	addcs	r9,r9,r12
8000a298:	f2 06 01 06 	sub	r6,r9,r6
8000a29c:	f4 08 09 4e 	lsl	lr,r10,r8
8000a2a0:	f8 0a 16 10 	lsr	r10,r12,0x10
8000a2a4:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
8000a2a8:	ec 0a 0d 02 	divu	r2,r6,r10
8000a2ac:	fc 09 16 10 	lsr	r9,lr,0x10
8000a2b0:	ea 02 02 4b 	mul	r11,r5,r2
8000a2b4:	f3 e3 11 09 	or	r9,r9,r3<<0x10
8000a2b8:	16 39       	cp.w	r9,r11
8000a2ba:	c0 72       	brcc	8000a2c8 <__avr32_umod64+0xe4>
8000a2bc:	18 09       	add	r9,r12
8000a2be:	18 39       	cp.w	r9,r12
8000a2c0:	c0 43       	brcs	8000a2c8 <__avr32_umod64+0xe4>
8000a2c2:	16 39       	cp.w	r9,r11
8000a2c4:	f3 dc e3 09 	addcs	r9,r9,r12
8000a2c8:	f2 0b 01 0b 	sub	r11,r9,r11
8000a2cc:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
8000a2d0:	f6 0a 0d 0a 	divu	r10,r11,r10
8000a2d4:	fd eb 11 0e 	or	lr,lr,r11<<0x10
8000a2d8:	ea 0a 02 4a 	mul	r10,r5,r10
8000a2dc:	14 3e       	cp.w	lr,r10
8000a2de:	c0 72       	brcc	8000a2ec <__avr32_umod64+0x108>
8000a2e0:	18 0e       	add	lr,r12
8000a2e2:	18 3e       	cp.w	lr,r12
8000a2e4:	c0 43       	brcs	8000a2ec <__avr32_umod64+0x108>
8000a2e6:	14 3e       	cp.w	lr,r10
8000a2e8:	fd dc e3 0e 	addcs	lr,lr,r12
8000a2ec:	fc 0a 01 0a 	sub	r10,lr,r10
8000a2f0:	30 0b       	mov	r11,0
8000a2f2:	f4 08 0a 4a 	lsr	r10,r10,r8
8000a2f6:	c7 b8       	rjmp	8000a3ec <__avr32_umod64+0x208>
8000a2f8:	16 39       	cp.w	r9,r11
8000a2fa:	e0 8b 00 79 	brhi	8000a3ec <__avr32_umod64+0x208>
8000a2fe:	f2 09 12 00 	clz	r9,r9
8000a302:	c1 21       	brne	8000a326 <__avr32_umod64+0x142>
8000a304:	10 3a       	cp.w	r10,r8
8000a306:	5f 2b       	srhs	r11
8000a308:	0a 31       	cp.w	r1,r5
8000a30a:	5f ba       	srhi	r10
8000a30c:	f7 ea 10 0a 	or	r10,r11,r10
8000a310:	f2 0a 18 00 	cp.b	r10,r9
8000a314:	c0 60       	breq	8000a320 <__avr32_umod64+0x13c>
8000a316:	fc 08 01 0c 	sub	r12,lr,r8
8000a31a:	e2 05 01 46 	sbc	r6,r1,r5
8000a31e:	18 9e       	mov	lr,r12
8000a320:	0c 9b       	mov	r11,r6
8000a322:	1c 9a       	mov	r10,lr
8000a324:	c6 48       	rjmp	8000a3ec <__avr32_umod64+0x208>
8000a326:	ea 09 09 4c 	lsl	r12,r5,r9
8000a32a:	f2 06 11 20 	rsub	r6,r9,32
8000a32e:	f6 09 09 4b 	lsl	r11,r11,r9
8000a332:	f0 09 09 42 	lsl	r2,r8,r9
8000a336:	ef 46 ff f4 	st.w	r7[-12],r6
8000a33a:	f0 06 0a 48 	lsr	r8,r8,r6
8000a33e:	18 48       	or	r8,r12
8000a340:	e2 06 0a 4c 	lsr	r12,r1,r6
8000a344:	f4 09 09 43 	lsl	r3,r10,r9
8000a348:	fd d8 c0 10 	bfextu	lr,r8,0x0,0x10
8000a34c:	f4 06 0a 4a 	lsr	r10,r10,r6
8000a350:	16 4a       	or	r10,r11
8000a352:	f0 0b 16 10 	lsr	r11,r8,0x10
8000a356:	f8 0b 0d 04 	divu	r4,r12,r11
8000a35a:	f4 0c 16 10 	lsr	r12,r10,0x10
8000a35e:	08 91       	mov	r1,r4
8000a360:	f9 e5 11 0c 	or	r12,r12,r5<<0x10
8000a364:	e8 0e 02 46 	mul	r6,r4,lr
8000a368:	0c 3c       	cp.w	r12,r6
8000a36a:	c0 a2       	brcc	8000a37e <__avr32_umod64+0x19a>
8000a36c:	20 11       	sub	r1,1
8000a36e:	10 0c       	add	r12,r8
8000a370:	10 3c       	cp.w	r12,r8
8000a372:	c0 63       	brcs	8000a37e <__avr32_umod64+0x19a>
8000a374:	0c 3c       	cp.w	r12,r6
8000a376:	f7 b1 03 01 	sublo	r1,1
8000a37a:	f9 d8 e3 0c 	addcs	r12,r12,r8
8000a37e:	0c 1c       	sub	r12,r6
8000a380:	f5 da c0 10 	bfextu	r10,r10,0x0,0x10
8000a384:	f8 0b 0d 04 	divu	r4,r12,r11
8000a388:	f5 e5 11 0b 	or	r11,r10,r5<<0x10
8000a38c:	08 96       	mov	r6,r4
8000a38e:	e8 0e 02 4e 	mul	lr,r4,lr
8000a392:	1c 3b       	cp.w	r11,lr
8000a394:	c0 a2       	brcc	8000a3a8 <__avr32_umod64+0x1c4>
8000a396:	20 16       	sub	r6,1
8000a398:	10 0b       	add	r11,r8
8000a39a:	10 3b       	cp.w	r11,r8
8000a39c:	c0 63       	brcs	8000a3a8 <__avr32_umod64+0x1c4>
8000a39e:	1c 3b       	cp.w	r11,lr
8000a3a0:	f7 b6 03 01 	sublo	r6,1
8000a3a4:	f7 d8 e3 0b 	addcs	r11,r11,r8
8000a3a8:	ed e1 11 01 	or	r1,r6,r1<<0x10
8000a3ac:	1c 1b       	sub	r11,lr
8000a3ae:	e2 02 06 40 	mulu.d	r0,r1,r2
8000a3b2:	00 9e       	mov	lr,r0
8000a3b4:	02 9c       	mov	r12,r1
8000a3b6:	16 3c       	cp.w	r12,r11
8000a3b8:	e0 8b 00 08 	brhi	8000a3c8 <__avr32_umod64+0x1e4>
8000a3bc:	5f 06       	sreq	r6
8000a3be:	06 30       	cp.w	r0,r3
8000a3c0:	5f ba       	srhi	r10
8000a3c2:	ed ea 00 0a 	and	r10,r6,r10
8000a3c6:	c0 60       	breq	8000a3d2 <__avr32_umod64+0x1ee>
8000a3c8:	fc 02 01 04 	sub	r4,lr,r2
8000a3cc:	f8 08 01 4c 	sbc	r12,r12,r8
8000a3d0:	08 9e       	mov	lr,r4
8000a3d2:	e6 0e 01 0a 	sub	r10,r3,lr
8000a3d6:	f6 0c 01 4c 	sbc	r12,r11,r12
8000a3da:	ee f1 ff f4 	ld.w	r1,r7[-12]
8000a3de:	f8 09 0a 4b 	lsr	r11,r12,r9
8000a3e2:	f4 09 0a 4a 	lsr	r10,r10,r9
8000a3e6:	f8 01 09 4c 	lsl	r12,r12,r1
8000a3ea:	18 4a       	or	r10,r12
8000a3ec:	2f dd       	sub	sp,-12
8000a3ee:	d8 32       	popm	r0-r7,pc

8000a3f0 <__do_global_ctors_aux>:
8000a3f0:	d4 21       	pushm	r4-r7,lr
8000a3f2:	30 c7       	mov	r7,12
8000a3f4:	c0 28       	rjmp	8000a3f8 <__do_global_ctors_aux+0x8>
8000a3f6:	5d 18       	icall	r8
8000a3f8:	20 47       	sub	r7,4
8000a3fa:	6e 08       	ld.w	r8,r7[0x0]
8000a3fc:	5b f8       	cp.w	r8,-1
8000a3fe:	cf c1       	brne	8000a3f6 <__do_global_ctors_aux+0x6>
8000a400:	d8 22       	popm	r4-r7,pc
8000a402:	d7 03       	nop

Disassembly of section .exception:

8000a600 <_evba>:
_evba:

	.org  0x000
	// Unrecoverable Exception.
_handle_Unrecoverable_Exception:
	rjmp $
8000a600:	c0 08       	rjmp	8000a600 <_evba>
	...

8000a604 <_handle_TLB_Multiple_Hit>:

	.org  0x004
	// TLB Multiple Hit.
_handle_TLB_Multiple_Hit:
	rjmp $
8000a604:	c0 08       	rjmp	8000a604 <_handle_TLB_Multiple_Hit>
	...

8000a608 <_handle_Bus_Error_Data_Fetch>:

	.org  0x008
	// Bus Error Data Fetch.
_handle_Bus_Error_Data_Fetch:
	rjmp $
8000a608:	c0 08       	rjmp	8000a608 <_handle_Bus_Error_Data_Fetch>
	...

8000a60c <_handle_Bus_Error_Instruction_Fetch>:

	.org  0x00C
	// Bus Error Instruction Fetch.
_handle_Bus_Error_Instruction_Fetch:
	rjmp $
8000a60c:	c0 08       	rjmp	8000a60c <_handle_Bus_Error_Instruction_Fetch>
	...

8000a610 <_handle_NMI>:

	.org  0x010
	// NMI.
_handle_NMI:
	rjmp $
8000a610:	c0 08       	rjmp	8000a610 <_handle_NMI>
	...

8000a614 <_handle_Instruction_Address>:

	.org  0x014
	// Instruction Address.
_handle_Instruction_Address:
	rjmp $
8000a614:	c0 08       	rjmp	8000a614 <_handle_Instruction_Address>
	...

8000a618 <_handle_ITLB_Protection>:

	.org  0x018
	// ITLB Protection.
_handle_ITLB_Protection:
	rjmp $
8000a618:	c0 08       	rjmp	8000a618 <_handle_ITLB_Protection>
	...

8000a61c <_handle_Breakpoint>:

	.org  0x01C
	// Breakpoint.
_handle_Breakpoint:
	rjmp $
8000a61c:	c0 08       	rjmp	8000a61c <_handle_Breakpoint>
	...

8000a620 <_handle_Illegal_Opcode>:

	.org  0x020
	// Illegal Opcode.
_handle_Illegal_Opcode:
	rjmp $
8000a620:	c0 08       	rjmp	8000a620 <_handle_Illegal_Opcode>
	...

8000a624 <_handle_Unimplemented_Instruction>:

	.org  0x024
	// Unimplemented Instruction.
_handle_Unimplemented_Instruction:
	rjmp $
8000a624:	c0 08       	rjmp	8000a624 <_handle_Unimplemented_Instruction>
	...

8000a628 <_handle_Privilege_Violation>:

	.org  0x028
	// Privilege Violation.
_handle_Privilege_Violation:
	rjmp $
8000a628:	c0 08       	rjmp	8000a628 <_handle_Privilege_Violation>
	...

8000a62c <_handle_Floating_Point>:

	.org  0x02C
	// Floating-Point: UNUSED IN AVR UC3.
_handle_Floating_Point:
	rjmp $
8000a62c:	c0 08       	rjmp	8000a62c <_handle_Floating_Point>
	...

8000a630 <_handle_Coprocessor_Absent>:

	.org  0x030
	// Coprocessor Absent: UNUSED IN AVR UC3.
_handle_Coprocessor_Absent:
	rjmp $
8000a630:	c0 08       	rjmp	8000a630 <_handle_Coprocessor_Absent>
	...

8000a634 <_handle_Data_Address_Read>:

	.org  0x034
	// Data Address (Read).
_handle_Data_Address_Read:
	rjmp $
8000a634:	c0 08       	rjmp	8000a634 <_handle_Data_Address_Read>
	...

8000a638 <_handle_Data_Address_Write>:

	.org  0x038
	// Data Address (Write).
_handle_Data_Address_Write:
	rjmp $
8000a638:	c0 08       	rjmp	8000a638 <_handle_Data_Address_Write>
	...

8000a63c <_handle_DTLB_Protection_Read>:

	.org  0x03C
	// DTLB Protection (Read).
_handle_DTLB_Protection_Read:
	rjmp $
8000a63c:	c0 08       	rjmp	8000a63c <_handle_DTLB_Protection_Read>
	...

8000a640 <_handle_DTLB_Protection_Write>:

	.org  0x040
	// DTLB Protection (Write).
_handle_DTLB_Protection_Write:
	rjmp $
8000a640:	c0 08       	rjmp	8000a640 <_handle_DTLB_Protection_Write>
	...

8000a644 <_handle_DTLB_Modified>:

	.org  0x044
	// DTLB Modified: UNUSED IN AVR32UC.
_handle_DTLB_Modified:
	rjmp $
8000a644:	c0 08       	rjmp	8000a644 <_handle_DTLB_Modified>
	...

8000a650 <_handle_ITLB_Miss>:

	.org  0x050
	// ITLB Miss.
_handle_ITLB_Miss:
	rjmp $
8000a650:	c0 08       	rjmp	8000a650 <_handle_ITLB_Miss>
	...

8000a660 <_handle_DTLB_Miss_Read>:

	.org  0x060
	// DTLB Miss (Read).
_handle_DTLB_Miss_Read:
	rjmp $
8000a660:	c0 08       	rjmp	8000a660 <_handle_DTLB_Miss_Read>
	...

8000a670 <_handle_DTLB_Miss_Write>:

	.org  0x070
	// DTLB Miss (Write).
_handle_DTLB_Miss_Write:
	rjmp $
8000a670:	c0 08       	rjmp	8000a670 <_handle_DTLB_Miss_Write>
	...

8000a700 <_handle_Supervisor_Call>:

	.org  0x100
	// Supervisor Call.
_handle_Supervisor_Call:
	lda.w   pc, SCALLYield
8000a700:	fe cf 6d ac 	sub	pc,pc,28076

8000a704 <_int0>:
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
	rete
.endr
8000a704:	30 0c       	mov	r12,0
8000a706:	fe b0 c6 5d 	rcall	800033c0 <_get_interrupt_handler>
8000a70a:	58 0c       	cp.w	r12,0
8000a70c:	f8 0f 17 10 	movne	pc,r12
8000a710:	d6 03       	rete

8000a712 <_int1>:
8000a712:	30 1c       	mov	r12,1
8000a714:	fe b0 c6 56 	rcall	800033c0 <_get_interrupt_handler>
8000a718:	58 0c       	cp.w	r12,0
8000a71a:	f8 0f 17 10 	movne	pc,r12
8000a71e:	d6 03       	rete

8000a720 <_int2>:
8000a720:	30 2c       	mov	r12,2
8000a722:	fe b0 c6 4f 	rcall	800033c0 <_get_interrupt_handler>
8000a726:	58 0c       	cp.w	r12,0
8000a728:	f8 0f 17 10 	movne	pc,r12
8000a72c:	d6 03       	rete

8000a72e <_int3>:
8000a72e:	30 3c       	mov	r12,3
8000a730:	fe b0 c6 48 	rcall	800033c0 <_get_interrupt_handler>
8000a734:	58 0c       	cp.w	r12,0
8000a736:	f8 0f 17 10 	movne	pc,r12
8000a73a:	d6 03       	rete
8000a73c:	d7 03       	nop
8000a73e:	d7 03       	nop
8000a740:	d7 03       	nop
8000a742:	d7 03       	nop
8000a744:	d7 03       	nop
8000a746:	d7 03       	nop
8000a748:	d7 03       	nop
8000a74a:	d7 03       	nop
8000a74c:	d7 03       	nop
8000a74e:	d7 03       	nop
8000a750:	d7 03       	nop
8000a752:	d7 03       	nop
8000a754:	d7 03       	nop
8000a756:	d7 03       	nop
8000a758:	d7 03       	nop
8000a75a:	d7 03       	nop
8000a75c:	d7 03       	nop
8000a75e:	d7 03       	nop
8000a760:	d7 03       	nop
8000a762:	d7 03       	nop
8000a764:	d7 03       	nop
8000a766:	d7 03       	nop
8000a768:	d7 03       	nop
8000a76a:	d7 03       	nop
8000a76c:	d7 03       	nop
8000a76e:	d7 03       	nop
8000a770:	d7 03       	nop
8000a772:	d7 03       	nop
8000a774:	d7 03       	nop
8000a776:	d7 03       	nop
8000a778:	d7 03       	nop
8000a77a:	d7 03       	nop
8000a77c:	d7 03       	nop
8000a77e:	d7 03       	nop
8000a780:	d7 03       	nop
8000a782:	d7 03       	nop
8000a784:	d7 03       	nop
8000a786:	d7 03       	nop
8000a788:	d7 03       	nop
8000a78a:	d7 03       	nop
8000a78c:	d7 03       	nop
8000a78e:	d7 03       	nop
8000a790:	d7 03       	nop
8000a792:	d7 03       	nop
8000a794:	d7 03       	nop
8000a796:	d7 03       	nop
8000a798:	d7 03       	nop
8000a79a:	d7 03       	nop
8000a79c:	d7 03       	nop
8000a79e:	d7 03       	nop
8000a7a0:	d7 03       	nop
8000a7a2:	d7 03       	nop
8000a7a4:	d7 03       	nop
8000a7a6:	d7 03       	nop
8000a7a8:	d7 03       	nop
8000a7aa:	d7 03       	nop
8000a7ac:	d7 03       	nop
8000a7ae:	d7 03       	nop
8000a7b0:	d7 03       	nop
8000a7b2:	d7 03       	nop
8000a7b4:	d7 03       	nop
8000a7b6:	d7 03       	nop
8000a7b8:	d7 03       	nop
8000a7ba:	d7 03       	nop
8000a7bc:	d7 03       	nop
8000a7be:	d7 03       	nop
8000a7c0:	d7 03       	nop
8000a7c2:	d7 03       	nop
8000a7c4:	d7 03       	nop
8000a7c6:	d7 03       	nop
8000a7c8:	d7 03       	nop
8000a7ca:	d7 03       	nop
8000a7cc:	d7 03       	nop
8000a7ce:	d7 03       	nop
8000a7d0:	d7 03       	nop
8000a7d2:	d7 03       	nop
8000a7d4:	d7 03       	nop
8000a7d6:	d7 03       	nop
8000a7d8:	d7 03       	nop
8000a7da:	d7 03       	nop
8000a7dc:	d7 03       	nop
8000a7de:	d7 03       	nop
8000a7e0:	d7 03       	nop
8000a7e2:	d7 03       	nop
8000a7e4:	d7 03       	nop
8000a7e6:	d7 03       	nop
8000a7e8:	d7 03       	nop
8000a7ea:	d7 03       	nop
8000a7ec:	d7 03       	nop
8000a7ee:	d7 03       	nop
8000a7f0:	d7 03       	nop
8000a7f2:	d7 03       	nop
8000a7f4:	d7 03       	nop
8000a7f6:	d7 03       	nop
8000a7f8:	d7 03       	nop
8000a7fa:	d7 03       	nop
8000a7fc:	d7 03       	nop
8000a7fe:	d7 03       	nop

Disassembly of section .fini:

8000a800 <_fini>:
8000a800:	eb cd 40 40 	pushm	r6,lr
8000a804:	48 26       	lddpc	r6,8000a80c <_fini+0xc>
8000a806:	1e 26       	rsub	r6,pc
8000a808:	c0 48       	rjmp	8000a810 <_fini+0x10>
8000a80a:	d7 03       	nop
8000a80c:	80 00       	ld.sh	r0,r0[0x0]
8000a80e:	a7 ea       	*unknown*
8000a810:	fe b0 bc 3e 	rcall	8000208c <__do_global_dtors_aux>
8000a814:	e3 cd 80 40 	ldm	sp++,r6,pc
